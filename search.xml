<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>가나다라</title>
    <url>/2020/03/28/%EA%B0%80%EB%82%98%EB%8B%A4%EB%9D%BC/</url>
    <content><![CDATA[<p>가나다라라라ㅏ</p>
]]></content>
  </entry>
  <entry>
    <title>[BOJ] 14891. 톱니바퀴</title>
    <url>/2020/03/24/%5BBOJ%5D%2014891.%20%ED%86%B1%EB%8B%88%EB%B0%94%ED%80%B4/</url>
    <content><![CDATA[<h3 id="14891-톱니바퀴"><a href="#14891-톱니바퀴" class="headerlink" title="14891. 톱니바퀴"></a>14891. 톱니바퀴</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14891" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotation</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">        temp = gear[n].pop()</span><br><span class="line">        gear[n].insert(<span class="number">0</span>, temp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = gear[n].pop(<span class="number">0</span>)</span><br><span class="line">        gear[n].append(temp)</span><br><span class="line">gear = [list(map(int, input())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">rotate, res = [], <span class="number">0</span></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(K):</span><br><span class="line">    rotate.append(list(map(int, input().split())))</span><br><span class="line"><span class="keyword">for</span> n, d <span class="keyword">in</span> rotate:</span><br><span class="line">    state = [(n <span class="number">-1</span>, d)]</span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">2</span>] != gear[i+<span class="number">1</span>][<span class="number">6</span>]:</span><br><span class="line">                state.append((i + <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">6</span>] != gear[i<span class="number">-1</span>][<span class="number">2</span>]:</span><br><span class="line">                state.append((i - <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> state:</span><br><span class="line">        rotation(a, b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> gear[i][<span class="number">0</span>]:</span><br><span class="line">        res += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14890. 경사로</title>
    <url>/2020/03/23/%5BBOJ%5D%2014890.%20%EA%B2%BD%EC%82%AC%EB%A1%9C/</url>
    <content><![CDATA[<h3 id="14890-경사로"><a href="#14890-경사로" class="headerlink" title="14890. 경사로"></a>14890. 경사로</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14890" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 가로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] == Map[i][idx]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[i][idx - <span class="number">1</span>] - Map[i][idx]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] &lt; Map[i][idx]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][idx] == Map[i][j]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 세로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] == Map[idx][i]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[idx - <span class="number">1</span>][i] - Map[idx][i]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] &lt; Map[idx][i]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[idx][i] == Map[j][i]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14889. 스타트와 링크</title>
    <url>/2020/03/21/%5BBOJ%5D%2014889.%20%EC%8A%A4%ED%83%80%ED%8A%B8%EC%99%80%20%EB%A7%81%ED%81%AC/</url>
    <content><![CDATA[<h3 id="14889-스타트와-링크"><a href="#14889-스타트와-링크" class="headerlink" title="14889. 스타트와 링크"></a>14889. 스타트와 링크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14889" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">comb = list(combinations(range(N), N//<span class="number">2</span>))</span><br><span class="line">count = len(list(combinations(range(N), N//<span class="number">2</span>)))//<span class="number">2</span></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(count):</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                a += Map[comb[l][i]][comb[l][j]] + Map[comb[l][j]][comb[l][i]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                b += Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]] + Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]]</span><br><span class="line">        res = min(res, abs(a-b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14888. 연산자 끼워넣기</title>
    <url>/2020/03/19/%5BBOJ%5D%2014888.%20%EC%97%B0%EC%82%B0%EC%9E%90%20%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14888-연산자-끼워넣기"><a href="#14888-연산자-끼워넣기" class="headerlink" title="14888. 연산자 끼워넣기"></a>14888. 연산자 끼워넣기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">numbers = list(map(int, input().split()))</span><br><span class="line">plus, minus, product, divide = map(int, input().split())</span><br><span class="line">max_n = <span class="number">-10e10</span></span><br><span class="line">min_n = <span class="number">10e10</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(plus, minus, product, divide, cnt, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cnt == N<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">global</span> max_n, min_n</span><br><span class="line">        max_n = max(number, max_n)</span><br><span class="line">        min_n = min(number, min_n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> plus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus - <span class="number">1</span>, minus, product, divide, cnt + <span class="number">1</span>, number + numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> minus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus - <span class="number">1</span>, product, divide, cnt + <span class="number">1</span>, number - numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> product &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product - <span class="number">1</span>, divide, cnt + <span class="number">1</span>, number * numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> divide &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product, divide - <span class="number">1</span>, cnt + <span class="number">1</span>, int(number / numbers[cnt+<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">calc(plus, minus, product, divide, <span class="number">0</span>, numbers[<span class="number">0</span>])</span><br><span class="line">print(max_n)</span><br><span class="line">print(min_n)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14499. 주사위 굴리기</title>
    <url>/2020/03/18/%5BBOJ%5D%2014499.%20%EC%A3%BC%EC%82%AC%EC%9C%84%20%EA%B5%B4%EB%A6%AC%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14499-주사위-굴리기"><a href="#14499-주사위-굴리기" class="headerlink" title="14499. 주사위 굴리기"></a>14499. 주사위 굴리기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>굴리는 것만 생각하면 된다. 방향은 틀어 지지 않는다.</p><p>그래서 상하좌우로 굴려질 때, 각 위치가 이동되어 지는 위치만을 고려하여 풀이하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">direction = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line">d = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">N, M, y, x, K = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">move = list(map(int, input().split()))</span><br><span class="line">dice, temp = [<span class="number">0</span>] * <span class="number">6</span>, [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> move:</span><br><span class="line">    y += d[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    x += d[i<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &gt; y <span class="keyword">or</span> y &gt;= N <span class="keyword">or</span> <span class="number">0</span> &gt; x <span class="keyword">or</span> x &gt;= M:</span><br><span class="line">        y -= d[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        x -= d[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    temp = dice[:]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        dice[j] = temp[direction[i<span class="number">-1</span>][j]<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = dice[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dice[<span class="number">5</span>], Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">    print(dice[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13458. 시험 감독</title>
    <url>/2020/03/18/%5BBOJ%5D%2013458.%20%EC%8B%9C%ED%97%98%20%EA%B0%90%EB%8F%85/</url>
    <content><![CDATA[<h3 id="13458-시험-감독"><a href="#13458-시험-감독" class="headerlink" title="13458. 시험 감독"></a>13458. 시험 감독</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13458" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">student = list(map(int, input().split()))</span><br><span class="line">B, C = map(int, input().split())</span><br><span class="line">cnt = N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> student:</span><br><span class="line">    a = i - B</span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (a % C) == <span class="number">0</span>:</span><br><span class="line">            cnt += a // C</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt += (a//C) + <span class="number">1</span></span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 3190. 뱀</title>
    <url>/2020/03/17/%5BBOJ%5D%203190.%20%EB%B1%80/</url>
    <content><![CDATA[<h3 id="3190-뱀"><a href="#3190-뱀" class="headerlink" title="3190. 뱀"></a>3190. 뱀</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/3190" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_check</span><span class="params">(d, str)</span>:</span> <span class="comment"># 방향을 돌려준다.</span></span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">'D'</span>:</span><br><span class="line">        d = (d + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> str == <span class="string">'L'</span>:</span><br><span class="line">        d = (d - <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(snake)</span>:</span> <span class="comment"># 방향따라 한칸씩 이동</span></span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">2</span>] == <span class="number">0</span>:</span><br><span class="line">        snake[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        snake[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">2</span>:</span><br><span class="line">        snake[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">3</span>:</span><br><span class="line">        snake[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> snake</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    snake = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]   <span class="comment"># 초기 뱀의 위치, 방향</span></span><br><span class="line">    route.append([<span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># 뱀이 움직이는 경로</span></span><br><span class="line">    Map[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    t_idx = end_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = move(snake) <span class="comment"># 뱀의 이동</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> s[<span class="number">1</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> N &lt; s[<span class="number">0</span>] <span class="keyword">or</span> N &lt; s[<span class="number">1</span>] <span class="keyword">or</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] == <span class="number">1</span>:</span><br><span class="line">            end_time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] != <span class="number">2</span>: <span class="comment"># 사과가 없으면</span></span><br><span class="line">            a, b = route.pop(<span class="number">0</span>) <span class="comment"># 꼬리 당기기</span></span><br><span class="line">            Map[a][b] = <span class="number">0</span></span><br><span class="line">        Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">        route.append([s[<span class="number">0</span>], s[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        snake = s[:] <span class="comment"># 이동한 위치를 다시 snake에 저장</span></span><br><span class="line"></span><br><span class="line">        end_time += <span class="number">1</span> <span class="comment"># 1초 증가</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t_idx != len(time):</span><br><span class="line">            <span class="keyword">if</span> end_time == int(time[t_idx][<span class="number">0</span>]): <span class="comment"># 이동 시간에 이동</span></span><br><span class="line">                snake[<span class="number">2</span>] = dir_check(snake[<span class="number">2</span>], time[t_idx][<span class="number">1</span>])</span><br><span class="line">                t_idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end_time</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>]*(N+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">time = []</span><br><span class="line">route = []</span><br><span class="line"></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    Map[a][b] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">L = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(L):</span><br><span class="line">    a, b = list(input().split())</span><br><span class="line">    time.append((a,b))</span><br><span class="line"></span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 12100. 2048 (Easy)</title>
    <url>/2020/03/17/%5BBOJ%5D%2012100.%202048%20(Easy)/</url>
    <content><![CDATA[<h3 id="12100-2048-Easy"><a href="#12100-2048-Easy" class="headerlink" title="12100. 2048 (Easy)"></a>12100. 2048 (Easy)</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작 전, 초기 맵의 MAX값을 res에 넣어 두고 시작한다.</p><p>product 내장 함수를 통해서 중복순열을 구현하여 시뮬레이션을 돌렸다.</p><p>같은 값을 더해주고 이동시키면서 한칸한칸 전진하려 했는데 헷갈려서</p><p>같은 값을 찾아서 모두 더해준 후 각 방향에 따라서 이동시켜 주는 식으로 풀이 하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(S, n)</span>:</span></span><br><span class="line">    temp = n</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> range(len(S)):</span><br><span class="line">        <span class="keyword">if</span> S[d] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]: <span class="keyword">continue</span></span><br><span class="line">                    cnt = <span class="number">1</span>; flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j + cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j + cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j + cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[j][i], Map[k][i] = Map[k][i], Map[j][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j - cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j - cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j - cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[k][i], Map[j][i] = Map[j][i], Map[k][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j + cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j + cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j + cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][j], Map[i][k] = Map[i][k], Map[i][j]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j - cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j - cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j - cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][k], Map[i][j] = Map[i][j], Map[i][k]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">cpMap = deepcopy(Map)</span><br><span class="line">lis = list(product(range(<span class="number">4</span>), repeat=<span class="number">5</span>))</span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    temp = max(temp, *Map[i])</span><br><span class="line">res = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)):</span><br><span class="line">    n = move(lis[i], res)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">    Map = deepcopy(cpMap)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13460. 구슬 탈출 2</title>
    <url>/2020/03/17/%5BBOJ%5D%2013460.%20%EA%B5%AC%EC%8A%AC%20%ED%83%88%EC%B6%9C%202/</url>
    <content><![CDATA[<h3 id="13460-구슬-탈출-2"><a href="#13460-구슬-탈출-2" class="headerlink" title="13460. 구슬 탈출 2"></a>13460. 구슬 탈출 2</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(dir, y, x, hy, hx)</span>:</span> <span class="comment"># 각 방향으로 이동하면서 홀에 빠지는지 체크</span></span><br><span class="line">    cnt = hole = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>: <span class="comment"># 상</span></span><br><span class="line">        <span class="keyword">while</span> Map[y - cnt - <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y - cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y -= cnt</span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>: <span class="comment"># 하</span></span><br><span class="line">        <span class="keyword">while</span> Map[y + cnt + <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y + cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y += cnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>: <span class="comment"># 좌</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x - cnt - <span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x - cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x -= cnt</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 우</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x + cnt +<span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x + cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x += cnt</span><br><span class="line">    <span class="keyword">return</span> hole, y, x, cnt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_rb</span><span class="params">(dir, ry, rx, by, bx, res)</span>:</span> <span class="comment"># 같은 자리니까 더 많이 움직인 쪽이 멀리 있으니까 한칸 덜 오도록</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ry, rx, by, bx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, d, ry, rx, by, bx, hy, hx)</span>:</span> <span class="comment"># red, blue, hole</span></span><br><span class="line">    dq = deque()</span><br><span class="line">    dq.append([cnt, d, ry, rx, by, bx, hy, hx])</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        cnt, d, ry, rx, by, bx, hy, hx = dq.popleft()</span><br><span class="line">        <span class="keyword">if</span> cnt &gt; <span class="number">9</span>:</span><br><span class="line">            result = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="comment"># 상하좌우 체크</span></span><br><span class="line">            <span class="keyword">if</span> cnt != <span class="number">0</span>: <span class="comment"># 처음에는 상하좌우 다 돌아야 되기 때문에 거를 필요 없음</span></span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">0</span> <span class="keyword">or</span> d == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> d == <span class="number">2</span> <span class="keyword">or</span> d == <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">or</span> i == <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            b_check, next_by, next_bx, b_cnt = move(i, by, bx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> b_check: <span class="comment"># 파란색 공이 빠졌으면 진행할 필요없이 다음으로</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            r_check, next_ry, next_rx, r_cnt = move(i, ry, rx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> r_check: <span class="comment"># 빨간색 공이 빠졌으면 끝</span></span><br><span class="line">                result = cnt + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> next_ry == next_by <span class="keyword">and</span> next_rx == next_bx: <span class="comment"># 옮겼을 때, 같은 위치면 이동</span></span><br><span class="line">                next_ry, next_rx, next_by, next_bx = compare_rb(i, next_ry, next_rx, next_by, next_bx, b_cnt &gt; r_cnt)</span><br><span class="line">            </span><br><span class="line">            dq.append([cnt + <span class="number">1</span>, i, next_ry, next_rx, next_by, next_bx, hy, hx])</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'B'</span>:</span><br><span class="line">            blue_y = i; blue_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'R'</span>:</span><br><span class="line">            red_y = i; red_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'O'</span>:</span><br><span class="line">            hole_y = i; hole_x = j</span><br><span class="line"></span><br><span class="line">print(solve(<span class="number">0</span>, <span class="literal">None</span>, red_y, red_x, blue_y, blue_x, hole_y, hole_x))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14502. 연구소</title>
    <url>/2020/03/16/%5BBOJ%5D%2014502.%20%EC%97%B0%EA%B5%AC%EC%86%8C/</url>
    <content><![CDATA[<h3 id="14502-연구소"><a href="#14502-연구소" class="headerlink" title="14502. 연구소"></a>14502. 연구소</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>바이러스 위치를 virus 리스트에 담고, 0의 위치를 comb 리스트를 담았다.</p><p>combinations 함수를 통해 comb 리스트안의 요소들로 조합을 만들어 bfs를 돌리며</p><p>안전영역의 최대값을 구했다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(visit)</span>:</span></span><br><span class="line">    cnt = len(comb) - <span class="number">3</span></span><br><span class="line">    q = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> virus:</span><br><span class="line">        q.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            ny = y + a</span><br><span class="line">            nx = x + b</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx] <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line">                    cnt -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cnt &lt;= res: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">virus = []</span><br><span class="line">comb = []</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            virus.append([i, j])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]:</span><br><span class="line">            comb.append([i, j])</span><br><span class="line">c = list(combinations(comb, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</span><br><span class="line">    visit = [[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        y, x = c[i][j][<span class="number">0</span>], c[i][j][<span class="number">1</span>]</span><br><span class="line">        visit[y][x] = <span class="number">1</span></span><br><span class="line">    n = bfs(visit)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14500. 테트로미노</title>
    <url>/2020/03/16/%5BBOJ%5D%2014500.%20%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8/</url>
    <content><![CDATA[<h3 id="14500-테트로미노"><a href="#14500-테트로미노" class="headerlink" title="14500. 테트로미노"></a>14500. 테트로미노</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>문제 그대로 구현했다. 블럭을 순서를 매기고 회전할 수 있는 방향을 하나하나 다 지정해주었다.</p><p>문제를 제대로 읽었어야 했다. 회전까지는 만들고 대칭을 안읽어서 헤맸었다.</p><p>회전과 대칭이 모두 가능하다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = map(int, input().split()) <span class="comment"># N * M</span></span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="comment"># 1번</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">3</span> &lt; M:</span><br><span class="line">            res.add(sum(Map[i][j:j+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">3</span> &lt; N:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, i + <span class="number">4</span>):</span><br><span class="line">                temp += Map[k][j]</span><br><span class="line">            res.add(temp)</span><br><span class="line">        <span class="comment"># 2번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># 3번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j<span class="number">-1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 4번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i + <span class="number">1</span>][j] + Map[i + <span class="number">1</span>][j - <span class="number">1</span>] + Map[i + <span class="number">2</span>][j - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 5번</span></span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i<span class="number">-1</span>][j] + Map[i][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">print(max(res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14503. 로봇 청소기</title>
    <url>/2020/03/16/%5BBOJ%5D%2014503.%20%EB%A1%9C%EB%B4%87%20%EC%B2%AD%EC%86%8C%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14503-로봇-청소기"><a href="#14503-로봇-청소기" class="headerlink" title="14503. 로봇 청소기"></a>14503. 로봇 청소기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작위치 ry, rx 와 방향 d를 받아서 풀이를 진행한다.</p><p>0 : 북, 1 : 동, 2 : 남, 3 : 서</p><p>방향이 지정되어 있고 문제의 조건에 현재 방향의 왼쪽부터 탐색한다고 되어 있으므로</p><p>탐색 방향을 dir + 3 - i 로 지정해 주었다.</p><p>다음 2 - c 조건에 의해서 4방향 다 청소가 되어 있는 경우</p><p>방향에 +2를 해주어 반대방향으로 설정해주고 다시 solve함수를 호출한다.</p><p>이 때, 2 - d의 조건인 반대방향이 벽이면 그대로 종료한다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(y, x, dir)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = <span class="number">2</span></span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a, b = d[(dir + <span class="number">3</span> - i) % <span class="number">4</span>]</span><br><span class="line">        ny = y + a</span><br><span class="line">        nx = x + b</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M <span class="keyword">and</span> <span class="keyword">not</span> Map[ny][nx]:</span><br><span class="line">            solve(ny,  nx, (dir + <span class="number">3</span> - i) % <span class="number">4</span>)</span><br><span class="line">    <span class="comment">#4방향 다 청소 되어 있는 경우</span></span><br><span class="line">    a, b = d[(dir+<span class="number">2</span>) % <span class="number">4</span>]</span><br><span class="line">    ny = y + a</span><br><span class="line">    nx = x + b</span><br><span class="line">    <span class="keyword">if</span> Map[ny][nx] == <span class="number">1</span>:</span><br><span class="line">        print(res); sys.exit(<span class="number">0</span>)</span><br><span class="line">    solve(ny, nx, dir)</span><br><span class="line"><span class="comment"># 0123 북동남서</span></span><br><span class="line">d = [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">-1</span>]]</span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">ry, rx, dir = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">solve(ry, rx, dir)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>첫 포스팅! 꾸준하자</title>
    <url>/2020/03/16/%5B1%5D%EC%B2%AB%20%ED%8F%AC%EC%8A%A4%ED%8C%85/</url>
    <content><![CDATA[<p>​           <a id="more"></a></p>
<div class="note warning">
            <ul><li>생각나는 것들 기록하기</li><li>하루 최소 1commit 하기</li><li>공부한 거 정리</li></ul>
          </div>

]]></content>
  </entry>
</search>
