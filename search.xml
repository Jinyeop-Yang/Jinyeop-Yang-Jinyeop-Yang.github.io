<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[BOJ] 17140. 이차원 배열과 연산</title>
    <url>/2020/04/26/%5BBOJ%5D%2017140.%20%EC%9D%B4%EC%B0%A8%EC%9B%90%20%EB%B0%B0%EC%97%B4%EA%B3%BC%20%EC%97%B0%EC%82%B0/</url>
    <content><![CDATA[<h3 id="17140-이차원-배열과-연산"><a href="#17140-이차원-배열과-연산" class="headerlink" title="17140. 이차원 배열과 연산"></a>17140. 이차원 배열과 연산</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17140" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abc</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX], cpmap[MAX][MAX], temp[MAX];</span><br><span class="line"><span class="keyword">int</span> r, c, k, a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">m</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num, cnt;</span><br><span class="line">&#125;m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;m&gt; Matrix;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(m a, m b)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//if문안에 a가 앞에올 조건을 걸어라</span></span><br><span class="line">	<span class="keyword">if</span> (a.cnt &lt;= b.cnt) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.cnt == b.cnt) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.num &lt; b.num) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt_r = <span class="number">0</span>, cnt_c = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == k || t &gt; <span class="number">100</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[j][i] != <span class="number">0</span>)</span><br><span class="line">					cnt1++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="number">0</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt_r = <span class="built_in">max</span>(cnt_r, cnt1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">					cnt2++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt_c = <span class="built_in">max</span>(cnt_c, cnt2);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cnt_r &gt;= cnt_c) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					temp[<span class="built_in">map</span>[i][j]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123; </span><br><span class="line">					<span class="keyword">if</span> (temp[j] != <span class="number">0</span>) &#123;</span><br><span class="line">						Matrix.push_back(&#123; j,temp[j] &#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				sort(Matrix.<span class="built_in">begin</span>(), Matrix.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Matrix.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					v.push_back(Matrix[j].num);</span><br><span class="line">					v.push_back(Matrix[j].cnt);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">				<span class="built_in">size</span> = <span class="built_in">max</span>(<span class="built_in">size</span>, length);</span><br><span class="line">				a = <span class="built_in">max</span>(a, <span class="built_in">size</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt_r; j++)</span><br><span class="line">					<span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">					<span class="keyword">if</span>(j+<span class="number">1</span>&lt;<span class="number">100</span>)</span><br><span class="line">						<span class="built_in">map</span>[i][j + <span class="number">1</span>] = v[j];</span><br><span class="line">				</span><br><span class="line">				Matrix.<span class="built_in">clear</span>();</span><br><span class="line">				v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cnt_r &lt; cnt_c) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;MAX; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					temp[<span class="built_in">map</span>[j][i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (temp[j] != <span class="number">0</span>) &#123;</span><br><span class="line">						Matrix.push_back(&#123; j,temp[j] &#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				sort(Matrix.<span class="built_in">begin</span>(), Matrix.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Matrix.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					v.push_back(Matrix[j].num);</span><br><span class="line">					v.push_back(Matrix[j].cnt);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">				<span class="built_in">size</span> = <span class="built_in">max</span>(<span class="built_in">size</span>, length);</span><br><span class="line">				a = <span class="built_in">max</span>(a, <span class="built_in">size</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt_c; j++)</span><br><span class="line">					<span class="built_in">map</span>[j][i] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">					<span class="keyword">if</span>(j+<span class="number">1</span>&lt;<span class="number">100</span>)</span><br><span class="line">						<span class="built_in">map</span>[j+<span class="number">1</span>][i] = v[j];</span><br><span class="line"></span><br><span class="line">				Matrix.<span class="built_in">clear</span>();</span><br><span class="line">				v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		t++;</span><br><span class="line">		a = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> time = solve();</span><br><span class="line">	<span class="keyword">if</span> (time ==<span class="number">101</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; time;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17143. 낚시왕</title>
    <url>/2020/04/25/%5BBOJ%5D%2017143.%20%EB%82%9A%EC%8B%9C%EC%99%95/</url>
    <content><![CDATA[<h3 id="17143-낚시왕"><a href="#17143-낚시왕" class="headerlink" title="17143. 낚시왕"></a>17143. 낚시왕</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt, t = <span class="number">0</span>, <span class="built_in">size</span> = <span class="number">2</span>;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line">S Shark,s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, dist;</span><br><span class="line">&#125;F;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;F&gt; Temp;</span><br><span class="line"><span class="built_in">queue</span>&lt;S&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(F a, F b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.dist &gt;= b.dist) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.dist == b.dist) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.y &gt;= b.y) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a.y == b.y) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a.x &gt; b.x) &#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		Q.push(Shark);</span><br><span class="line">		visit[Q.front().y][Q.front().x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = Q.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Q.front().x;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = Q.front().<span class="built_in">size</span>;</span><br><span class="line">			<span class="keyword">int</span> t = Q.front().t;</span><br><span class="line">			<span class="keyword">int</span> cnt = Q.front().cnt;</span><br><span class="line"></span><br><span class="line">			Q.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; N || ny &lt;<span class="number">1</span> || nx&gt;N || nx &lt; <span class="number">1</span> || <span class="built_in">map</span>[ny][nx] &gt; Shark.<span class="built_in">size</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">				visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">				s.y = ny; s.x = nx, s.cnt = cnt; s.t = t + <span class="number">1</span>;</span><br><span class="line">				Q.push(s);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (Shark.<span class="built_in">size</span> &gt; <span class="built_in">map</span>[ny][nx] &amp;&amp; <span class="built_in">map</span>[ny][nx] != <span class="number">0</span>)</span><br><span class="line">					Temp.push_back(&#123; ny,nx,s.t&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[<span class="number">0</span>].y][Temp[<span class="number">0</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[<span class="number">0</span>].y;</span><br><span class="line">			Shark.x = Temp[<span class="number">0</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[<span class="number">0</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Temp.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			sort(Temp.<span class="built_in">begin</span>(), Temp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> temp_size = Temp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[temp_size - <span class="number">1</span>].y][Temp[temp_size - <span class="number">1</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[temp_size - <span class="number">1</span>].y;</span><br><span class="line">			Shark.x = Temp[temp_size - <span class="number">1</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[temp_size - <span class="number">1</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">		Temp.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123;</span><br><span class="line">				Shark.y = i;</span><br><span class="line">				Shark.x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Shark.t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17144. 미세먼지 안녕!</title>
    <url>/2020/04/24/%5BBOJ%5D%2017144.%20%EB%AF%B8%EC%84%B8%EB%A8%BC%EC%A7%80%20%EC%95%88%EB%85%95!/</url>
    <content><![CDATA[<h3 id="17144-미세먼지-안녕"><a href="#17144-미세먼지-안녕" class="headerlink" title="17144. 미세먼지 안녕!"></a>17144. 미세먼지 안녕!</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17144" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX], R, C, T;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">d</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt;</span><br><span class="line">&#125;d;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;d&gt; Dust;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		time++;</span><br><span class="line">		<span class="keyword">if</span> (time &gt; T)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//미세먼지확산</span></span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = Dust.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//큐에들어있는만큼 미세먼지 확산</span></span><br><span class="line">			<span class="comment">//이제 큐에서 꺼내서 확산시켜야지</span></span><br><span class="line">			<span class="keyword">int</span> y = Dust.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Dust.front().x;</span><br><span class="line">			<span class="keyword">int</span> cnt = Dust.front().cnt;</span><br><span class="line">			<span class="comment">//if (map[y][x] &lt; 5) continue;</span></span><br><span class="line">			Dust.pop();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">// 얘는 몇방향으로 움직이는지 체크해주기 위함임.</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[a];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[a];</span><br><span class="line"></span><br><span class="line">				<span class="comment">//여기서는 맵밖이 아니고 공기청정기 좌표가 아니면 무조건 확산.</span></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; R || ny &lt; <span class="number">1</span> || nx &gt; C || nx &lt; <span class="number">1</span> || (ny == v[<span class="number">0</span>].first &amp;&amp; nx == v[<span class="number">0</span>].second) || (ny == v[<span class="number">1</span>].first &amp;&amp; nx == v[<span class="number">1</span>].second)) <span class="keyword">continue</span>;</span><br><span class="line">				temp++; <span class="comment">//몇방향이나 빠지는지</span></span><br><span class="line">				<span class="built_in">map</span>[ny][nx] += (cnt / <span class="number">5</span>); <span class="comment">// 값더해주기</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x]&gt;=<span class="number">5</span>) &#123;</span><br><span class="line">				<span class="built_in">map</span>[y][x] -= ((cnt / <span class="number">5</span>) * temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//공기청정기작동</span></span><br><span class="line">		<span class="comment">//윗무빙</span></span><br><span class="line">		<span class="comment">//윗무빙은 어떻게하느냐,  1. 1부터 v[0]y-1까지 한칸 이동  2. C부터 2까지 한칸이동 3. v[0]y부터 2까지 이동 4. v[0]x+1부터 C-1까지 이동</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v[<span class="number">0</span>].first<span class="number">-1</span>; i &gt; <span class="number">1</span>; i--) &#123;<span class="comment">// 1번</span></span><br><span class="line">			<span class="built_in">map</span>[i][v[<span class="number">0</span>].second] = <span class="built_in">map</span>[i - <span class="number">1</span>][v[<span class="number">0</span>].second];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;<span class="comment">//2번</span></span><br><span class="line">			<span class="built_in">map</span>[<span class="number">1</span>][i] = <span class="built_in">map</span>[<span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v[<span class="number">0</span>].first; i++) &#123;<span class="comment">//3번</span></span><br><span class="line">			<span class="built_in">map</span>[i][C] = <span class="built_in">map</span>[i + <span class="number">1</span>][C];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = C; i &gt; v[<span class="number">0</span>].second + <span class="number">1</span>; i--) &#123;<span class="comment">//4번</span></span><br><span class="line">			<span class="built_in">map</span>[v[<span class="number">0</span>].first][i] = <span class="built_in">map</span>[v[<span class="number">0</span>].first][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//아랫무빙</span></span><br><span class="line">		<span class="comment">//아랫무빙은 어떻게하느냐,  1.v[1]y+1부터 R-1까지 2. 2부터 C까지 3. y[1]y부터 R-1까지 4. v[1]x+1부터 C-1까지</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v[<span class="number">1</span>].first + <span class="number">1</span>; i &lt; R; i++) &#123;<span class="comment">// 1번</span></span><br><span class="line">			<span class="built_in">map</span>[i][v[<span class="number">1</span>].second] = <span class="built_in">map</span>[i + <span class="number">1</span>][v[<span class="number">1</span>].second];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;<span class="comment">//2번</span></span><br><span class="line">			<span class="built_in">map</span>[R][i] = <span class="built_in">map</span>[R][i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = R; i &gt; v[<span class="number">1</span>].first; i--) &#123;<span class="comment">//3번</span></span><br><span class="line">			<span class="built_in">map</span>[i][C] = <span class="built_in">map</span>[i - <span class="number">1</span>][C];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = C; i &gt; v[<span class="number">1</span>].second + <span class="number">1</span>; i--) &#123;<span class="comment">//4번</span></span><br><span class="line">			<span class="built_in">map</span>[v[<span class="number">1</span>].first][i] = <span class="built_in">map</span>[v[<span class="number">1</span>].first][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>[v[<span class="number">0</span>].first][v[<span class="number">0</span>].second + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">map</span>[v[<span class="number">1</span>].first][v[<span class="number">1</span>].second + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//다시 미세먼지 위치를 큐에 넣어준다.</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; "##############################" &lt;&lt; endl;</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">					Dust.push(&#123; i,j,<span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">	<span class="comment">//			cout &lt;&lt; map[i][j] &lt;&lt; " ";</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="comment">//	cout &lt;&lt; endl;</span></span><br><span class="line">		&#125;</span><br><span class="line">	<span class="comment">//	cout &lt;&lt; "#############################" &lt;&lt; endl;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; R &gt;&gt; C &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">-1</span>) &#123;</span><br><span class="line">				v.push_back(make_pair(i, j));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">				Dust.push(&#123; i,j,<span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">				num += <span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16236. 아기 상어</title>
    <url>/2020/04/23/%5BBOJ%5D%2016236.%20%EC%95%84%EA%B8%B0%20%EC%83%81%EC%96%B4/</url>
    <content><![CDATA[<h3 id="16236-아기-상어"><a href="#16236-아기-상어" class="headerlink" title="16236. 아기 상어"></a>16236. 아기 상어</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt, t = <span class="number">0</span>, <span class="built_in">size</span> = <span class="number">2</span>;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line">S Shark,s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, dist;</span><br><span class="line">&#125;F;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;F&gt; Temp;</span><br><span class="line"><span class="built_in">queue</span>&lt;S&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(F a, F b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.dist &gt;= b.dist) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.dist == b.dist) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.y &gt;= b.y) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a.y == b.y) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a.x &gt; b.x) &#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		Q.push(Shark);</span><br><span class="line">		visit[Q.front().y][Q.front().x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = Q.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Q.front().x;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = Q.front().<span class="built_in">size</span>;</span><br><span class="line">			<span class="keyword">int</span> t = Q.front().t;</span><br><span class="line">			<span class="keyword">int</span> cnt = Q.front().cnt;</span><br><span class="line"></span><br><span class="line">			Q.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; N || ny &lt;<span class="number">1</span> || nx&gt;N || nx &lt; <span class="number">1</span> || <span class="built_in">map</span>[ny][nx] &gt; Shark.<span class="built_in">size</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">				visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">				s.y = ny; s.x = nx, s.cnt = cnt; s.t = t + <span class="number">1</span>;</span><br><span class="line">				Q.push(s);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (Shark.<span class="built_in">size</span> &gt; <span class="built_in">map</span>[ny][nx] &amp;&amp; <span class="built_in">map</span>[ny][nx] != <span class="number">0</span>)</span><br><span class="line">					Temp.push_back(&#123; ny,nx,s.t&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[<span class="number">0</span>].y][Temp[<span class="number">0</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[<span class="number">0</span>].y;</span><br><span class="line">			Shark.x = Temp[<span class="number">0</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[<span class="number">0</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Temp.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			sort(Temp.<span class="built_in">begin</span>(), Temp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> temp_size = Temp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[temp_size - <span class="number">1</span>].y][Temp[temp_size - <span class="number">1</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[temp_size - <span class="number">1</span>].y;</span><br><span class="line">			Shark.x = Temp[temp_size - <span class="number">1</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[temp_size - <span class="number">1</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">		Temp.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123;</span><br><span class="line">				Shark.y = i;</span><br><span class="line">				Shark.x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Shark.t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16235. 나무 재테크</title>
    <url>/2020/04/22/%5BBOJ%5D%2016235.%20%EB%82%98%EB%AC%B4%20%EC%9E%AC%ED%85%8C%ED%81%AC/</url>
    <content><![CDATA[<h3 id="16235-나무-재테크"><a href="#16235-나무-재테크" class="headerlink" title="16235. 나무 재테크"></a>16235. 나무 재테크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16235" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">N, M, K = map(int, input().split())</span><br><span class="line">add = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">Map = [[<span class="number">5</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">tree = [[[] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, z = map(int, input().split())</span><br><span class="line">    tree[y<span class="number">-1</span>][x<span class="number">-1</span>].append(z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    <span class="comment"># S/S</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> tree[i][j]:</span><br><span class="line">                temp, t = [], len(tree[i][j])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(t):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] &gt;= tree[i][j][<span class="number">-1</span>-k]:</span><br><span class="line">                        Map[i][j] -= tree[i][j][<span class="number">-1</span>-k]</span><br><span class="line">                        temp.append(tree[i][j][<span class="number">-1</span>-k] + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        t = k</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(tree[i][j]) - t):</span><br><span class="line">                    Map[i][j] += (tree[i][j][k] // <span class="number">2</span>)</span><br><span class="line">                tree[i][j] = temp[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># F</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> tree[i][j]:</span><br><span class="line">                <span class="keyword">for</span> age <span class="keyword">in</span> tree[i][j]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> age % <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                            ny = i + dy[k]</span><br><span class="line">                            nx = j + dx[k]</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">                                temp.append((ny, nx))</span><br><span class="line">    <span class="keyword">for</span> y, x <span class="keyword">in</span> temp:</span><br><span class="line">        tree[y][x].append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># W</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            Map[i][j] += add[i][j]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        res += len(tree[i][j])</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, Yang[MAX][MAX], addYang[MAX][MAX], cnt;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, age;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line">T tree;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">springsummer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line">		Q.pop();</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">		<span class="keyword">int</span> die = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tree_cnt = <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">		sort(<span class="built_in">map</span>[y][x].<span class="built_in">begin</span>(), <span class="built_in">map</span>[y][x].<span class="built_in">end</span>());</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree_cnt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x][i] &lt;= Yang[y][x]) &#123;</span><br><span class="line">				Yang[y][x] -= <span class="built_in">map</span>[y][x][i];</span><br><span class="line">				temp.push_back(++<span class="built_in">map</span>[y][x][i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				die += <span class="built_in">map</span>[y][x][i] / <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>[y][x].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="built_in">map</span>[y][x].push_back(temp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">map</span>[y][x].<span class="built_in">size</span>()!=<span class="number">0</span>)</span><br><span class="line">			Q.push(make_pair(y, x));</span><br><span class="line">		Yang[y][x] += die;</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">	q = Q;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = q.front().second;</span><br><span class="line">		q.pop();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x][i] % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">8</span>; a++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[a];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[a];</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">if</span> (ny &lt; <span class="number">1</span> || ny &gt; N || nx &lt; <span class="number">1</span> || nx &gt; N) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">map</span>[ny][nx].<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">					Q.push(make_pair(ny, nx));</span><br><span class="line">				<span class="built_in">map</span>[ny][nx].push_back(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			Yang[i][j] += addYang[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (year &lt; K) &#123;</span><br><span class="line">		springsummer();</span><br><span class="line">		fall();</span><br><span class="line">		winter();</span><br><span class="line">		year++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line">		Q.pop();</span><br><span class="line"></span><br><span class="line">		cnt += <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; addYang[i][j];</span><br><span class="line">			Yang[i][j] = <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y, x, age;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; y &gt;&gt; x &gt;&gt; age;</span><br><span class="line">		tree.y = y; tree.x = x; tree.age = age;</span><br><span class="line">		<span class="built_in">map</span>[y][x].push_back(age);</span><br><span class="line">		Q.push(make_pair(y, x));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	solve();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16234. 인구 이동</title>
    <url>/2020/04/21/%5BBOJ%5D%2016234.%20%EC%9D%B8%EA%B5%AC%20%EC%9D%B4%EB%8F%99/</url>
    <content><![CDATA[<h3 id="16234-인구-이동"><a href="#16234-인구-이동" class="headerlink" title="16234. 인구 이동"></a>16234. 인구 이동</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16234" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L, R = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    Q = []</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    Union = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[i][j]:</span><br><span class="line">                visit[i][j] = <span class="number">1</span></span><br><span class="line">                Q.append((i, j))</span><br><span class="line">            <span class="keyword">while</span> Q:</span><br><span class="line">                y, x = Q.pop()</span><br><span class="line">                temp.append((y, x))</span><br><span class="line">                <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">                    ny = y + a</span><br><span class="line">                    nx = x + b</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                        <span class="keyword">if</span> L &lt;= abs(Map[y][x] - Map[ny][nx]) &lt;= R:</span><br><span class="line">                            visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                            Q.append((ny, nx))</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span>:</span><br><span class="line">                Union.append(temp)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Union:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> lis <span class="keyword">in</span> Union:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> y, x <span class="keyword">in</span> lis:</span><br><span class="line">                temp += Map[y][x]</span><br><span class="line">            temp //= len(lis)</span><br><span class="line">            <span class="keyword">for</span> y, x <span class="keyword">in</span> lis:</span><br><span class="line">                Map[y][x] = temp</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, L, R, <span class="built_in">map</span>[MAX][MAX], MOVE = <span class="number">0</span>, People = <span class="number">0</span>, Nation = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> visit2[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> now_y = i;</span><br><span class="line">	<span class="keyword">int</span> now_x = j;</span><br><span class="line">	visit2[i][j] = <span class="number">1</span>;</span><br><span class="line">	People += <span class="built_in">map</span>[i][j];</span><br><span class="line">	Nation += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = now_y + dy[a];</span><br><span class="line">		<span class="keyword">int</span> x = now_x + dx[a];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">0</span> &lt; y &amp;&amp; y &lt;= N &amp;&amp; <span class="number">0</span> &lt; x &amp;&amp; x &lt;= N &amp;&amp; visit2[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(<span class="built_in">map</span>[y][x] - <span class="built_in">map</span>[now_y][now_x]) &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[y][x] - <span class="built_in">map</span>[now_y][now_x]) &lt;= R)</span><br><span class="line">			&#123;</span><br><span class="line">				visit2[y][x] = <span class="number">1</span>;</span><br><span class="line">				v.push_back(make_pair(y, x));</span><br><span class="line">				dfs(y, x);</span><br><span class="line">				<span class="comment">//return;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; L &gt;&gt; R;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">stop</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (visit2[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (<span class="number">0</span> &lt; i + dy[k] &amp;&amp; i + dy[k] &lt;= N &amp;&amp; <span class="number">0</span> &lt; j + dx[k] &amp;&amp; j + dx[k] &lt;= N &amp;&amp; visit2[i + dy[k]][j + dx[k]] == <span class="number">0</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(<span class="built_in">map</span>[i][j] - <span class="built_in">map</span>[i + dy[k]][j + dx[k]]) &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[i][j] - <span class="built_in">map</span>[i + dy[k]][j + dx[k]]) &lt;= R)</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">stop</span> = <span class="number">1</span>;</span><br><span class="line">								v.push_back(make_pair(i, j));</span><br><span class="line">								dfs(i, j);</span><br><span class="line">								<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; v.<span class="built_in">size</span>(); z++)</span><br><span class="line">									<span class="built_in">map</span>[v[z].first][v[z].second] = (People / Nation);</span><br><span class="line">								v.<span class="built_in">clear</span>();</span><br><span class="line">								People = <span class="number">0</span>;</span><br><span class="line">								Nation = <span class="number">0</span>;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(visit2, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit2));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stop</span> == <span class="number">1</span>)</span><br><span class="line">			MOVE++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stop</span> == <span class="number">0</span> || MOVE == <span class="number">0</span>)</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; MOVE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15686. 치킨 배달</title>
    <url>/2020/04/20/%5BBOJ%5D%2015686.%20%EC%B9%98%ED%82%A8%20%EB%B0%B0%EB%8B%AC/</url>
    <content><![CDATA[<h3 id="15686-치킨-배달"><a href="#15686-치킨-배달" class="headerlink" title="15686. 치킨 배달"></a>15686. 치킨 배달</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">home, chicken, res = [], [], float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">1</span>:</span><br><span class="line">            home.append((i, j))</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            chicken.append((i, j))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 치킨집 중 M개를 뽑는다.</span></span><br><span class="line"><span class="keyword">for</span> comb <span class="keyword">in</span> combinations(chicken, M):</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 각각의 집에서</span></span><br><span class="line">    <span class="keyword">for</span> hy, hx <span class="keyword">in</span> home:</span><br><span class="line">        temp = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="comment"># 가장 가까운 치킨집을 찾는다.</span></span><br><span class="line">        <span class="keyword">for</span> cy, cx <span class="keyword">in</span> comb:</span><br><span class="line">            t = abs(hy - cy) + abs(hx - cx)</span><br><span class="line">            temp = min(temp, t)</span><br><span class="line">        r += temp</span><br><span class="line">    res = min(r, res)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>], ans;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; h;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; c;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; comb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dist[<span class="number">1000</span>];</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h.<span class="built_in">size</span>(); i++)</span><br><span class="line">		dist[i] = <span class="number">987654321</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comb.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> d = <span class="built_in">abs</span>(comb[i].first - h[j].first) + <span class="built_in">abs</span>(comb[i].second - h[j].second);</span><br><span class="line">			<span class="keyword">if</span> (dist[j] &gt; d)</span><br><span class="line">				dist[j] = d;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">		a += dist[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans &gt; a)</span><br><span class="line">		ans = a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">		cal();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = a; k &lt; c.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">		comb.push_back(c[k]);</span><br><span class="line">		select(cnt + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">		comb.pop_back();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">1</span>)</span><br><span class="line">				h.push_back(make_pair(i, j));</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>)</span><br><span class="line">				c.push_back(make_pair(i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ans = <span class="number">987654321</span>;</span><br><span class="line">	select(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 5373. 큐빙</title>
    <url>/2020/04/19/%5BBOJ%5D%205373.%20%ED%81%90%EB%B9%99/</url>
    <content><![CDATA[<h3 id="5373-큐빙"><a href="#5373-큐빙" class="headerlink" title="5373. 큐빙"></a>5373. 큐빙</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/5373" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 바라보는 면 회전</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(cube, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="string">'+'</span>:</span><br><span class="line">        temp = deepcopy(cube)</span><br><span class="line">        cube[<span class="number">0</span>][<span class="number">0</span>], cube[<span class="number">0</span>][<span class="number">1</span>], cube[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">0</span>], temp[<span class="number">1</span>][<span class="number">0</span>], temp[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        cube[<span class="number">1</span>][<span class="number">0</span>], cube[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">1</span>], temp[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        cube[<span class="number">2</span>][<span class="number">0</span>], cube[<span class="number">2</span>][<span class="number">1</span>], cube[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">2</span>], temp[<span class="number">1</span>][<span class="number">2</span>], temp[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = deepcopy(cube)</span><br><span class="line">        cube[<span class="number">0</span>][<span class="number">0</span>], cube[<span class="number">0</span>][<span class="number">1</span>], cube[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">2</span>], temp[<span class="number">1</span>][<span class="number">2</span>], temp[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">        cube[<span class="number">1</span>][<span class="number">0</span>], cube[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">1</span>], temp[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        cube[<span class="number">2</span>][<span class="number">0</span>], cube[<span class="number">2</span>][<span class="number">1</span>], cube[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">0</span>], temp[<span class="number">1</span>][<span class="number">0</span>], temp[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">tc = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(tc):</span><br><span class="line">    n = int(input())</span><br><span class="line">    lis = list(input().split())</span><br><span class="line"></span><br><span class="line">    cube_u = [</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>],</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>],</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_d = [</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>],</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>],</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_f = [</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>],</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>],</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_b = [</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>],</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>],</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_l = [</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>],</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>],</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_r = [</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</span><br><span class="line">    ]</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 바라보는 면을 기준으로 상, 하, 좌, 우를 회전</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> d[<span class="number">0</span>] == <span class="string">'U'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = cube_f[<span class="number">0</span>][:]</span><br><span class="line">                cube_f[<span class="number">0</span>], cube_r[<span class="number">0</span>], cube_b[<span class="number">0</span>], cube_l[<span class="number">0</span>] = cube_r[<span class="number">0</span>][:], cube_b[<span class="number">0</span>][:], cube_l[<span class="number">0</span>][:], temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cube_f[<span class="number">0</span>][:]</span><br><span class="line">                cube_f[<span class="number">0</span>], cube_l[<span class="number">0</span>], cube_b[<span class="number">0</span>], cube_r[<span class="number">0</span>] = cube_l[<span class="number">0</span>][:], cube_b[<span class="number">0</span>][:], cube_r[<span class="number">0</span>][:], temp</span><br><span class="line">			<span class="comment"># 바라보는 면 회전 함수</span></span><br><span class="line">            rotate(cube_u, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'D'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = cube_f[<span class="number">2</span>][:]</span><br><span class="line">                cube_f[<span class="number">2</span>], cube_l[<span class="number">2</span>], cube_b[<span class="number">2</span>], cube_r[<span class="number">2</span>] = cube_l[<span class="number">2</span>][:], cube_b[<span class="number">2</span>][:], cube_r[<span class="number">2</span>][:], temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cube_f[<span class="number">2</span>][:]</span><br><span class="line">                cube_f[<span class="number">2</span>], cube_r[<span class="number">2</span>], cube_b[<span class="number">2</span>], cube_l[<span class="number">2</span>] = cube_r[<span class="number">2</span>][:], cube_b[<span class="number">2</span>][:], cube_l[<span class="number">2</span>][:], temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_d, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'F'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>] = cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>] = cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>] = cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>] = cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_f, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'B'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">0</span>][<span class="number">0</span>] = cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_r[<span class="number">0</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">2</span>][<span class="number">2</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">0</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_l[<span class="number">0</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">2</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">2</span>] = cube_r[<span class="number">2</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_r[<span class="number">2</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">0</span>][<span class="number">2</span>] = cube_u[<span class="number">0</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">0</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_b, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'L'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>] = cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>] = cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_l, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>] = cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>] = cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_r, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            res += cube_u[i][j]</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15685. 드래곤커브</title>
    <url>/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/</url>
    <content><![CDATA[<h3 id="15685-드래곤커브"><a href="#15685-드래곤커브" class="headerlink" title="15685. 드래곤커브"></a>15685. 드래곤커브</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ol><li>0 : 우 1: 상 2: 좌 3: 우</li><li>규칙을 찾는다.</li></ol><ul><li>ex) 시작점이 (0, 0) 이고 시작 방향이 0 일 경우</li></ul><p><code>0 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_0.JPG" class="" title="curve0"><p><code>1 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_1.JPG" class="" title="curve1"><p><code>2 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_2.JPG" class="" title="curve2"><p><code>3 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_3.JPG" class="" title="curve3"><ul><li>위 그림을 참고하면 <code>x + 1</code>세대의 방향은 <code>x</code>세대의 끝점부터 시작점까지 +1 씩 해준 방향과 동일함을 알 수 있다. 따라서 입력 받는 <code>g</code>세대까지 방향 list를 구현하고 <code>Map</code>에 값을 채워 나가며 드래곤 커브를 구현할 수 있다.</li></ul><ol start="3"><li>기준 좌표로부터 →, ↓, ↘ 방향을 체크하여 모두 지나간 지점이면 정사각형의 꼭지점이 모두 드래곤 커브의 일부임을 알 수 있다.</li></ol>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>] * <span class="number">101</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">101</span>)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</span><br><span class="line">    x, y, d, g = map(int, input().split())</span><br><span class="line">    curve = [d]</span><br><span class="line">    Map[y][x] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(g):</span><br><span class="line">        curve += [(i + <span class="number">1</span>) % <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> curve[::<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> curve:</span><br><span class="line">        y = y + dy[i]</span><br><span class="line">        x = x + dx[i]</span><br><span class="line">        Map[y][x] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">4</span>:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15684. 사다리조작</title>
    <url>/2020/04/17/%5BBOJ%5D%2015684.%20%EC%82%AC%EB%8B%A4%EB%A6%AC%EC%A1%B0%EC%9E%91/</url>
    <content><![CDATA[<h3 id="15684-사다리조작"><a href="#15684-사다리조작" class="headerlink" title="15684. 사다리조작"></a>15684. 사다리조작</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15684" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ol><li>H * N 크기의 사다리를 만든다.</li><li>입력된 좌표의 값을 1로 바꾼다(사다리 연결)</li><li>solve()를 통해서 재귀적으로 가능한 사다리를 만든다.<ul><li>이 때, 가로줄은 연속적으로 만들지 않아도 된다는 것을 유의한다.</li><li>현재 위치가 0이면(옆 사다리와 연결되어 있지 않다면) 1로 만들어주고 (사다리를 연결해주고) x 좌표를 +2 해주어 한칸을 건너 뛴다.</li><li>사다리를 생성할 때마다 do()를 통해서 사다리를 돌려본다.</li><li>사다리 개수가 3을 초과할 때, 사다리 조작에 실패했을 때 추가한 사다리 개수가 3이면 return을 해준다.</li></ul></li><li>do()를 통해 사다리를 탄다.<ul><li>현재 x 위치를 temp에 저장 후, y 가 사다리의 마지막에 도착했을 때 x 와 temp를 비교</li><li>현재 위치 값이 1 이라면 오른쪽으로 1칸 이동</li><li>현재 위치 값이 0 이라면 왼쪽을 탐색 후 왼쪽이 1일 경우 왼쪽으로 1칸 이동</li></ul></li></ol>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        temp = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> ladder[j][temp]:</span><br><span class="line">                temp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> temp &gt; <span class="number">0</span> <span class="keyword">and</span> ladder[j][temp<span class="number">-1</span>]:</span><br><span class="line">                temp -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i != temp:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, y, x)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> cnt &gt;= res:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> do():</span><br><span class="line">        res = min(res, cnt)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y, H):</span><br><span class="line">        temp = x <span class="keyword">if</span> i == y <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(temp, N<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ladder[i][j]:</span><br><span class="line">                ladder[i][j] = <span class="number">1</span></span><br><span class="line">                solve(cnt + <span class="number">1</span>, i, j + <span class="number">2</span>)</span><br><span class="line">                ladder[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">N, M, H = map(int, input().split())</span><br><span class="line">ladder = [[<span class="number">0</span>] * (N) <span class="keyword">for</span> _ <span class="keyword">in</span> range(H)]</span><br><span class="line">res = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    ladder[a<span class="number">-1</span>][b<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">solve(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">print(res <span class="keyword">if</span> res &lt; <span class="number">4</span> <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 기본 - Tree (1)</title>
    <url>/2020/04/16/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EA%B8%B0%EB%B3%B8%20-%20Tree%20(1)/</url>
    <content><![CDATA[<h3 id="5174-subtree-5178-노드의-합"><a href="#5174-subtree-5178-노드의-합" class="headerlink" title="5174. subtree  / 5178. 노드의 합"></a>5174. subtree  / 5178. 노드의 합</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDN86AAXw5UW6&subjectId=AWOVJ-_6qfsDFAWg" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

<h3 id="subtree"><a href="#subtree" class="headerlink" title="- subtree"></a>- subtree</h3></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtree</span><span class="params">(s, cnt)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lis), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] == s <span class="keyword">and</span> <span class="keyword">not</span> visit[i]:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            subtree(lis[i+<span class="number">1</span>], cnt + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(T):</span><br><span class="line">    r, s = map(int, input().split())</span><br><span class="line">    lis = list(map(int, input().split()))</span><br><span class="line">    visit = [<span class="number">0</span>] * len(lis)</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lis), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] == s:</span><br><span class="line">            visit[i] = <span class="literal">True</span></span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            subtree(lis[i+<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">            visit[i] = <span class="literal">False</span></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="노드의-합"><a href="#노드의-합" class="headerlink" title="- 노드의 합"></a>- 노드의 합</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(T):</span><br><span class="line">    N, M, L = map(int, input().split())</span><br><span class="line">    lis = [<span class="number">0</span>] * (N+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(M):</span><br><span class="line">        a, b = map(int, input().split())</span><br><span class="line">        lis[a] = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        lis[N//<span class="number">2</span>] = lis[N]</span><br><span class="line">        N -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> N &gt; <span class="number">1</span>:</span><br><span class="line">        lis[N//<span class="number">2</span>] = lis[N] + lis[N<span class="number">-1</span>]</span><br><span class="line">        N -= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;lis[L]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>SWEA</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15683. 감시</title>
    <url>/2020/04/15/%5BBOJ%5D%2015683.%20%EA%B0%90%EC%8B%9C/</url>
    <content><![CDATA[<h3 id="15683-감시"><a href="#15683-감시" class="headerlink" title="15683. 감시"></a>15683. 감시</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>예전 c++로 풀 때는 하나하나 다 구현하였는데, python을 배우면서 쉽게 접근이 가능했다.</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 상 하 좌 우</span></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(idx, m)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> idx == len(cctv):</span><br><span class="line">        <span class="comment"># 행마다 0인 값을 카운트</span></span><br><span class="line">        temp = sum([i.count(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> m])</span><br><span class="line">        cnt = min(cnt, temp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    y, x, n = cctv[idx]</span><br><span class="line">    <span class="comment"># cctv의 번호에 맞게 방향을 꺼내준다.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> di[n]:</span><br><span class="line">        cpMap = copy.deepcopy(m)</span><br><span class="line">        <span class="comment"># 방향 설정</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">            ny, nx = y, x</span><br><span class="line">            <span class="keyword">while</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="comment"># 벽이면</span></span><br><span class="line">                <span class="keyword">if</span> cpMap[ny][nx] == <span class="number">6</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 감시</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cpMap[ny][nx] = <span class="number">7</span></span><br><span class="line">                ny += dy[i]</span><br><span class="line">                nx += dx[i]</span><br><span class="line">        <span class="comment"># 재귀를 통한 반복</span></span><br><span class="line">        dfs(idx + <span class="number">1</span>, cpMap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</span><br><span class="line">cctv = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">            cctv.append((i,j,Map[i][j]))</span><br><span class="line"><span class="comment"># cctv의 번호에 따라 바라볼 수 있는 방향을 다 넣어둠</span></span><br><span class="line">di = [<span class="number">0</span>,[[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]]</span><br><span class="line"></span><br><span class="line">cnt = float(<span class="string">'inf'</span>)</span><br><span class="line">dfs(<span class="number">0</span>, Map)</span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

<h4 id="C-예전-풀이"><a href="#C-예전-풀이" class="headerlink" title="C++ (예전 풀이)"></a>C++ (예전 풀이)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 987654321</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, Map[<span class="number">9</span>][<span class="number">9</span>], ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; cctv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> dir, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">// 0 : 북 , 1: 동 , 2 : 남 , 3 : 서</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;<span class="comment">//위쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">0</span>)</span><br><span class="line">				Map[i][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;<span class="comment">//오른쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = y + <span class="number">1</span>; i &lt; M; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">0</span>)</span><br><span class="line">				Map[x][i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;<span class="comment">//아래쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">0</span>)</span><br><span class="line">				Map[i][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;<span class="comment">//왼쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = y - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">0</span>)</span><br><span class="line">				Map[x][i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (check == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (Map[i][j] == <span class="number">0</span>)</span><br><span class="line">					cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ans = <span class="built_in">min</span>(ans, cnt);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> x = cctv[check].first;</span><br><span class="line">	<span class="keyword">int</span> y = cctv[check].second;</span><br><span class="line">	<span class="keyword">int</span> cpMap[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">			cpMap[i][j] = Map[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">2</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see(dir + <span class="number">2</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see((dir + <span class="number">1</span>)%<span class="number">4</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see((dir + <span class="number">1</span>) % <span class="number">4</span>, x, y);</span><br><span class="line">			see((dir + <span class="number">2</span>) % <span class="number">4</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">5</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++)</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">		dfs(check + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Map[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (Map[i][j] &gt; <span class="number">0</span> &amp;&amp; Map[i][j] &lt; <span class="number">6</span>)</span><br><span class="line">				cctv.push_back(make_pair(i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = MAX;</span><br><span class="line">	dfs(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14891. 톱니바퀴</title>
    <url>/2020/03/24/%5BBOJ%5D%2014891.%20%ED%86%B1%EB%8B%88%EB%B0%94%ED%80%B4/</url>
    <content><![CDATA[<h3 id="14891-톱니바퀴"><a href="#14891-톱니바퀴" class="headerlink" title="14891. 톱니바퀴"></a>14891. 톱니바퀴</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14891" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotation</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">        temp = gear[n].pop()</span><br><span class="line">        gear[n].insert(<span class="number">0</span>, temp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = gear[n].pop(<span class="number">0</span>)</span><br><span class="line">        gear[n].append(temp)</span><br><span class="line">gear = [list(map(int, input())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">rotate, res = [], <span class="number">0</span></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(K):</span><br><span class="line">    rotate.append(list(map(int, input().split())))</span><br><span class="line"><span class="keyword">for</span> n, d <span class="keyword">in</span> rotate:</span><br><span class="line">    state = [(n <span class="number">-1</span>, d)]</span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">2</span>] != gear[i+<span class="number">1</span>][<span class="number">6</span>]:</span><br><span class="line">                state.append((i + <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">6</span>] != gear[i<span class="number">-1</span>][<span class="number">2</span>]:</span><br><span class="line">                state.append((i - <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> state:</span><br><span class="line">        rotation(a, b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> gear[i][<span class="number">0</span>]:</span><br><span class="line">        res += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14890. 경사로</title>
    <url>/2020/03/23/%5BBOJ%5D%2014890.%20%EA%B2%BD%EC%82%AC%EB%A1%9C/</url>
    <content><![CDATA[<h3 id="14890-경사로"><a href="#14890-경사로" class="headerlink" title="14890. 경사로"></a>14890. 경사로</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14890" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 가로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] == Map[i][idx]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[i][idx - <span class="number">1</span>] - Map[i][idx]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] &lt; Map[i][idx]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][idx] == Map[i][j]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 세로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] == Map[idx][i]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[idx - <span class="number">1</span>][i] - Map[idx][i]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] &lt; Map[idx][i]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[idx][i] == Map[j][i]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14889. 스타트와 링크</title>
    <url>/2020/03/21/%5BBOJ%5D%2014889.%20%EC%8A%A4%ED%83%80%ED%8A%B8%EC%99%80%20%EB%A7%81%ED%81%AC/</url>
    <content><![CDATA[<h3 id="14889-스타트와-링크"><a href="#14889-스타트와-링크" class="headerlink" title="14889. 스타트와 링크"></a>14889. 스타트와 링크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14889" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">comb = list(combinations(range(N), N//<span class="number">2</span>))</span><br><span class="line">count = len(list(combinations(range(N), N//<span class="number">2</span>)))//<span class="number">2</span></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(count):</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                a += Map[comb[l][i]][comb[l][j]] + Map[comb[l][j]][comb[l][i]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                b += Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]] + Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]]</span><br><span class="line">        res = min(res, abs(a-b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14888. 연산자 끼워넣기</title>
    <url>/2020/03/19/%5BBOJ%5D%2014888.%20%EC%97%B0%EC%82%B0%EC%9E%90%20%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14888-연산자-끼워넣기"><a href="#14888-연산자-끼워넣기" class="headerlink" title="14888. 연산자 끼워넣기"></a>14888. 연산자 끼워넣기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">numbers = list(map(int, input().split()))</span><br><span class="line">plus, minus, product, divide = map(int, input().split())</span><br><span class="line">max_n = <span class="number">-10e10</span></span><br><span class="line">min_n = <span class="number">10e10</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(plus, minus, product, divide, cnt, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cnt == N<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">global</span> max_n, min_n</span><br><span class="line">        max_n = max(number, max_n)</span><br><span class="line">        min_n = min(number, min_n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> plus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus - <span class="number">1</span>, minus, product, divide, cnt + <span class="number">1</span>, number + numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> minus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus - <span class="number">1</span>, product, divide, cnt + <span class="number">1</span>, number - numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> product &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product - <span class="number">1</span>, divide, cnt + <span class="number">1</span>, number * numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> divide &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product, divide - <span class="number">1</span>, cnt + <span class="number">1</span>, int(number / numbers[cnt+<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">calc(plus, minus, product, divide, <span class="number">0</span>, numbers[<span class="number">0</span>])</span><br><span class="line">print(max_n)</span><br><span class="line">print(min_n)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14499. 주사위 굴리기</title>
    <url>/2020/03/18/%5BBOJ%5D%2014499.%20%EC%A3%BC%EC%82%AC%EC%9C%84%20%EA%B5%B4%EB%A6%AC%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14499-주사위-굴리기"><a href="#14499-주사위-굴리기" class="headerlink" title="14499. 주사위 굴리기"></a>14499. 주사위 굴리기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>굴리는 것만 생각하면 된다. 방향은 틀어 지지 않는다.</p><p>그래서 상하좌우로 굴려질 때, 각 위치가 이동되어 지는 위치만을 고려하여 풀이하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">direction = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line">d = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">N, M, y, x, K = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">move = list(map(int, input().split()))</span><br><span class="line">dice, temp = [<span class="number">0</span>] * <span class="number">6</span>, [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> move:</span><br><span class="line">    y += d[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    x += d[i<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &gt; y <span class="keyword">or</span> y &gt;= N <span class="keyword">or</span> <span class="number">0</span> &gt; x <span class="keyword">or</span> x &gt;= M:</span><br><span class="line">        y -= d[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        x -= d[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    temp = dice[:]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        dice[j] = temp[direction[i<span class="number">-1</span>][j]<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = dice[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dice[<span class="number">5</span>], Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">    print(dice[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13458. 시험 감독</title>
    <url>/2020/03/18/%5BBOJ%5D%2013458.%20%EC%8B%9C%ED%97%98%20%EA%B0%90%EB%8F%85/</url>
    <content><![CDATA[<h3 id="13458-시험-감독"><a href="#13458-시험-감독" class="headerlink" title="13458. 시험 감독"></a>13458. 시험 감독</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13458" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">student = list(map(int, input().split()))</span><br><span class="line">B, C = map(int, input().split())</span><br><span class="line">cnt = N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> student:</span><br><span class="line">    a = i - B</span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (a % C) == <span class="number">0</span>:</span><br><span class="line">            cnt += a // C</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt += (a//C) + <span class="number">1</span></span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 3190. 뱀</title>
    <url>/2020/03/17/%5BBOJ%5D%203190.%20%EB%B1%80/</url>
    <content><![CDATA[<h3 id="3190-뱀"><a href="#3190-뱀" class="headerlink" title="3190. 뱀"></a>3190. 뱀</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/3190" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_check</span><span class="params">(d, str)</span>:</span> <span class="comment"># 방향을 돌려준다.</span></span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">'D'</span>:</span><br><span class="line">        d = (d + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> str == <span class="string">'L'</span>:</span><br><span class="line">        d = (d - <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(snake)</span>:</span> <span class="comment"># 방향따라 한칸씩 이동</span></span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">2</span>] == <span class="number">0</span>:</span><br><span class="line">        snake[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        snake[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">2</span>:</span><br><span class="line">        snake[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">3</span>:</span><br><span class="line">        snake[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> snake</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    snake = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]   <span class="comment"># 초기 뱀의 위치, 방향</span></span><br><span class="line">    route.append([<span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># 뱀이 움직이는 경로</span></span><br><span class="line">    Map[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    t_idx = end_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = move(snake) <span class="comment"># 뱀의 이동</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> s[<span class="number">1</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> N &lt; s[<span class="number">0</span>] <span class="keyword">or</span> N &lt; s[<span class="number">1</span>] <span class="keyword">or</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] == <span class="number">1</span>:</span><br><span class="line">            end_time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] != <span class="number">2</span>: <span class="comment"># 사과가 없으면</span></span><br><span class="line">            a, b = route.pop(<span class="number">0</span>) <span class="comment"># 꼬리 당기기</span></span><br><span class="line">            Map[a][b] = <span class="number">0</span></span><br><span class="line">        Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">        route.append([s[<span class="number">0</span>], s[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        snake = s[:] <span class="comment"># 이동한 위치를 다시 snake에 저장</span></span><br><span class="line"></span><br><span class="line">        end_time += <span class="number">1</span> <span class="comment"># 1초 증가</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t_idx != len(time):</span><br><span class="line">            <span class="keyword">if</span> end_time == int(time[t_idx][<span class="number">0</span>]): <span class="comment"># 이동 시간에 이동</span></span><br><span class="line">                snake[<span class="number">2</span>] = dir_check(snake[<span class="number">2</span>], time[t_idx][<span class="number">1</span>])</span><br><span class="line">                t_idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end_time</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>]*(N+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">time = []</span><br><span class="line">route = []</span><br><span class="line"></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    Map[a][b] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">L = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(L):</span><br><span class="line">    a, b = list(input().split())</span><br><span class="line">    time.append((a,b))</span><br><span class="line"></span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 12100. 2048 (Easy)</title>
    <url>/2020/03/17/%5BBOJ%5D%2012100.%202048%20(Easy)/</url>
    <content><![CDATA[<h3 id="12100-2048-Easy"><a href="#12100-2048-Easy" class="headerlink" title="12100. 2048 (Easy)"></a>12100. 2048 (Easy)</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작 전, 초기 맵의 MAX값을 res에 넣어 두고 시작한다.</p><p>product 내장 함수를 통해서 중복순열을 구현하여 시뮬레이션을 돌렸다.</p><p>같은 값을 더해주고 이동시키면서 한칸한칸 전진하려 했는데 헷갈려서</p><p>같은 값을 찾아서 모두 더해준 후 각 방향에 따라서 이동시켜 주는 식으로 풀이 하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(S, n)</span>:</span></span><br><span class="line">    temp = n</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> range(len(S)):</span><br><span class="line">        <span class="keyword">if</span> S[d] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]: <span class="keyword">continue</span></span><br><span class="line">                    cnt = <span class="number">1</span>; flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j + cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j + cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j + cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[j][i], Map[k][i] = Map[k][i], Map[j][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j - cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j - cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j - cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[k][i], Map[j][i] = Map[j][i], Map[k][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j + cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j + cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j + cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][j], Map[i][k] = Map[i][k], Map[i][j]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j - cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j - cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j - cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][k], Map[i][j] = Map[i][j], Map[i][k]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">cpMap = deepcopy(Map)</span><br><span class="line">lis = list(product(range(<span class="number">4</span>), repeat=<span class="number">5</span>))</span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    temp = max(temp, *Map[i])</span><br><span class="line">res = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)):</span><br><span class="line">    n = move(lis[i], res)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">    Map = deepcopy(cpMap)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13460. 구슬 탈출 2</title>
    <url>/2020/03/17/%5BBOJ%5D%2013460.%20%EA%B5%AC%EC%8A%AC%20%ED%83%88%EC%B6%9C%202/</url>
    <content><![CDATA[<h3 id="13460-구슬-탈출-2"><a href="#13460-구슬-탈출-2" class="headerlink" title="13460. 구슬 탈출 2"></a>13460. 구슬 탈출 2</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(dir, y, x, hy, hx)</span>:</span> <span class="comment"># 각 방향으로 이동하면서 홀에 빠지는지 체크</span></span><br><span class="line">    cnt = hole = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>: <span class="comment"># 상</span></span><br><span class="line">        <span class="keyword">while</span> Map[y - cnt - <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y - cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y -= cnt</span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>: <span class="comment"># 하</span></span><br><span class="line">        <span class="keyword">while</span> Map[y + cnt + <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y + cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y += cnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>: <span class="comment"># 좌</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x - cnt - <span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x - cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x -= cnt</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 우</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x + cnt +<span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x + cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x += cnt</span><br><span class="line">    <span class="keyword">return</span> hole, y, x, cnt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_rb</span><span class="params">(dir, ry, rx, by, bx, res)</span>:</span> <span class="comment"># 같은 자리니까 더 많이 움직인 쪽이 멀리 있으니까 한칸 덜 오도록</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ry, rx, by, bx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, d, ry, rx, by, bx, hy, hx)</span>:</span> <span class="comment"># red, blue, hole</span></span><br><span class="line">    dq = deque()</span><br><span class="line">    dq.append([cnt, d, ry, rx, by, bx, hy, hx])</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        cnt, d, ry, rx, by, bx, hy, hx = dq.popleft()</span><br><span class="line">        <span class="keyword">if</span> cnt &gt; <span class="number">9</span>:</span><br><span class="line">            result = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="comment"># 상하좌우 체크</span></span><br><span class="line">            <span class="keyword">if</span> cnt != <span class="number">0</span>: <span class="comment"># 처음에는 상하좌우 다 돌아야 되기 때문에 거를 필요 없음</span></span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">0</span> <span class="keyword">or</span> d == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> d == <span class="number">2</span> <span class="keyword">or</span> d == <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">or</span> i == <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            b_check, next_by, next_bx, b_cnt = move(i, by, bx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> b_check: <span class="comment"># 파란색 공이 빠졌으면 진행할 필요없이 다음으로</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            r_check, next_ry, next_rx, r_cnt = move(i, ry, rx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> r_check: <span class="comment"># 빨간색 공이 빠졌으면 끝</span></span><br><span class="line">                result = cnt + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> next_ry == next_by <span class="keyword">and</span> next_rx == next_bx: <span class="comment"># 옮겼을 때, 같은 위치면 이동</span></span><br><span class="line">                next_ry, next_rx, next_by, next_bx = compare_rb(i, next_ry, next_rx, next_by, next_bx, b_cnt &gt; r_cnt)</span><br><span class="line">            </span><br><span class="line">            dq.append([cnt + <span class="number">1</span>, i, next_ry, next_rx, next_by, next_bx, hy, hx])</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'B'</span>:</span><br><span class="line">            blue_y = i; blue_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'R'</span>:</span><br><span class="line">            red_y = i; red_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'O'</span>:</span><br><span class="line">            hole_y = i; hole_x = j</span><br><span class="line"></span><br><span class="line">print(solve(<span class="number">0</span>, <span class="literal">None</span>, red_y, red_x, blue_y, blue_x, hole_y, hole_x))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14502. 연구소</title>
    <url>/2020/03/16/%5BBOJ%5D%2014502.%20%EC%97%B0%EA%B5%AC%EC%86%8C/</url>
    <content><![CDATA[<h3 id="14502-연구소"><a href="#14502-연구소" class="headerlink" title="14502. 연구소"></a>14502. 연구소</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>바이러스 위치를 virus 리스트에 담고, 0의 위치를 comb 리스트를 담았다.</p><p>combinations 함수를 통해 comb 리스트안의 요소들로 조합을 만들어 bfs를 돌리며</p><p>안전영역의 최대값을 구했다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(visit)</span>:</span></span><br><span class="line">    cnt = len(comb) - <span class="number">3</span></span><br><span class="line">    q = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> virus:</span><br><span class="line">        q.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            ny = y + a</span><br><span class="line">            nx = x + b</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx] <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line">                    cnt -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cnt &lt;= res: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">virus = []</span><br><span class="line">comb = []</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            virus.append([i, j])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]:</span><br><span class="line">            comb.append([i, j])</span><br><span class="line">c = list(combinations(comb, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</span><br><span class="line">    visit = [[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        y, x = c[i][j][<span class="number">0</span>], c[i][j][<span class="number">1</span>]</span><br><span class="line">        visit[y][x] = <span class="number">1</span></span><br><span class="line">    n = bfs(visit)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14500. 테트로미노</title>
    <url>/2020/03/16/%5BBOJ%5D%2014500.%20%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8/</url>
    <content><![CDATA[<h3 id="14500-테트로미노"><a href="#14500-테트로미노" class="headerlink" title="14500. 테트로미노"></a>14500. 테트로미노</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>문제 그대로 구현했다. 블럭을 순서를 매기고 회전할 수 있는 방향을 하나하나 다 지정해주었다.</p><p>문제를 제대로 읽었어야 했다. 회전까지는 만들고 대칭을 안읽어서 헤맸었다.</p><p>회전과 대칭이 모두 가능하다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = map(int, input().split()) <span class="comment"># N * M</span></span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="comment"># 1번</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">3</span> &lt; M:</span><br><span class="line">            res.add(sum(Map[i][j:j+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">3</span> &lt; N:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, i + <span class="number">4</span>):</span><br><span class="line">                temp += Map[k][j]</span><br><span class="line">            res.add(temp)</span><br><span class="line">        <span class="comment"># 2번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># 3번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j<span class="number">-1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 4번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i + <span class="number">1</span>][j] + Map[i + <span class="number">1</span>][j - <span class="number">1</span>] + Map[i + <span class="number">2</span>][j - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 5번</span></span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i<span class="number">-1</span>][j] + Map[i][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">print(max(res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14503. 로봇 청소기</title>
    <url>/2020/03/16/%5BBOJ%5D%2014503.%20%EB%A1%9C%EB%B4%87%20%EC%B2%AD%EC%86%8C%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14503-로봇-청소기"><a href="#14503-로봇-청소기" class="headerlink" title="14503. 로봇 청소기"></a>14503. 로봇 청소기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작위치 ry, rx 와 방향 d를 받아서 풀이를 진행한다.</p><p>0 : 북, 1 : 동, 2 : 남, 3 : 서</p><p>방향이 지정되어 있고 문제의 조건에 현재 방향의 왼쪽부터 탐색한다고 되어 있으므로</p><p>탐색 방향을 dir + 3 - i 로 지정해 주었다.</p><p>다음 2 - c 조건에 의해서 4방향 다 청소가 되어 있는 경우</p><p>방향에 +2를 해주어 반대방향으로 설정해주고 다시 solve함수를 호출한다.</p><p>이 때, 2 - d의 조건인 반대방향이 벽이면 그대로 종료한다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(y, x, dir)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = <span class="number">2</span></span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a, b = d[(dir + <span class="number">3</span> - i) % <span class="number">4</span>]</span><br><span class="line">        ny = y + a</span><br><span class="line">        nx = x + b</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M <span class="keyword">and</span> <span class="keyword">not</span> Map[ny][nx]:</span><br><span class="line">            solve(ny,  nx, (dir + <span class="number">3</span> - i) % <span class="number">4</span>)</span><br><span class="line">    <span class="comment">#4방향 다 청소 되어 있는 경우</span></span><br><span class="line">    a, b = d[(dir+<span class="number">2</span>) % <span class="number">4</span>]</span><br><span class="line">    ny = y + a</span><br><span class="line">    nx = x + b</span><br><span class="line">    <span class="keyword">if</span> Map[ny][nx] == <span class="number">1</span>:</span><br><span class="line">        print(res); sys.exit(<span class="number">0</span>)</span><br><span class="line">    solve(ny, nx, dir)</span><br><span class="line"><span class="comment"># 0123 북동남서</span></span><br><span class="line">d = [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">-1</span>]]</span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">ry, rx, dir = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">solve(ry, rx, dir)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>첫 포스팅! 꾸준하자</title>
    <url>/2020/03/16/%5B1%5D%EC%B2%AB%20%ED%8F%AC%EC%8A%A4%ED%8C%85/</url>
    <content><![CDATA[<p>​           <a id="more"></a></p>
<div class="note warning">
            <ul><li>생각나는 것들 기록하기</li><li>하루 최소 1commit 하기</li><li>공부한 거 정리</li></ul>
          </div>

]]></content>
  </entry>
</search>
