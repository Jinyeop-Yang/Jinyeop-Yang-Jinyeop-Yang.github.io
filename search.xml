<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Python] n진수으로 나타내기</title>
    <url>/2021/04/13/%5BPython%5D%20n%EC%A7%84%EB%B2%95%EC%9C%BC%EB%A1%9C%20%EB%82%98%ED%83%80%EB%82%B4%EA%B8%B0/</url>
    <content><![CDATA[<div class="note info">
            <h4 id="n진수를-10진수로-나타내기-int-활용"><a href="#n진수를-10진수로-나타내기-int-활용" class="headerlink" title="n진수를 10진수로 나타내기 : int() 활용"></a>n진수를 10진수로 나타내기 : int() 활용</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3진수 1200을 10진수로 나타내는 방법</span></span><br><span class="line">print(int(<span class="string">'1200'</span>, base=<span class="number">3</span>)) <span class="comment"># 45</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자는 String형식, base는 n진수라는 것을 나타냄</span></span><br></pre></td></tr></table></figure>
          </div>

<a id="more"></a>

<h4 id="Python-n진수로-변환하는-방법"><a href="#Python-n진수로-변환하는-방법" class="headerlink" title="Python - n진수로 변환하는 방법"></a>Python - n진수로 변환하는 방법</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">NOTATIONS = string.digits + string.ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(number, base)</span>:</span></span><br><span class="line">    q, r = divmod(number, base) <span class="comment"># 몫, 나머지</span></span><br><span class="line">    n = NOTATIONS[r]</span><br><span class="line">    <span class="keyword">return</span> convert(q, base) + n <span class="keyword">if</span> q <span class="keyword">else</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2진수</span></span><br><span class="line">result = convert(<span class="number">18</span>, <span class="number">2</span>) <span class="comment"># 10010</span></span><br><span class="line"><span class="comment"># 4진수</span></span><br><span class="line">result1 = convert(<span class="number">18</span>, <span class="number">4</span>) <span class="comment"># 102</span></span><br><span class="line"><span class="comment"># 11진수</span></span><br><span class="line">result2 = convert(<span class="number">18</span>, <span class="number">11</span>) <span class="comment"># 17</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10진수로 변환</span></span><br><span class="line">print(int(str(result, <span class="number">2</span>))) <span class="comment"># 18</span></span><br><span class="line">print(int(str(result1, <span class="number">4</span>))) <span class="comment"># 18</span></span><br><span class="line">print(int(str(result2, <span class="number">11</span>))) <span class="comment"># 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 참고 - 2진수, 8진수, 16진수 표현 </span></span><br><span class="line">print(bin(<span class="number">10</span>), bin(<span class="number">10</span>)[<span class="number">2</span>:]) <span class="comment"># 0b1010, 1010</span></span><br><span class="line">print(oct(<span class="number">10</span>), oct(<span class="number">10</span>)[<span class="number">2</span>:]) <span class="comment"># 0o12, 12</span></span><br><span class="line">print(hex(<span class="number">10</span>), hex(<span class="number">10</span>)[<span class="number">2</span>:]) <span class="comment"># 0xa, a</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>radix</tag>
        <tag>int</tag>
      </tags>
  </entry>
  <entry>
    <title>[SW] 소프트웨어공학 요약</title>
    <url>/2021/04/08/%5BSW%5D%20%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EA%B3%B5%ED%95%99%20%EC%9A%94%EC%95%BD/</url>
    <content><![CDATA[<h3 id="소프트웨어-공학"><a href="#소프트웨어-공학" class="headerlink" title="소프트웨어 공학"></a>소프트웨어 공학</h3><a id="more"></a>

<h4 id="소프트웨어"><a href="#소프트웨어" class="headerlink" title="소프트웨어"></a>소프트웨어</h4><ul>
<li>하드웨어를 동작시켜 작업을 편리하게 수행하도록 하는 프로그램</li>
</ul>
<h4 id="시스템-구성-요소"><a href="#시스템-구성-요소" class="headerlink" title="시스템 구성 요소"></a>시스템 구성 요소</h4><ul>
<li>입력, 처리, 제어, 피드백으로 이루어짐</li>
</ul>
<h4 id="소프트웨어-위기"><a href="#소프트웨어-위기" class="headerlink" title="소프트웨어 위기"></a>소프트웨어 위기</h4><ul>
<li>소프트웨어 개발 속도가 하드웨어 개발 속도를 따라가지 못해 사용자의 요구사항을 처리할 수 없는 문제가 발생한 것을 의미</li>
<li>원인<ul>
<li>특성에 대한 이해 부족</li>
<li>관리 부재</li>
<li>프로그래밍만 치중</li>
<li>기술에 대한 교육 부족</li>
</ul>
</li>
<li>결과<ul>
<li>인력 부족, 인건비 상승</li>
<li>성능 및 신뢰성 부족</li>
<li>유지보수가 어렵고 이에 따른 비용 증가</li>
<li>생산성 저하, 소프트웨어의 품질 저하</li>
</ul>
</li>
</ul>
<h4 id="소프트웨어-공학의-개념"><a href="#소프트웨어-공학의-개념" class="headerlink" title="소프트웨어 공학의 개념"></a>소프트웨어 공학의 개념</h4><ul>
<li>소프트 웨어 위기를 극복하기 위한 방안으로 소프트웨어의 품질과 생산성 향상을 목적으로 함</li>
<li>IEEE 표중 용어 사전<ul>
<li>개발, 운용, 유지보수, 폐기 처분에 대한 체계적인 접근 방안</li>
</ul>
</li>
<li>Fairley<ul>
<li>한정된 비용과 기간 내에 소프트웨어를 생산하고 유지보수하는 데 관련된 기술적이고 관리적인 원리</li>
</ul>
</li>
<li>Boehm<ul>
<li>과학적 지식을 소프트웨어 설계와 제작이 응용한 것으로 개발, 운용, 유지보수하는 데 필요한 문서 작성 과정</li>
</ul>
</li>
</ul>
<h4 id="소프트웨어-공학의-기본-원칙"><a href="#소프트웨어-공학의-기본-원칙" class="headerlink" title="소프트웨어 공학의 기본 원칙"></a>소프트웨어 공학의 기본 원칙</h4><ul>
<li>프로그래밍 기술을 계속적으로 적용해야 한다.</li>
<li>품질이 유지되도록 지속적으로 검증해야 한다.</li>
<li>개발 관련 사항 및 결과에 대한 명확한 기록을 유지해야 한다.</li>
</ul>
<h4 id="일반적인-소프트웨어-생명-주기"><a href="#일반적인-소프트웨어-생명-주기" class="headerlink" title="일반적인 소프트웨어 생명 주기"></a>일반적인 소프트웨어 생명 주기</h4><ul>
<li>정의 단계<ul>
<li>무엇을 처리하는 소프트웨어를 개발할 것인지 정의하는 단계</li>
<li>타당선 검토, 개발 계획, 요구사항 분석 단계</li>
</ul>
</li>
<li>개발 단계<ul>
<li>‘어떻게’에 초점을 두고 실제적으로 소프트웨어를 개발하는 단계</li>
<li>설계, 구현, 테스트 단계</li>
</ul>
</li>
<li>유지보수 단계<ul>
<li>가장 많은 시간과 비용이 투입되는 단계로 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계</li>
</ul>
</li>
</ul>
<h4 id="소프트웨어-생명-주기-모형-폭포수-모형"><a href="#소프트웨어-생명-주기-모형-폭포수-모형" class="headerlink" title="소프트웨어 생명 주기 모형( 폭포수 모형 )"></a>소프트웨어 생명 주기 모형( 폭포수 모형 )</h4><ul>
<li>개발 각 단계를 확실히 매듭짓고 다음 단계로 넘어가는 방식이며 전 단계로 되돌아갈 수 없다. (선형 순차적)</li>
<li>공학에서 가장 오래되고 고전적인 생명 주기</li>
<li>단계별 정의가 분명하고 전체 공조의 이해가 용이함</li>
<li>단계별 산출물이 정확하여 개발 공정의 기준점을 잘 제시함</li>
<li>개발 순서<ul>
<li>타당성 검토 &gt; 계획 &gt; 요구 분석 &gt; 설계 &gt; 구현 &gt; 시험 &gt; 유지보수</li>
</ul>
</li>
</ul>
<h4 id="소프트웨어-생명-주기-모형-프로토타입-모형"><a href="#소프트웨어-생명-주기-모형-프로토타입-모형" class="headerlink" title="소프트웨어 생명 주기 모형( 프로토타입 모형 )"></a>소프트웨어 생명 주기 모형( 프로토타입 모형 )</h4><ul>
<li>사용자 요구사항을 정확히 파악하기 위해 견본품을 만들어 최종 결과들을 예측하는 모형</li>
<li>생명주기에서 유지보수 단계가 없어지고 개발 단계 안에서 유지보수가 이루어짐</li>
<li>개발 순서<ul>
<li>요구 수집 &gt; 빠른 설계 &gt; 프로토타입 구축 &gt; 고객 평가 &gt; 프로토타입 조정 &gt; 구현</li>
</ul>
</li>
</ul>
<h4 id="소프트웨어-생명-주기-모형-나선형-모형"><a href="#소프트웨어-생명-주기-모형-나선형-모형" class="headerlink" title="소프트웨어 생명 주기 모형( 나선형 모형 )"></a>소프트웨어 생명 주기 모형( 나선형 모형 )</h4><ul>
<li>Boehm이 제안한 것으로 폭포수와 프로토타입 모형의 장점에 위험 분석 기능을 추가한 모형</li>
<li>나선을 따라 돌 듯이 개발 과정을 거쳐 점진적으로 완벽한 최종 소프트웨어를 개발하는 것</li>
<li>개발에 발생할 수 있는 위험을 관리하고 최소화하는 것을 목적으로 둔다.</li>
<li>개발 순서<ul>
<li>계획 및 정의 &gt; 위험 분석 &gt; 공학적 개발 &gt; 고객 평가</li>
</ul>
</li>
</ul>
<h4 id="프로젝트-관리"><a href="#프로젝트-관리" class="headerlink" title="프로젝트 관리"></a>프로젝트 관리</h4><ul>
<li>주어진 기간 내 최소의 비용으로 사용자를 만족시키는 시스템을 개발하는 전반적인 활동</li>
<li>효과적인 프로젝트 관리를 위한 3대 요소<ul>
<li>사람, 문제, 프로세스</li>
</ul>
</li>
</ul>
<h4 id="프로젝트-비용-결정-요소"><a href="#프로젝트-비용-결정-요소" class="headerlink" title="프로젝트 비용 결정 요소"></a>프로젝트 비용 결정 요소</h4><ul>
<li>프로젝트 요소 : 제품의 복잡도, 시스템의 크기, 요구되는 신뢰도</li>
<li>자원 요소 : 인적 자원, 하드웨어 자원 소프트웨어 자원</li>
<li>생산성 요소 : 개발자의 능력, 경험, 주어진 개발 기간</li>
</ul>
<h4 id="비용-산정-기법-LOC-기법"><a href="#비용-산정-기법-LOC-기법" class="headerlink" title="비용 산정 기법(LOC 기법)"></a>비용 산정 기법(LOC 기법)</h4><ul>
<li>소프트웨어 각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법</li>
<li>예측치 = (a + 4m + b) / 6<ul>
<li>a = 낙관치, b = 비관치, m = 중간치(기대치)</li>
</ul>
</li>
<li>공식<ul>
<li>노력(인월)<ul>
<li>개발기간 x 투입 인원</li>
<li>LOC / 1인당 월평균 생산 코드라인 수</li>
</ul>
</li>
<li>개발 비용<ul>
<li>노력(인월) x 단위 비용 (1인당 월평균 인건비)</li>
</ul>
</li>
<li>개발 기간<ul>
<li>노력(인원) / 투입 인원</li>
</ul>
</li>
<li>생산성<ul>
<li>LOC / 노력(인월)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="비용-산정-기법-COCOMO"><a href="#비용-산정-기법-COCOMO" class="headerlink" title="비용 산정 기법(COCOMO)"></a>비용 산정 기법(COCOMO)</h4><ul>
<li>Boehm이 제안한 것으로 원시 프로그램의 규모에 의한 비용 산정 기법</li>
<li>개발 유형<ul>
<li>조작형<ul>
<li>중소규모의 소프트웨어로 일괄 자료 처리나 과학 기술 계산용 등 5만(50KDSI) 라인 이하의 소프트웨어를 개발하는 유형</li>
</ul>
</li>
<li>내장형<ul>
<li>초대형 규모 트랜잭션 처리 시스템이나 운영체제 등 30만(300KSDI) 라인 이상의 소프트웨어를 개발하는 유형</li>
</ul>
</li>
<li>반분리형<ul>
<li>조직형과 내장형의 중간형으로 트랜잭션 처리 시스템이나 운영체제등 30만(300KSDI) 라인 이하의 소프트웨어를 개발하는 유형</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="COCOMO-모형의-종류"><a href="#COCOMO-모형의-종류" class="headerlink" title="COCOMO 모형의 종류"></a>COCOMO 모형의 종류</h4><ul>
<li>기본형<ul>
<li>소프트웨어 크기와 개발 유형만을 이용하여 비용을 산정하는 모형</li>
</ul>
</li>
<li>중간형<ul>
<li>기본 공식을 토대로 사용하나 제품의 특성, 컴퓨터 특성, 개발 요원의 특성, 프로젝트 특성에 의해 비용을 산정하는 모형</li>
</ul>
</li>
<li>발전형<ul>
<li>중간형을 보완하여 만들어진 방법으로 개발 공정별로 보다 자세하고 정확하게 노력을 산출하여 비용을 산정하는 모형</li>
</ul>
</li>
</ul>
<h4 id="브록스의-법칙"><a href="#브록스의-법칙" class="headerlink" title="브록스의 법칙"></a>브록스의 법칙</h4><ul>
<li>프로젝트 진행중에 새로운 인력을 투입할 경우 적응 기간과 부작용으로 인해 일정을 더욱 지연시키고 프로젝트에 혼란을 가져오게 된다는 법칙</li>
</ul>
<h4 id="PERT-CPM"><a href="#PERT-CPM" class="headerlink" title="PERT / CPM"></a>PERT / CPM</h4><ul>
<li>프로젝트 지연을 방지하고 일정을 계획하는 것으로 자원의 제약하에 비용을 적게 사용하면서 최단시간 완성을 위한 프로젝트 일정 방법</li>
<li>개발 기간을 결정하는 임계 경로(CP)를 제공한다.</li>
<li>통계적 모델을 적용해서 개별 작업에 대한 가장 근접한 시간 측정의 기준이 된다.</li>
</ul>
<h4 id="PERT"><a href="#PERT" class="headerlink" title="PERT"></a>PERT</h4><ul>
<li>노드와 간선으로 구성되며 원 노드에는 작업을, 간선에는 낙관치 / 기대치 / 비관치를 표시</li>
<li>전체 작업의 상호 관계를 표시하는 네트워크로 단계별 종료 시기를 결정하는 방법</li>
</ul>
<h4 id="CPM"><a href="#CPM" class="headerlink" title="CPM"></a>CPM</h4><ul>
<li>프로젝트 완성에 필요한 작업을 나열하고 작업에 필요한 소유 기간을 예측하는데 사용하는 기법</li>
<li>노드와 간선으로 구성된 네트워크로 노드는 작업을, 간선은 작업 사이의 전후 의존 관계를 나타냄</li>
<li>원형 노드는 각 작업을 의미하며 각 작업의 이름과 소유기간을 표시하고 박스 노드는 이정표를 의미하며 박스 노드 위에는 예상 완료 시간을 표시함</li>
</ul>
<h4 id="간트-차트"><a href="#간트-차트" class="headerlink" title="간트 차트"></a>간트 차트</h4><ul>
<li>프로젝트의 각 작업들이 언제 시작하고 종료되었는지 막대 도표를 이용하여 표시하는 프로젝트 일정표로 시간선 차트라고도 한다.</li>
</ul>
<h4 id="프로젝트-팀-구성"><a href="#프로젝트-팀-구성" class="headerlink" title="프로젝트 팀 구성"></a>프로젝트 팀 구성</h4><ul>
<li>분산형 팀<ul>
<li>팀원 모두가 의사 결정에 참여하는 비이기적인 구성 방식</li>
<li>의사소통 경로의 수 = (n(n-1)) / 2       n : 팀원의 수</li>
</ul>
</li>
<li>중앙 집중형 팀<ul>
<li>한 관리자가 의사결정을 하고 구성원들은 그 결정을 따르는 구성 방식으로 책임 프로그래머 팀이라고도 함</li>
</ul>
</li>
<li>계층적 팀<ul>
<li>분산형 팀 구성과 중앙 집중형 팀 구성을 혼합한 형태</li>
<li>5 ~ 7명의 초보 프로그래머를 작은 그룹으로 만들어 각 그룹을 고급 프로그래머가 관리하게 함</li>
</ul>
</li>
</ul>
<h4 id="품질-표준"><a href="#품질-표준" class="headerlink" title="품질 표준"></a>품질 표준</h4><ul>
<li>명확하게 정의된 소프트웨어의 특성을 의미하며 품질을 평가하는 기준 항목</li>
<li>종류<ul>
<li>정확성, 신뢰성, 효율성, 무결성, 사용 용이성, 유지보수성, 유연성, 시험 역량, 이식성, 재사용성, 상호 운용성</li>
</ul>
</li>
</ul>
<h4 id="위험-관리"><a href="#위험-관리" class="headerlink" title="위험 관리"></a>위험 관리</h4><ul>
<li>프로젝트 개발 과정에서 각종 돌발 상황을 미리 예상하고 적절한 대책을 수립하는 일련의 활동</li>
</ul>
<h4 id="형상-관리-SCM"><a href="#형상-관리-SCM" class="headerlink" title="형상 관리 (SCM)"></a>형상 관리 (SCM)</h4><ul>
<li>개발 과정에서 소프트웨어의 생산물을 확인하고 소프트웨어 통제, 변경 상태를 기록하고 보관하는 일련의 관리 작업</li>
<li>소프트웨어 변경의 원인을 알아내고 제어하며 적절히 변경되었는지 확인하여 담당자에게 통보하는 작업</li>
<li>개발의 전 단계에 적용되는 활동으로 유지보수 단계에서 수행된다.</li>
<li>개발의 전체 비용을 줄이고 개발 과정의 문제점을 해결하여 방해 요인을 최소화하는 것을 목적으로 한다.</li>
</ul>
<h4 id="요구사항-분석의-어려움"><a href="#요구사항-분석의-어려움" class="headerlink" title="요구사항 분석의 어려움"></a>요구사항 분석의 어려움</h4><ul>
<li>사용자와 개발자의 지식 배경의 다양화, 용어 불일치 등으로 의사소통 곤란</li>
<li>난이도 증가에 의한 소프트웨어의 복잡화</li>
<li>사용자 생각의 부정확성, 생각의 반복된 변경</li>
<li>애매하거나 어렵거나등 요구 명세서 작성이 어려움</li>
</ul>
<h4 id="자료-흐름도-DFD"><a href="#자료-흐름도-DFD" class="headerlink" title="자료 흐름도 (DFD)"></a>자료 흐름도 (DFD)</h4><ul>
<li>요구사항 분석에서 자료의 흐름 및 변환 과정과 기능을 도형 중심으로 기술하는 방법으로 버블 차트라고도 함</li>
<li>자료 흐름과 처리를 중심으로 하는 구조적 분석 기법에 이용된다.</li>
<li>자료 흐름도는 자료 흐름과 기능을 자세히 표현하기 위해 단계적으로 세분화된다.</li>
<li>단계 0의 자료 흐름도를 배경도라 하는데 이 배경도를 통해 전체 시스템의 범위를 표현한다.</li>
<li>각 프로세스에 대해서 개발적인 상세화 및 계층화가 가능하다.</li>
</ul>
<h4 id="자료사전-DD"><a href="#자료사전-DD" class="headerlink" title="자료사전 (DD)"></a>자료사전 (DD)</h4><ul>
<li>자료 흐름도 상에 있는 자료를 더 자세히 정의하고 기록한 것</li>
<li>데이터를 설명하는 데이터를 데이터 또는 메타데이터라고 한다.</li>
<li>표기 기호<ul>
<li>= : 자료의 정의, + : 자료의 연결, () : 자료의 생략</li>
<li>| : 자료의 선택, {} : 자료의 반복, ** : 자료의 설명</li>
</ul>
</li>
</ul>
<h4 id="HIPO"><a href="#HIPO" class="headerlink" title="HIPO"></a>HIPO</h4><ul>
<li><p>시스템의 분석 및 설계나 문서화할 때, 사용되는 기법으로 입력, 처리, 출력의 기능을 나타낸다.</p>
</li>
<li><p>하향식 소프트웨어 개발을 위한 문서화 도구</p>
</li>
<li><p>체계적 문서 관리가 가능하고 기호, 도표 등을 사용하여 보기 쉽고 이해하기 쉬움</p>
</li>
<li><p>종류</p>
<ul>
<li>가시적 도표(도식 목차)<ul>
<li>시스템의 전체적인 기능과 흐름을 보여주는 계층 구조도</li>
</ul>
</li>
<li>총체적 도표(총괄 도표)<ul>
<li>프로그램을 구성하는 기능을 기술한 것으로 입력, 처리, 출력에 대한 전반적인 정보를 제공하는 도표</li>
</ul>
</li>
<li>세부적 도표(상세 도표)<ul>
<li>총체적 도표에 표시된 기능을 구성하는 기본 요소들을 상세히 기술한 도표</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="결합도-Coupling"><a href="#결합도-Coupling" class="headerlink" title="결합도(Coupling)"></a>결합도(Coupling)</h4><ul>
<li>모듈 간에 상호 의존도를 나타낸다.</li>
<li>독립적인 모듈이 되기 위해서는 모듈간의 결합도가 약해야 하며 의존하는 모듈이 적어야 함</li>
<li>종류<ul>
<li>자료 결합도 : 모듈 간의 인터페이스가 자료 요소로만 구성될 때의 결합도</li>
<li>스탬프 결합도 : 모듈 간의 인터페이스로 배열이나 레코드 등의 자료 구조가 전달될 때의 결합도</li>
<li>제어 결합도 : 어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호를 이용하여 통신하거나 제어요소를 전달하는 결합도</li>
<li>외부 결합도 : 어떤 모듈에서 외부로 선언한 데이터를 다른 모듈에서 참조할 때의 결합도</li>
<li>공통 결합도 : 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도</li>
<li>내용 결합도 : 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때의 결합도</li>
</ul>
</li>
</ul>
<h4 id="응집도-Cohesion"><a href="#응집도-Cohesion" class="headerlink" title="응집도(Cohesion)"></a>응집도(Cohesion)</h4><ul>
<li>정보 은닉 개념을 확장한 것으로 모듈이 독립적인 기능으로 정의되어 있는 정도를 나타냄</li>
<li>내부 요소에는 명령어, 명령어의 모임, 호출문 등이 있음</li>
<li>독립적인 모듈이 되기 위해서는 각 모듈의 응집도가 강해야 함</li>
<li>종류<ul>
<li>기능적 응집도 : 모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우의 응집도</li>
<li>순차적 응집도 : 모듈 내의 하나의 활동으로부터 나온 출력데이터를 다음 활동의 입력 데이터로 사용할 경우의 응집도</li>
<li>교환적 응집도 : 동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 구성 요소들이 모여있을 경우의 응집도</li>
<li>절차적 응집도 : 모듈이 다수의 관련 기능을 가질 때, 모듈 안의 구성요소들이 그 기능을 순차적으로 수행할 경우의 응집도</li>
<li>시간적 응집도 : 특정 시간에 처리되는 몇 개의 기능을 모아 하나의 모듈로 작성할 경우의 응집도</li>
<li>논리적 응집도 : 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우의 응집도</li>
<li>우연적 응집도 : 모듈 내부의 각 구성요소들이 서로 관련 없는 다른 기능을 수행하는 경우의 응집도</li>
</ul>
</li>
</ul>
<h4 id="효과적인-모듈화-설계-방안"><a href="#효과적인-모듈화-설계-방안" class="headerlink" title="효과적인 모듈화 설계 방안"></a>효과적인 모듈화 설계 방안</h4><ul>
<li>결합도를 줄이고 응집도는 높여서 모듈의 독립성을 높인다.</li>
<li>복잡도와 중복성을 줄이고 일관성을 유지시킨다.</li>
<li>유지보수가 용이해야 한다.</li>
<li>시스템의 전반적인 기능과 구조를 이해하기 쉬운 크기로 분해한다.</li>
<li>하나의 입구와 하나의 출구를 갖도록 한다.</li>
</ul>
<h4 id="Nassi-–-Shneiderman-Chart"><a href="#Nassi-–-Shneiderman-Chart" class="headerlink" title="Nassi – Shneiderman Chart"></a>Nassi – Shneiderman Chart</h4><ul>
<li>논리의 기술에 중점을 둔 도형을 이용한 표현 방법</li>
<li>순차 구조, 반복 구조, 선택 구조, 다중 선택 구조 등으로 표현</li>
<li>GOTO나 화살표를 사용하지 않으며, 선택과 반복 구조를 시각적으로 표현한다.</li>
<li>이해하기 쉽고, 코드 변환이 용이하다.</li>
<li>읽기는 쉽지만 작성하기 어렵고 임의로 제어를 전이하는 것이 불가능</li>
</ul>
<h4 id="구조적-프로그래밍"><a href="#구조적-프로그래밍" class="headerlink" title="구조적 프로그래밍"></a>구조적 프로그래밍</h4><ul>
<li>Dijkstra 에 의해 제안된 것으로 소프트웨어의 생산과 코딩의 표준화 등을 위해 개발된 방법이다.</li>
<li>제어 구조<ul>
<li>순차 : 명령을 순서적으로 나열</li>
<li>선택 : 특정 논리에 기초하여 명령을 선택</li>
<li>반복 : 순환 제공</li>
</ul>
</li>
</ul>
<h4 id="화이트-박스-테스트"><a href="#화이트-박스-테스트" class="headerlink" title="화이트 박스 테스트"></a>화이트 박스 테스트</h4><ul>
<li>모듈의 원시 코드를 오픈시킨 상태에서 원시 코드의 논리적인 모든 경로를 검사하여 검사 사례를 설계하는 방법</li>
<li>모듈 안의 작동을 직접 관찰할 수 있으며 원시 코드의 모든 문장을 한번 이상 수행함으로써 수행된다.</li>
<li>종류<ul>
<li>기초 경로 검사<ul>
<li>Tom McCabe가 제안한 것으로 대표적인 화이트박스 테스트 기법</li>
<li>검사 사례 설계자가 절차적 설계의 논리적 복잡성을 측정할 수 있게 해주고 측정 결과는 실행 경로의 기초를 정의하는 데 지침으로 사용됨</li>
</ul>
</li>
<li>조건 검사<ul>
<li>모듈 내에 있는 논리적 조건을 검사하는 검사 사례 설계 기법</li>
</ul>
</li>
<li>루프 검사<ul>
<li>반복 구조에 초점을 맞춰 실시하는 검사 사례 설계 기법</li>
</ul>
</li>
<li>데이터 흐름 검사<ul>
<li>프로그램에서 변수의 정의와 변수 사용의 위치에 초점을 맞춰 실시하는 검사 사례 설계 기법</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="제어-흐름도"><a href="#제어-흐름도" class="headerlink" title="제어 흐름도"></a>제어 흐름도</h4><ul>
<li>제어 흐름을 표현하기 위해 사용되는 그래프</li>
</ul>
<h4 id="순환-복잡도"><a href="#순환-복잡도" class="headerlink" title="순환 복잡도"></a>순환 복잡도</h4><ul>
<li>한 프로그램의 논리적인 복잡도를 측정하기 위한 소프트웨어의 척도로 제어 흐름도 이론에 기초를 둠</li>
<li>순환 복잡도 계산<ul>
<li>화살표 - 노드수 + 2</li>
</ul>
</li>
</ul>
<h4 id="블랙-박스-테스트"><a href="#블랙-박스-테스트" class="headerlink" title="블랙 박스 테스트"></a>블랙 박스 테스트</h4><ul>
<li>소프트웨어의 각 기능이 완전히 작동되는 것을 입증하는 검사로 기능검사라고도 한다.</li>
<li>종류<ul>
<li>동치 분할 검사<ul>
<li>입력 자료에 초점을 맞춰 검사 사례를 만들고 검사하는 방법</li>
</ul>
</li>
<li>경계값 분석<ul>
<li>동치 분할 기법을 보완한 기법으로 입력 조건의 중간값보다 경계값에서 오류가 발생될 확률이 높다는 점을 이용하여 입력 조건의 경계값을 검사 사례로 선정하여 검사하는 방법</li>
</ul>
</li>
<li>원인-효과 그래프 검사<ul>
<li>입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석하여 효용성 높은 검사 사례를 선정하여 검사하는 기법</li>
</ul>
</li>
<li>오류 예측 검사<ul>
<li>과거의 경험이나 확인자의 감각으로 검사하는 기법</li>
</ul>
</li>
<li>비교 검사<ul>
<li>여러 버전의 프로그램에 동일한 검사 자료를 제공하여 동일한 결과가 출력되는지 검사하는 기법</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="단위-검사"><a href="#단위-검사" class="headerlink" title="단위 검사"></a>단위 검사</h4><ul>
<li>코딩이 이루어진 후 최소 단위인 모듈에 초점을 맞추어 검사하는 것</li>
</ul>
<h4 id="하향식-통합-검사"><a href="#하향식-통합-검사" class="headerlink" title="하향식 통합 검사"></a>하향식 통합 검사</h4><ul>
<li>상위 모듈에서 하위 모듈 방향으로 통합하면서 검사하는 기법</li>
</ul>
<h4 id="상향식-통합-검사"><a href="#상향식-통합-검사" class="headerlink" title="상향식 통합 검사"></a>상향식 통합 검사</h4><ul>
<li>하위 모듈에서 상위 모듈 방향으로 통합하면서 검사하는 기법</li>
</ul>
<h4 id="검증-검사"><a href="#검증-검사" class="headerlink" title="검증 검사"></a>검증 검사</h4><ul>
<li>소프트웨어가 사용자의 요구사항을 충족시키는가에 중점을 두고 검사하는 기법</li>
<li>종류<ul>
<li>형상 검사<ul>
<li>소프트웨어 구성 요소, 목록, 유지보수를 지원하기 위해 필요한 모든 사항들이 제대로 표현되었는지를 검사하는 기법</li>
</ul>
</li>
<li>알파 검사<ul>
<li>개발자의 장소에서 사용자가 개발자 앞에서 행하는 검사 기법</li>
</ul>
</li>
<li>베타 검사<ul>
<li>선정된 최종 사용자가 여러 명의 사용자 앞에서 수행하는 검사 기법</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="시스템-검사"><a href="#시스템-검사" class="headerlink" title="시스템 검사"></a>시스템 검사</h4><ul>
<li>개발된 소프트웨어가 시스템에서 완벽하게 수행되는가를 검사하는 것</li>
<li>종류<ul>
<li>복구 검사, 보안 검사, 강도 검사, 성능 검사</li>
</ul>
</li>
</ul>
<h4 id="디버깅"><a href="#디버깅" class="headerlink" title="디버깅"></a>디버깅</h4><ul>
<li>검사 단계에서 검사 사례에 의해 오류를 찾은 후 그 오류를 수정하는 과정</li>
</ul>
<h4 id="객체지향-기법"><a href="#객체지향-기법" class="headerlink" title="객체지향 기법"></a>객체지향 기법</h4><ul>
<li>현실의 기계 부품처럼 하나의 객체로 만들어, 부품으로 기계를 조립하는 것처럼 객체를 조립해서 작성할 수 있도록 하는 기법</li>
<li>유지 보수가 쉬우며 재사용 및 확장이 용이해 소프트웨어를 빠르게 개발할 수 있다.</li>
<li>구성 요소<ul>
<li>객체<ul>
<li>데이터와 데이터를 처리하는 함수를 묶어 놓은 하나의 소프트웨어 모듈</li>
</ul>
</li>
<li>클래스<ul>
<li>공통된 속성과 연산을 갖는 객체의 집합으로 객체의 일반적인 타입을 의미</li>
</ul>
</li>
<li>메시지<ul>
<li>객체들 간의 상호작용을 하는데 사용되는 수단으로 객체에게 어떤 행위를 하도록 지시하는 명령</li>
</ul>
</li>
</ul>
</li>
<li>기본 원칙<ul>
<li>캡슐화<ul>
<li>데이터와 데이터를 처리하는 함수를 하나로 묶은 것</li>
<li>캡슐화된 객체의 세부내용이 외부에 은폐된다.</li>
<li>객체들의 재사용이 용이함</li>
<li>객체 간의 메세지를 주고받을 때 각 객체의 세부 내용은 알 필요가 없으므로 인터페이스가 단순해지고 객체 간의 결합도가 낮아진다.</li>
</ul>
</li>
<li>정보 은닉<ul>
<li>캡슐화에서 가장 중요한 개념으로, 다른 객체에 자신의 정보를 숨기고 연산만을 통하여 접근을 허용하는 것</li>
<li>유지보수와 소프트웨어 확장시 오류를 최소화</li>
</ul>
</li>
<li>추상화<ul>
<li>불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 모델화하는 것</li>
</ul>
</li>
<li>상속성<ul>
<li>이미 정의된 상위 클래스의 모든 속성과 연산을 하위 클래스가 물려받는 것</li>
</ul>
</li>
<li>다형성<ul>
<li>객체들은 동일한 메소드명을 사용하며 같은 의미의 응답을 한다.</li>
<li>응용 프로그램 상에서 하나의 함수나 연산자가 두 개 이상의 서로 다른 클래스의 인스턴스들을 같은 클래스에 속한 인스턴스처럼 수행할 수 있도록하는 것</li>
</ul>
</li>
</ul>
</li>
<li>분석 방법론<ul>
<li>Rumbaugh 방법<ul>
<li>일반적으로 사용되는 방법으로, 분석 활동을 객체 모델, 동적 모델, 기능 모델로 나누어 수행하는 방법</li>
</ul>
</li>
<li>Rumbaugh 분석 기법<ul>
<li>모든 소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 기법</li>
<li>분석 활동은 객체 모델링, 동적 모델링, 기능 모델링순으로 이루어 진다.</li>
</ul>
</li>
<li>Booch 방법<ul>
<li>미시적, 거시적 개발 프로세스를 모두 사용하는 분석 방법으로 클래스와 객체들을 분석 및 식별하고 클래스의 속성와 연산을 저으이</li>
</ul>
</li>
<li>Jacobson 방법<ul>
<li>Use Case를 강조하여 사용하는 분석 방법</li>
</ul>
</li>
<li>Coad와 Yourdon 방법<ul>
<li>E-R 다이어그램을 사용하여 객체의 행위를 모델링하며 연산과 메시지 연결 정의 등의 과정으로 구성하는 기법</li>
</ul>
</li>
<li>Wirfs-Brock 방법<ul>
<li>분석과 설계간의 구분이 없고 고객 명세서를 평가해서 설계 작업까지 연속적으로 수행하는 기법</li>
</ul>
</li>
</ul>
</li>
<li>설계 단계<ul>
<li>문제 정의 &gt; 요구 명세화 &gt; 객체연산자 정의 &gt; 객체 인터페이스 결정 &gt; 객체 구현</li>
</ul>
</li>
</ul>
<h4 id="소프트웨어의-재사용"><a href="#소프트웨어의-재사용" class="headerlink" title="소프트웨어의 재사용"></a>소프트웨어의 재사용</h4><ul>
<li>이미 개발된 소프트웨어의 전체 혹은 일부분을 다른 소프트웨어에 사용하는 것</li>
<li>개발의 품질과 생산성을 높이기 위한 방법</li>
</ul>
<h4 id="소프트웨어-재공학"><a href="#소프트웨어-재공학" class="headerlink" title="소프트웨어 재공학"></a>소프트웨어 재공학</h4><ul>
<li>기존 소프트웨어를 파기하지 않고 새로운 요구에 맞도록 수정, 보완하거나 새로운 기능을 추가하여 성능을 향상시키는 것</li>
<li>유지보수 비용이 개발 비용의 대부분을 차지하는 문제를 고려하여 개조 및 개선을통해 유지보수성과 품질을 향상시키려는 기술</li>
<li>유지보수 생산성 향상을 통해 소프트웨어 위기를 해결하는 방법</li>
</ul>
<h4 id="소프트웨어-역공학"><a href="#소프트웨어-역공학" class="headerlink" title="소프트웨어 역공학"></a>소프트웨어 역공학</h4><ul>
<li>기존 소프트웨어를 분석하여 개발 과정과 데이터 처리 과정을 설명하는 분석 및 설계 정보를 재발견하거나 다시 만들어내는 작업</li>
<li>목표<ul>
<li>복잡한 시스템을 다루는 방법 구현</li>
<li>다른 뷰의 생성</li>
<li>잃어버린 정보의 복구 및 제거</li>
<li>부작용의 발견</li>
</ul>
</li>
</ul>
<h4 id="CASE"><a href="#CASE" class="headerlink" title="CASE"></a>CASE</h4><ul>
<li>개발 과정에서 사용되는 요구분석, 설계구현, 검사 및 디버깅 과정 전체 또는 일부를 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화하는 것</li>
<li>소프트웨어 생명 주기의 전체 단계를 연결해 주고 자동화해주는 통합된 도구를 제공해주는 기술</li>
<li>주요 기능<ul>
<li>소프트웨어 생명주기 전 단계의 연결, 다양한 소프트웨어 개발 모형 지원, 그래픽 지원 등</li>
</ul>
</li>
<li>이점<ul>
<li>개발 기간 단축 및 비용 절감, 품질 향상, 유지보수 용이, 생산성 향상, 재사용성 향상, 개발주기의 표준화 등</li>
</ul>
</li>
<li>분류<ul>
<li>Upper CASE<ul>
<li>생명 주기의 전반부에 사용되는 것으로 문제를 기술하고 계획하며 요구 분석과 설계 단계를 지원하는 CASE</li>
</ul>
</li>
<li>Lower CASE<ul>
<li>생명 주기 하반부에 사용되는 것으로 코드의 작성과 테스트 문서화하는 과정을 지원하는 CASE</li>
</ul>
</li>
<li>Intergrate CASE<ul>
<li>생명주기에 포함되는 전체 과정을 지원하기 위한 CASE</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="CASE-정보-저장소"><a href="#CASE-정보-저장소" class="headerlink" title="CASE 정보 저장소"></a>CASE 정보 저장소</h4><ul>
<li>소프트웨어를 개발하는 동안에 모아진 정보를 보관하여 관리하는 곳으로 오늘날에는 데이터베이스가 정보 저장소 역할을 담당</li>
</ul>
]]></content>
      <categories>
        <category>SW</category>
        <category>software engineering</category>
      </categories>
      <tags>
        <tag>software engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>[DB] Database 요약</title>
    <url>/2021/04/07/%5BDB%5D%20DataBase%20%EC%9A%94%EC%95%BD/</url>
    <content><![CDATA[<h3 id="데이터베이스"><a href="#데이터베이스" class="headerlink" title="데이터베이스"></a>데이터베이스</h3><a id="more"></a>

<h4 id="데이터베이스-개념"><a href="#데이터베이스-개념" class="headerlink" title="데이터베이스 개념"></a>데이터베이스 개념</h4><ul>
<li>데이터베이스 : 상호 관련된 데이터들의 모임</li>
<li>데이터 언어<ul>
<li>DDL (Data Definition Language)<ul>
<li>‘정의어’라고 하며, 데이터베이스 구축, 변경, 제약조건 정의를 위한 언어</li>
<li>CREATE, ALTER, DROP, TRUNCATE (테이블 초기화)</li>
</ul>
</li>
<li>DML (Data Manipulation Language)<ul>
<li>‘조작어’라고 하며, 데이터 처리, 검색, 삽입, 삭제 갱신 연산을 위한 언어</li>
<li>SELECT, INSERT, UPDATE, DELETE</li>
</ul>
</li>
<li>DCL (Data Control Language)<ul>
<li>‘제어어’라고 하며, 보안 및 권한 제어, 무결성, 회복 ,병행제어를 위한 언어</li>
<li>GRANT(권한 부여), REVOKE(권한 취소), COMMIT(작업 완료), ROLLBACK(작업 복구)</li>
</ul>
</li>
</ul>
</li>
<li>스키마 (Schema)<ul>
<li>데이터베이스의 구조와 제약 조건에 관한 전반적인 명세를 기술한 것</li>
<li>데이터의 구조적 특성을 의미</li>
<li>데이터 사전(시스템 카탈로그)에 저장된다.</li>
<li>스키마의 3계층<ul>
<li>외부 스키마 (External Schema = Sub Schema = 사용자 뷰) <ul>
<li>사용자나 응용 프로그래머가 각 개인의 입장에서 필요로 하는 데이터베이스의 논리적 구조를 정의</li>
<li>하나의 외부 스키마는 여럿이 공유 가능하며, 하나의 DB시스템에 여러개의 외부 스키마가 존재 가능</li>
</ul>
</li>
<li>개념 스키마 (Conceptual Schema = 전체적인 뷰)<ul>
<li>개체간의 관계와 제약조건을 나타내고, 데이터베이스의 접근 권한/ 보안 / 무결성 규칙에 대한 명세를 정의</li>
<li>데이터베이스 관리자(DBA)에 의해 구성</li>
<li>일반적으로 스키마라고 하면 개념 스키마를 의미</li>
</ul>
</li>
<li>내부 스키마 (Internal Schema = 물리적 스키마)<ul>
<li>물리적 저장장치의 입장에서 본 데이터베이스 구조, 물리적인 저장장치와 밀접함</li>
<li>데이터베이스의 물리적 구조</li>
<li>시스템 프로그래머나 설계자의 관점에서 바라보는 스키마</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="데이터베이스-설계"><a href="#데이터베이스-설계" class="headerlink" title="데이터베이스 설계"></a>데이터베이스 설계</h4><ul>
<li>데이터베이스 설계 : DB의 구조, 즉 DB 스키마를 개발하는 과정</li>
</ul>
<ol>
<li>요구 조건 분석<ul>
<li>사용할 사람이 필요로 하는 용도 파악 =&gt; <strong>요구 조건 명세서</strong></li>
</ul>
</li>
<li>개념적 설계<ul>
<li>개념 스키마 모델링(데이터 중심 설계)과 트랙잭션 모델링(데이터 처리 중심 설계)을 병행하여 수행 =&gt; <strong>E-R 다이어그램</strong></li>
</ul>
</li>
<li>논리적 설계<ul>
<li>논리 스키마 설계, 정규화 과정 수행</li>
<li>E-R 도형 =&gt; <strong>릴레이션 스키마</strong>로 변환</li>
</ul>
</li>
<li>물리적 설계<ul>
<li>특정한 저장 구조와 접근 경로를 결정하는 과정 =&gt; <strong>물리 스키마</strong> 설계</li>
</ul>
</li>
<li>데이터베이스 구현<ul>
<li>데이터베이스를 실제로 구축하는 과정</li>
<li>DDL로 기술된 명령문을 실행하여 데이터베이스 스키마와 데이터베이스 파일 생성</li>
</ul>
</li>
</ol>
<h4 id="관계형-데이터베이스"><a href="#관계형-데이터베이스" class="headerlink" title="관계형 데이터베이스"></a>관계형 데이터베이스</h4><ul>
<li><p>관계형 데이터 모델 : 데이터를 Table 또는 Relation의 구조로 표현하는 논리적 데이터 모델</p>
</li>
<li><p>릴레이션(Relation) : 데이터를 원자값으로 갖는 이차원의 테이블로 표현</p>
<ul>
<li>릴레이션 스키마 : 속성(칼럼)으로 나눠짐</li>
<li>릴레이션 인스턴스 : 튜플(레코드)들의 집합</li>
</ul>
</li>
<li><p>식별 관계 / 비식별 관계</p>
<ul>
<li>식별 관계 : 개체 A, B 사이의 관계에서 A 개체의 기본키가 B 개체의 외래키이면서 동시에 기본키인 관계 =&gt; 반드시 B가 존재하면 A도 존재해야 함</li>
<li>비식별 관계 : 개체 A, B 사이의 관계에서 A 개체의 기본키가 B 개체의 비기본키의 영역에서 외래키가 되는 관계(E-R도형에서 점선 표시) =&gt; B가 존재해도 A가 존재하지 않을 수 있다.</li>
</ul>
</li>
<li><p>키(Key)의 개념</p>
<ul>
<li>슈퍼키 : 유일성 o, 최소성 x / 각 행을 유일하게 식별할 수 있는 하나 또는 그 이상의 속성들의 집합</li>
<li>후보키 : 유일성 o, 최소성 o / 각 행을 유일하게 식별할 수 있는 최소한의 속성들의 집합</li>
<li>기본키 : 유일성 o, 최소성 o / 후보키들 중 하나를 선택한 키, 오직 하나만 지정 가능, NULL 값을 가질 수 없고, 중복될 수 없음</li>
<li>대체키 : 후보키 중에서 기본키를 제외한 나머지 키</li>
<li>외래키 : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합 / 릴레이션 간의 관계를 표현할 때 사용, 참조 릴레이션의 기본키와 동일한 키 속성을 가짐</li>
</ul>
</li>
<li><p>무결성</p>
<ul>
<li>데이터베이스에 저장된 값과 실제 값이 일치하는 정확성</li>
</ul>
</li>
<li><p>무결성(Integrity) 제약 조건</p>
<ul>
<li>DB내에 정확하지 않은 데이터가 저장되는 것을 방지하기 위한 제약 조건</li>
</ul>
<ol>
<li>개체 무결성 : 릴레이션에서 기본키를 구성하는 속성은 널(NULL)값이나 중복값을 가질 수 없음</li>
<li>참조 무결성 : 외래키 값은 NULL이거나 참조 릴레이션의 기본키 값과 동일해야 함</li>
<li>도메인 무결성 : 특정 속성의 값이 정의된 도메인에 속한 값이어야 함</li>
<li>고유 무결성 : 특정 속성에 대해 고유한 값을 가지도록 조건이 주어진 경우, 그 속성값은 모두 달라야함</li>
<li>NULL 무결성 : 특정 속성값에 NULL이 올 수 없다는 조건이 주어진 경우, 그 속성값은 NULL이 되면 안됨</li>
<li>키 무결성 : 한 릴레이션에는 최소 하나의 키가 존재해야 함</li>
</ol>
</li>
<li><p>뷰(View)</p>
<ul>
<li>하나 이상의 기본 테이블에서 유도되는 가상 테이블</li>
<li>물리적으로 존재하지 않지만 사용자에게는 있는 것처럼 보임</li>
</ul>
</li>
</ul>
<h4 id="정규화"><a href="#정규화" class="headerlink" title="정규화"></a>정규화</h4><ul>
<li>이상(Anomaly) : 테이블에서 일부 속성들의 종속으로 인해 데이터의 중복 발생 =&gt; 이 중복으로 테이블 조작 시 문제가 발생하는 현상<ul>
<li>삽입 이상 : 새 데이터를 삽입하기 위해 불필요한 데이터도 함께 삽입해야 하는 문제</li>
<li>삭제 이상 : 튜플을 삭제하면 꼭 필요한 데이터까지 함께 삭제되는 데이터 손실의 문제</li>
<li>갱신 이상 : 중복 튜플 중 일부만 변경하여 데이터가 불일치하게 되는 모순의 문제</li>
</ul>
</li>
<li>정규화 : 이상 문제를 해결하기 위해 속성들 끼리의 종속 관계를 분석하여 여러개의 릴레이션으로 분해하는 과정<ol>
<li>제 1정규형(1NF) : 모든 속성의 도메인이 <strong>원자 값</strong>으로만 되어 있는 정규형</li>
<li>제 2정규형(2NF) : 제 1정규형을 만족하고, 기본키가 아닌 모든 속성이 기본키에 대해 <strong>완전 함수 종속</strong>을 만족하는 정규형</li>
<li>제 3정규형(3NF) : 제 2정규형을 만족하고, 기본키가 아닌 모든 속성이 기본키에 대해 <strong>이행적 함수 종속을 만족하지 않는</strong> 정규형<ul>
<li>이행적 함수 종속 : A -&gt; B 이고 B -&gt; C 일 때, A -&gt; C를 만족하는 관계</li>
</ul>
</li>
<li>BCNF : 모든 결정자가 <strong>후보키</strong>인 정규형</li>
<li>제 4정규형(4NF) : <strong>다중 종속</strong>을 제거한 정규형</li>
<li>제 5정규형(5NF) : <strong>조인 종속성</strong>을 제거한 정규형</li>
</ol>
</li>
</ul>
<h4 id="데이터베이스-기타-응용"><a href="#데이터베이스-기타-응용" class="headerlink" title="데이터베이스 기타, 응용"></a>데이터베이스 기타, 응용</h4><ul>
<li>시스템 카탈로그(데이터 사전)<ul>
<li>DBA의 도구</li>
<li>DB에 저장되어 있는 모든 데이터 개체들에 대한 정의나 명세 정보가 수록되어 있는 테이블</li>
<li>기본 릴레이션, 인덱스, 뷰, 사용자, 접근 권한등 데이터베이스 구조 및 통계 정보 저장</li>
<li>저장된 내용을 <strong>메타데이터</strong>라고 함</li>
</ul>
</li>
<li>인덱스<ul>
<li>데이터 레코드(튜플)에 빠르게 접근하기 위한 것</li>
<li>&lt;키, 포인터&gt; 쌍으로 구성</li>
<li>인덱스가 없을 경우, 특정 값을 찾을 때 모든 페이지를 뒤지는 현상 발생</li>
</ul>
</li>
<li>트랜잭션<ul>
<li>DB에서 하나의 논리적 기능을 수행하기 위한 일련의 연산 집합으로서의 작업 단위</li>
<li>정상 종료시 Commit, 비정상 종료시 Rollback 수행</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>DB</category>
        <category>Database</category>
      </categories>
      <tags>
        <tag>db</tag>
        <tag>DB</tag>
        <tag>database</tag>
        <tag>Databaseㅌ</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1342. 행운의 문자열</title>
    <url>/2021/04/01/%5BBOJ%5D%201342.%20%ED%96%89%EC%9A%B4%EC%9D%98%20%EB%AC%B8%EC%9E%90%EC%97%B4/</url>
    <content><![CDATA[<h3 id="1342-행운의-문자열"><a href="#1342-행운의-문자열" class="headerlink" title="1342. 행운의 문자열"></a>1342. 행운의 문자열</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1342" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <ol><li>순열을 통해서 행운의 문자열을 찾는다.</li><li>aba의 경우 aab, baa, aba, aba 이렇게 aba가 2개가 잡힌다.<ul><li>중복되기 때문에 a는 2개, b는 1개 -&gt; 정답에서 factorial (각 알파벳 개수)로 나눠준다.</li></ul></li></ol>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line">s = input().rstrip()</span><br><span class="line">l = len(s)</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> s: <span class="comment"># 알파벳 개수 구하기</span></span><br><span class="line">    <span class="keyword">if</span> e <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">        dic[e] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dic[e] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> permutaion <span class="keyword">in</span> permutations(s, l):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(permutaion)):</span><br><span class="line">        <span class="keyword">if</span> permutaion[i] == permutaion[i<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += <span class="number">1</span> <span class="comment"># 행운의 문자열 카운트</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> dic.values():</span><br><span class="line">    res //= factorial(v)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>permutations</tag>
        <tag>backtracking</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] heapq</title>
    <url>/2021/03/29/%5BPython%5D%20Heapq/</url>
    <content><![CDATA[<div class="note info">
            <h4 id="힙-자료구조"><a href="#힙-자료구조" class="headerlink" title="힙 자료구조"></a>힙 자료구조</h4><ul><li>이진 트리(binary tree) 기반의 최소 힙(min heap) 자료구조 ( JAVA의 <code>PriorityQueue</code> 와 비슷)</li><li>min heap을 사용하면 원소들이 항상 정렬된 상태로 추가되고 삭제된다.</li><li>가장 작은 값은 언제나 인덱스 0 ( 루트 )</li><li>내부적으로 min heap 내의 모든 원소 ( k )는 항상 자식 원소들 ( 2k + 1, 2k + 2 ) 보다 작거나 같다</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">heap[k] &lt;= heap[<span class="number">2</span>*k+<span class="number">1</span>] <span class="keyword">and</span> heap[k] &lt;= heap[<span class="number">2</span>*k+<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
          </div>

<a id="more"></a>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"></span><br><span class="line">heap = []</span><br><span class="line"><span class="comment"># 힙 원소 추가</span></span><br><span class="line">heapq.heappush(heap, <span class="number">4</span>)</span><br><span class="line">heapq.heappush(heap, <span class="number">1</span>)</span><br><span class="line">heapq.heappush(heap, <span class="number">7</span>)</span><br><span class="line">heapq.heappush(heap, <span class="number">3</span>)</span><br><span class="line">print(heap) <span class="comment"># [1, 3, 7, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 힙 원소 삭제</span></span><br><span class="line">print(heapq.heappop(heap)) <span class="comment"># 가장 작은 원소를 삭제 후 값 리턴 : 1</span></span><br><span class="line">print(heap) <span class="comment"># [3, 4, 7]</span></span><br><span class="line">print(heapq.heappop(heap)) <span class="comment"># 3</span></span><br><span class="line">print(heap) <span class="comment"># [4, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 삭제하지 않고 최소값 얻기</span></span><br><span class="line">print(heap[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 기존 리스트를 힙으로 변환</span></span><br><span class="line">heap = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line">heapq.heapify(heap)</span><br><span class="line">print(heap) <span class="comment"># [1, 3, 5, 4, 8, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 최대 힙(max heap)</span></span><br><span class="line"><span class="comment"># 힙에 튜플(tuple)를 원소로 추가하거나 삭제하면, 튜플 내에서 맨 앞에 있는 값을 기준으로 최소 힙이 구성되는 원리를 이용</span></span><br><span class="line"><span class="comment"># 최대 힙을 만들려면 각 값에 대한 우선 순위를 구한 후, (우선 순위, 값) 구조의 튜플(tuple)을 힙에 추가하거나 삭제한다.</span></span><br><span class="line"><span class="comment"># 그리고 힙에서 값을 읽어올 때는 각 튜플에서 인덱스 1에 있는 값을 취하면 됩니다</span></span><br><span class="line">nums = [<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line">heap = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">  heapq.heappush(heap, (-num, num))  <span class="comment"># (우선 순위, 값)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> heap:</span><br><span class="line">  print(heapq.heappop(heap)[<span class="number">1</span>])  <span class="comment"># index 1</span></span><br><span class="line"><span class="comment"># 8, 7, 5, 4, 3, 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># K번째 최소값 / 최대값</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kth_smallest</span><span class="params">(nums, k)</span>:</span></span><br><span class="line">  heap = []</span><br><span class="line">  <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    heapq.heappush(heap, num)</span><br><span class="line"></span><br><span class="line">  kth_min = <span class="literal">None</span></span><br><span class="line">  <span class="keyword">for</span> _ <span class="keyword">in</span> range(k):</span><br><span class="line">    kth_min = heapq.heappop(heap)</span><br><span class="line">  <span class="keyword">return</span> kth_min</span><br><span class="line"></span><br><span class="line">print(kth_smallest([<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>], <span class="number">3</span>)) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 힙 정렬</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">  heap = []</span><br><span class="line">  <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">    heapq.heappush(heap, num)</span><br><span class="line">  </span><br><span class="line">  sorted_nums = []</span><br><span class="line">  <span class="keyword">while</span> heap:</span><br><span class="line">    sorted_nums.append(heapq.heappop(heap))</span><br><span class="line">  <span class="keyword">return</span> sorted_nums</span><br><span class="line"></span><br><span class="line">print(heap_sort([<span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>])) <span class="comment"># [1, 3, 4, 5, 7, 8]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tree</tag>
        <tag>heapq</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1976. 여행 가자</title>
    <url>/2021/03/27/%5BBOJ%5D%201976.%20%EC%97%AC%ED%96%89%20%EA%B0%80%EC%9E%90/</url>
    <content><![CDATA[<h3 id="1976-여행-가자"><a href="#1976-여행-가자" class="headerlink" title="1976. 여행 가자"></a>1976. 여행 가자</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1976" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdin = open(<span class="string">"input.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line">n=int(input()) <span class="comment">#도시 수</span></span><br><span class="line">m=int(input()) <span class="comment">#여행계획에 속한 도시 수</span></span><br><span class="line">board=[list(map(int,input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">plan=list(map(int,input().split())) <span class="comment">#여행 계획</span></span><br><span class="line">parent=[<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>): <span class="comment">#부모 초기화</span></span><br><span class="line">    parent[i]=i</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_parent</span><span class="params">(parent,x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> parent[x]!=x: <span class="comment">#자기 자신이 부모가 아닌 경우 부모를 찾아라</span></span><br><span class="line">        parent[x]=find_parent(parent,parent[x])</span><br><span class="line">    <span class="keyword">return</span> parent[x]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union_parent</span><span class="params">(parent,a,b)</span>:</span></span><br><span class="line">    a=find_parent(parent,a)</span><br><span class="line">    b=find_parent(parent,b)</span><br><span class="line">    <span class="keyword">if</span> a&lt;b:</span><br><span class="line">        parent[b]=a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parent[a]=b</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> board[i][j]==<span class="number">1</span>: <span class="comment">#연결되어 있으면</span></span><br><span class="line">            union_parent(parent,i+<span class="number">1</span>,j+<span class="number">1</span>) <span class="comment">#합침(인덱스조심)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m<span class="number">-1</span>):</span><br><span class="line">    <span class="comment">#부모 다르면, 같은 집합 아님</span></span><br><span class="line">    <span class="keyword">if</span> find_parent(parent,plan[i])!=find_parent(parent,plan[i+<span class="number">1</span>]):</span><br><span class="line">        print(<span class="string">"NO"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"YES"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1987. 알파벳</title>
    <url>/2021/03/25/%5BBOJ%5D%201987.%20%EC%95%8C%ED%8C%8C%EB%B2%B3/</url>
    <content><![CDATA[<h3 id="1987-알파벳"><a href="#1987-알파벳" class="headerlink" title="1987. 알파벳"></a>1987. 알파벳</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1987" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">()</span>:</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, Map[<span class="number">0</span>][<span class="number">0</span>]))</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x, l, s = q.popleft()</span><br><span class="line">        <span class="keyword">if</span> res &lt; l:</span><br><span class="line">            res = l</span><br><span class="line">        <span class="keyword">if</span> res == <span class="number">26</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[d]</span><br><span class="line">            nx = x + dx[d]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; C:</span><br><span class="line">                <span class="keyword">if</span> Map[ny][nx] <span class="keyword">not</span> <span class="keyword">in</span> s:</span><br><span class="line">                    <span class="keyword">if</span> check[ny][nx] != Map[ny][nx] + s:</span><br><span class="line">                        check[ny][nx] = Map[ny][nx] + s</span><br><span class="line">                        q.append((ny, nx, l + <span class="number">1</span>, Map[ny][nx] + s))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">R, C = map(int, input().split())</span><br><span class="line">Map = [list(input().strip()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">check = [[<span class="string">''</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">print(bfs())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>java</tag>
        <tag>dp</tag>
        <tag>dynamic programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1753. 최단경로</title>
    <url>/2021/03/24/%5BBOJ%5D%201753.%20%EC%B5%9C%EB%8B%A8%EA%B2%BD%EB%A1%9C/</url>
    <content><![CDATA[<h3 id="1753-최단경로"><a href="#1753-최단경로" class="headerlink" title="1753. 최단경로"></a>1753. 최단경로</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1753" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p><a href="https://jinyeop-yang.github.io/2021/03/29/%5BPython%5D%20Heapq/#more">Heapq 알아보기</a></p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> heappush, heappop</span><br><span class="line">INF = <span class="number">10e9</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span><span class="params">(v, k, g)</span>:</span></span><br><span class="line">    dist = [INF] * v</span><br><span class="line">    dist[k - <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    q = []</span><br><span class="line">    heappush(q, [<span class="number">0</span>, k<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        cost, pos = heappop(q)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> p, c <span class="keyword">in</span> g[pos]:</span><br><span class="line">            c += cost</span><br><span class="line">            <span class="keyword">if</span> c &lt; dist[p]:</span><br><span class="line">                dist[p] = c</span><br><span class="line">                heappush(q, [c, p])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dist</span><br><span class="line"></span><br><span class="line">V, E = map(int, input().split())</span><br><span class="line">graph = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(V)]</span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(E):</span><br><span class="line">    u, v, w = map(int, input().split())</span><br><span class="line">    graph[u - <span class="number">1</span>].append((v - <span class="number">1</span>, w))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> dijkstra(V, K, graph):</span><br><span class="line">    print(d <span class="keyword">if</span> d != INF <span class="keyword">else</span> <span class="string">"INF"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>heapq</tag>
        <tag>dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 11967. 불켜기</title>
    <url>/2021/03/23/%5BBOJ%5D%2011967.%20%EB%B6%88%EC%BC%9C%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="11967-불켜기"><a href="#11967-불켜기" class="headerlink" title="11967. 불켜기"></a>11967. 불켜기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/11967" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>방이동, 불켜기 따로생각</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    visit = &#123;(<span class="number">0</span>, <span class="number">0</span>)&#125;</span><br><span class="line">    cnt = &#123;(<span class="number">0</span>, <span class="number">0</span>)&#125;</span><br><span class="line">    light[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(Map[y][x]) == <span class="number">0</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> a, b <span class="keyword">in</span> Map[y][x]:</span><br><span class="line">                light[a][b] = <span class="number">1</span></span><br><span class="line">                cnt.add((a, b))</span><br><span class="line">                <span class="keyword">if</span> (a, b) <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                        ny = a + dy[d]</span><br><span class="line">                        nx = b + dx[d]</span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> (ny, nx) <span class="keyword">in</span> visit:</span><br><span class="line">                            q.append((ny, nx))</span><br><span class="line">                            visit.add((ny, nx))</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[d]</span><br><span class="line">            nx = x + dx[d]</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> light[ny][nx] <span class="keyword">and</span> (ny, nx) <span class="keyword">not</span> <span class="keyword">in</span> visit:</span><br><span class="line">                q.append((ny, nx))</span><br><span class="line">                visit.add((ny, nx))</span><br><span class="line">    <span class="keyword">return</span> len(cnt)</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [[[] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">light = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, ny, nx = list(map(int, input().split()))</span><br><span class="line">    Map[y<span class="number">-1</span>][x<span class="number">-1</span>].append([ny<span class="number">-1</span>, nx<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">print(bfs())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1034. 램프</title>
    <url>/2021/03/22/%5BBOJ%5D%201034.%20%EB%9E%A8%ED%94%84/</url>
    <content><![CDATA[<h3 id="1034-램프"><a href="#1034-램프" class="headerlink" title="1034. 램프"></a>1034. 램프</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1034" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = map(int, input().split())</span><br><span class="line">arr = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">K = int(input())</span><br><span class="line">cnt = [<span class="number">0</span>]*N</span><br><span class="line"><span class="keyword">if</span> K%<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        zero_cnt = arr[i].count(<span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">if</span> zero_cnt % <span class="number">2</span> <span class="keyword">and</span> zero_cnt &lt;= K:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> arr[i] == arr[j]:</span><br><span class="line">                    cnt[i] += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        zero_cnt = arr[i].count(<span class="string">'0'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> zero_cnt % <span class="number">2</span> <span class="keyword">and</span> zero_cnt &lt;= K:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">if</span> arr[i] == arr[j]:</span><br><span class="line">                    cnt[i] += <span class="number">1</span></span><br><span class="line">print(max(cnt))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[JAVA] Spring 공부</title>
    <url>/2021/03/12/%5BJAVA%5D%20Spring%20%EA%B3%B5%EB%B6%80/</url>
    <content><![CDATA[<h4 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h4><a id="more"></a>

<ul>
<li><p>Spring</p>
<ul>
<li><p>자바(JAVA) 플랫폼을 위한 오픈소스(Open Source) 애플리케이션 프레임워크(Framework)</p>
</li>
<li><p>자바 엔터프라이즈 개발을 편하게 해주는 오픈소스 경량급 애플리케이션 프레임워크</p>
</li>
<li><p>자바개발을 위한 프레임워크로 종속 객체를 생성해주고, 조립해주는 도구</p>
</li>
<li><p>자바로 된 프레임워크로 자바SE로 된 자바 객체(POJO)를 자바EE에 의존적이지 않게 연결해주는 역할</p>
</li>
</ul>
</li>
<li><p>특징</p>
<ul>
<li>크기와 부하의 측면에서 경량</li>
<li>제어 역행(IoC)이라는 기술을 통해 애플리케이션의 느슨한 결합을 도모</li>
<li>관점 지향 프로그래밍(AOP)을 위한 풍부한 자원</li>
<li>애플리케이션 객체의 생명주기와 설정을 포함하고 관리한다는 점에서 일종의 컨테이너(Container)라고 할 수 있음.</li>
<li>간단한 컴포넌트로 복잡한 애플리케이션을 구성하고 설정할 수 있음.</li>
</ul>
</li>
<li><p>디테일한 특징</p>
<ul>
<li>경량 컨테이너로서 자바 객체를 직접 관리 =&gt; 각각의 객체 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수 있다.</li>
<li>스프링은 POJO(Plain Old Java Object) 방식의 프레임워크<ul>
<li>POJO<ul>
<li>오래된 방식의 자바 오브젝트의 줄임말. 특정한 자바 모델이나 기능, 프레임워크 등을 따르지 않는 자바 오브젝트를 뜻함</li>
</ul>
</li>
</ul>
</li>
<li>스프링은 제어의 역행(IoC : Inversion of Control)을 지원 =&gt; 컨트롤의 제어권이 사용자가 아니라 프레임워크에 있어서 필요에 따라 스프링에서 사용자의 코드를 호출한다.<ul>
<li>IoC<ul>
<li>인스턴스의 생성부터 소멸까지 개발자가 아닌 컨테이너가 대신 관리해주는 것</li>
</ul>
</li>
</ul>
</li>
<li>스프링은 의존성 주입(DI : Dependency Injection)을 지원 =&gt; 각각의 계층이나 서비스들 간에 의존성이 존재할 경우 프레임워크가 서로 연결시켜준다.</li>
<li>스프링은 관점 지향 프로그래밍(AOP : Aspect-Oriented Programming)을 지원 =&gt; 따라서 트랜잭션이나 로깅, 보안과 같이 여러 모듈에서 공통적으로 사용하는 기능의 경우 해당 기능을 분리하여 관리할 수 있다.<ul>
<li>AOP<ul>
<li>기존의 OOP(객체 지향 프로그래밍)에서 기능별로 class를 분리했음에도 불구하고, 여전히 로그, 트랜잭션, 자원해제, 성능테스트 메서드 처럼 공통적으로 반복되는 중복코드가 여전히 발생하는 단점을 해결하고자 나온 방식으로 이러한 공통 코드를 “횡단 관심사”라 표현하며 개발코드에서는 비지니스 로직에 집중하고 실행시에 비지니스 로직 앞, 뒤 등 원하는 지점에 해당 공통 관심사를 수행할 수 있게 함으로서 중복 코드를 줄일 수 있는 방식</li>
</ul>
</li>
</ul>
</li>
<li>스프링은 영속성과 관련된 다양한 서비스를 지원 =&gt; MyBatis나 Hibernate등 이미 완성도가 높은 데이터베이스 처리 라이브러리와 연결할 수 있는 인터페이스를 제공한다.</li>
<li>스프링은 확장성이 높음 =&gt; 스프링 프레임워크에 통합하기 위해 간단하게 기존 라이브러리를 감싸는 정도로 스프링에서 사용이 가능하기 때문에 수많은 라이브러리가 이미 스프링에서 지원되고 있고 스프링에서 사용되는 라이브러리를 별도로 분리하기도 용이하다.</li>
</ul>
</li>
<li><p>MVC 구조의 처리 과정</p>
<ol>
<li>DispatcherServlet : 어플리케이션으로 들어오는 모든 Request를 받는 관문이다. Request를 실제로 처리할 Controller에게 전달하고 그 결과값을 받아서 View에게 전달하여 적절한 응답을 생성할 수 있도록 흐름을 제어한다.</li>
<li>HandlerMapping : Request URL 각각 어떤 Controller가 실제로 처리할 것인지 찾아주는 역할</li>
<li>Controller : Request를 직접 처리한 후 그 결과를 다시 DispatcherServlet에게 돌려준다.</li>
<li>ModelAndView : Controller가 처리한 결과와 그 결과를 보여줄 View에 관한 정보를 담고있는 객체이다.</li>
<li>ViewResolver : View관련 정보를 갖고 실제 View를 찾아주는 역할을 한다.</li>
<li>View : Controller가 처리한 결과값을 보여줄 View를 생성한다.</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JAVA</tag>
        <tag>spring</tag>
        <tag>framework</tag>
      </tags>
  </entry>
  <entry>
    <title>[JAVA] JAVA 공부</title>
    <url>/2021/03/11/%5BJAVA%5D%20Java%20%EA%B3%B5%EB%B6%80/</url>
    <content><![CDATA[<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><a id="more"></a>

<ul>
<li>특징<ul>
<li>객체지향언어(OOP) 이다.</li>
<li>JVM (Java Virtual Machine) 만 있으면 동작하므로 OS에 독립적이다.</li>
<li>가비지 컬렉션을 통한 메모리 관리</li>
</ul>
</li>
<li>메모리 영역<ul>
<li>메서드 영역<ul>
<li>static 변수, 전역 변수, 코드에서 사용되는 클래스 정보들이 올라갑니다. 코드에서 사용되는 클래스들을 로더가 읽고 클래스 별로 분류해서 저장한다.</li>
</ul>
</li>
<li>스택 영역<ul>
<li>지역 변수, 메서드 등이 저장되는 영역</li>
</ul>
</li>
<li>힙 영역<ul>
<li>new 연산자를 통해 동적할당된 객체들이 저장되고, 메모리는 가비지 컬렉션에 의해 관리된다.</li>
</ul>
</li>
</ul>
</li>
<li>java와 c++의 차이점<ul>
<li>java는 JVM을 통해 동작하지만, c++은 OS에 맞는 기계어로 컴파일하여 동작한다.</li>
<li>java는 보안, 이식성, 빠른 개발에 비중을 두었고, c++은 속도와 c 언어와의 호환성에 비중을 두었다.</li>
</ul>
</li>
<li>java의 접근 제어자의 종류와 특징<ul>
<li>모두 접근이 가능한 public</li>
<li>같은 클래스 내에서만 접근이 가능한 private</li>
<li>동일 클래스나 다른 패키지의 상속 관계의 하위 클래스에서만 접근 가능한 protected</li>
<li>동일 패키지에서만 접근가능한 package</li>
</ul>
</li>
<li>객체지향 프로그래밍과 절차지향 프로그래밍의 차이<ul>
<li>절차지향 프로그래밍<ul>
<li>실행하고자 하는 절차를 정하고, 이 절차대로 프로그래밍하는 방법<br>목적을 달성하기 위한 일의 흐름에 중점을 둔다.</li>
</ul>
</li>
<li>객체지향 프로그래밍<ul>
<li>실세상의 물체를 객체로 표현하고, 이들 사이의 관계, 상호 작용을 프로그램으로 나타낸다.</li>
<li>객체를 추출하고 객체들의 관계를 결정하고 이들의 상호 작용에 필요한 함수(메서드)와 변수(필드)를 설계 및 구현하다.</li>
<li>객체 지향의 행심은 연관되어 있는 변수와 메서드를 하나의 그룹으로 묶어서 그룹핑하는 것이다.</li>
<li>사람의 사고와 가장 비슷하게 프로그래밍을 하기 위해서 생성된 기법</li>
<li>하나의 클래스를 바탕으로 서로 다른 상태를 가진 인스턴스를 만들면 서로 다른 행동을 하게 된다. 즉, </li>
<li>하나의 클래스가 여러 개의 인스턴스가 될 수 있다는 점이 객체 지향이 제공하는 가장 기본적인 재활용성이라고 할 수 있다.</li>
</ul>
</li>
</ul>
</li>
<li>객체지향프로그래밍(Object-Oriented Programming)이란<ul>
<li>실생활에 있는 사물이나 그 기능을 class로 추상화 시키는 것을 의미합니다. 예를 들어 학교에서 학생, 과목 등의 실생활 객체들의 특징을 뽑아 프로그래밍하는 것을 의미하며 재사용성과 유지보수의 장점이 있습니다.</li>
</ul>
</li>
<li>OOP의 4가지 특징<ul>
<li>추상화(Abstraction)<ul>
<li>공통 특징을 묶어 하나의 집합으로 다루는 것</li>
</ul>
</li>
<li>캡슐화(Encapsulation)<ul>
<li>정보 보호를 위해 외부의 접근을 막는 것</li>
<li>getter, setter로 접근이 가능하다.</li>
</ul>
</li>
<li>상속(Inheritance)<ul>
<li>부모클래스의 속성과 기능을 그대로 사용할 수 있는 것</li>
</ul>
</li>
<li>다형성(Polymorphism)<ul>
<li>오버라이딩이나 오버로딩이 가능한 것</li>
</ul>
</li>
</ul>
</li>
<li>OOP의 5대 원칙 (SOLID)<ul>
<li>S: 단일 책임 원칙(SRP, Single Responsibility Principle)<ul>
<li>객체는 단 하나의 책임만 가져야 한다.</li>
</ul>
</li>
<li>O: 개방-폐쇄 원칙(OCP, Open Closed Principle)<ul>
<li>기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 한다.</li>
</ul>
</li>
<li>L: 리스코프 치환 원칙(LSP, Liskov Substitution Principle)    <ul>
<li>일반화 관계에 대한 이야기며, 자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다.</li>
</ul>
</li>
<li>I: 의존 역전 원칙(DIP, Dependency Inversion Principle)<ul>
<li>의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것이다.</li>
</ul>
</li>
<li>D: 인터페이스 분리 원칙(ISP, Interface Segregation Principle)<ul>
<li>인터페이스를 클라이언트에 특화되도록 분리시키라는 설계 원칙이다.</li>
</ul>
</li>
</ul>
</li>
<li>오버로딩과 오버라이딩의 차이(Overloading vs Overriding)<ul>
<li>Overloading<ul>
<li>같은 이름의 메소드를 여러개 정의하는 것</li>
<li>매개변수의 타입이 다르거나 개수가 달라야 한다.</li>
</ul>
</li>
<li>Overriding<ul>
<li>상속에서 나온 개념으로 부모 클래스의 메소드를 자식 클래스에서 재정의 하는 것</li>
</ul>
</li>
</ul>
</li>
<li>Garbage Collection<ul>
<li>시스템에서 더 이상 사용하지 않는 동적 할당된 메모리 블록을 찾아 자동으로 다시 사용 가능한 자원으로 회수 하는 것</li>
<li>시스템에서 가비지 컬렉션을 수행하는 부분을 가비지 컬렉터라 부른다.</li>
</ul>
</li>
<li>DAO / DTO<ul>
<li>DAO(Data Access Object)<ul>
<li>간단히 데이터베이스의 데이터에 접근을 위한 객체이다</li>
<li>데이터베이스에 접근을 하기위한 로직과 비즈니스 로직을 분리하기 위해서 사용한다</li>
<li>DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 오브젝트를 말한다.</li>
</ul>
</li>
<li>DTO(Data Transfer Object)<ul>
<li>계층간 데이터 교환을 위한 JavaBean을 말한다.</li>
<li>여기서 말하는 계층이란 Controller, View, Business Layer, Persistent Layer를 말하며 각 계층간 데이터 교환을 위한 객체를 DTO 또는 VO(Value Object)라고 부른다</li>
<li>VO는 동일한 개념이지만 read only 속성을 가집니다.</li>
</ul>
</li>
</ul>
</li>
<li>JSP / Servlet<ul>
<li>JSP(Java Server Page)<ul>
<li>HTML 소스 코드 속에 자바 소스 코드가 들어가는 구조를 갖는 웹 어플리케이션 프로그래밍 기술(Java In HTML)</li>
</ul>
</li>
<li>Servlet<ul>
<li>Container가 이해할 수 있게 구성된 순수 자바 코드로만 이루어진 것( Html in Java )</li>
</ul>
</li>
</ul>
</li>
<li>Interface<ul>
<li>모든 메서드가 추상 메서드로 이루어진 클래스</li>
<li>추상 메소드와 상수만을 멤버로 갖는다.</li>
<li>Implements 키워드를 사용한다.</li>
<li>다중 상속이 가능하다.</li>
<li>상속의 관계가 없는 클래스간 서로 공동되는 로직을 구현하여쓸 수 있다.</li>
</ul>
</li>
<li>Abstract<ul>
<li>추상 메소드를 하나 이상 가진 클래스</li>
<li>자신의 생성자로 객체 생성이 불가능</li>
<li>하위 클래스를 참조하여 상위 클래스의 객체를 생성한다.</li>
<li>하위 클래스를 제어하기 위해 사용한다.</li>
</ul>
</li>
<li>Interface / Abstract<ul>
<li>공통점<ul>
<li>new로 생성 불가</li>
<li>프로토 타입만 있는 메소드만 가진다.</li>
<li>사용하기 위해서는 하위 클래스에서 확장 / 구현 해야한다.</li>
</ul>
</li>
<li>차이점<ul>
<li>사용하는 키워드가 다르다.</li>
<li>abstract는 일반 메소드를 사용할 수 있지만, interface는 메소드 선언만 가능하다.</li>
</ul>
</li>
</ul>
</li>
<li>jdbc<ul>
<li>자바에서 데이터베이스를 접속할 수 있도록 해주는 자바 API</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 19237. 어른 상어</title>
    <url>/2021/03/09/%5BBOJ%5D%2019237.%20%EC%96%B4%EB%A5%B8%EC%83%81%EC%96%B4/</url>
    <content><![CDATA[<h3 id="19237-어른-상어"><a href="#19237-어른-상어" class="headerlink" title="19237. 어른 상어"></a>19237. 어른 상어</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/19237" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <ol><li>현재 위치에 냄새 뿌리기</li><li>상어 이동, 냄새 지속 시간 - 1</li><li>1번 상어만 남았는 지 확인</li></ol>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> N, M, K;</span><br><span class="line">	<span class="keyword">static</span> Arr[][] map;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] dy = &#123;<span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span>[] dx = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		</span><br><span class="line">		N = Integer.parseInt(st.nextToken());</span><br><span class="line">		M = Integer.parseInt(st.nextToken());</span><br><span class="line">		K = Integer.parseInt(st.nextToken());</span><br><span class="line">		</span><br><span class="line">		map = <span class="keyword">new</span> Arr[N][N];</span><br><span class="line">		Shark[] sharks = <span class="keyword">new</span> Shark[M + <span class="number">1</span>];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i ++) &#123;</span><br><span class="line">			st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j ++) &#123;</span><br><span class="line">				map[i][j] = <span class="keyword">new</span> Arr(Integer.parseInt(st.nextToken()), -<span class="number">1</span>); </span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(map[i][j].s_num != <span class="number">0</span>) &#123;</span><br><span class="line">					sharks[map[i][j].s_num] = <span class="keyword">new</span> Shark(i, j);</span><br><span class="line">					map[i][j].smell = K;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">			sharks[i].d = Integer.parseInt(st.nextToken());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">				st = <span class="keyword">new</span> StringTokenizer(br.readLine());</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">					sharks[i].posPriority[j][k] = Integer.parseInt(st.nextToken());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(time &lt; <span class="number">1001</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">					map[i][j].smell--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> sharkcnt = <span class="number">0</span>;</span><br><span class="line">			aa: <span class="keyword">for</span>(<span class="keyword">int</span> i = M; i &gt; <span class="number">0</span>; i --) &#123;</span><br><span class="line">					<span class="keyword">if</span>(!sharks[i].isAlive)</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					<span class="keyword">if</span>(map[sharks[i].i][sharks[i].j].s_num != i) &#123;</span><br><span class="line">						sharks[i].isAlive = <span class="keyword">false</span>;</span><br><span class="line">						<span class="keyword">continue</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					sharkcnt++;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">int</span> sy = <span class="number">0</span>, sx = <span class="number">0</span>;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">int</span> sd = sharks[i].d;</span><br><span class="line">					</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">						<span class="keyword">int</span> priority_pos = sharks[i].posPriority[sd][j];</span><br><span class="line">						sy = sharks[i].i + dy[priority_pos];</span><br><span class="line">						sx = sharks[i].j + dx[priority_pos];</span><br><span class="line">						</span><br><span class="line">						<span class="keyword">if</span>(sy &lt; <span class="number">0</span> || sy &gt;= N || sx &lt; <span class="number">0</span> || sx &gt;= N)</span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">						<span class="keyword">if</span>(map[sy][sx].smell &lt; <span class="number">0</span>) &#123;</span><br><span class="line">							sharks[i].i = sy;</span><br><span class="line">							sharks[i].j = sx;</span><br><span class="line">							sharks[i].d = priority_pos;</span><br><span class="line">							<span class="keyword">continue</span> aa;</span><br><span class="line">									</span><br><span class="line">						&#125;</span><br><span class="line">						</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line"><span class="comment">//					sd = sharks[i].d;</span></span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">						<span class="keyword">int</span> priority_pos = sharks[i].posPriority[sd][j];</span><br><span class="line">						sy = sharks[i].i + dy[priority_pos];</span><br><span class="line">						sx = sharks[i].j + dx[priority_pos];</span><br><span class="line">						</span><br><span class="line">						<span class="keyword">if</span>(sy &lt; <span class="number">0</span> || sy &gt;= N || sx &lt; <span class="number">0</span> || sx &gt;= N)</span><br><span class="line">							<span class="keyword">continue</span>;</span><br><span class="line">						<span class="keyword">if</span>(map[sy][sx].s_num == i &amp;&amp; map[sy][sx].smell &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">							sharks[i].i = sy;</span><br><span class="line">							sharks[i].j = sx;</span><br><span class="line">							sharks[i].d = priority_pos;</span><br><span class="line">							<span class="keyword">continue</span> aa;</span><br><span class="line">									</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = M; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!sharks[i].isAlive)</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				map[sharks[i].i][sharks[i].j].smell = K;</span><br><span class="line">				map[sharks[i].i][sharks[i].j].s_num = i;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(sharkcnt == <span class="number">1</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			time++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(time &gt;= <span class="number">1001</span>)</span><br><span class="line">			sb.append(-<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			sb.append(time);</span><br><span class="line">		System.out.println(sb);</span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Arr</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> s_num;</span><br><span class="line">		<span class="keyword">int</span> smell;</span><br><span class="line">		</span><br><span class="line">		Arr(<span class="keyword">int</span> num, <span class="keyword">int</span> smell)&#123;</span><br><span class="line">			<span class="keyword">this</span>.s_num = num;</span><br><span class="line">			<span class="keyword">this</span>.smell = smell;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Shark</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> i, j, d;</span><br><span class="line">		<span class="keyword">int</span>[][] posPriority;</span><br><span class="line">		<span class="keyword">boolean</span> isAlive;</span><br><span class="line">		</span><br><span class="line">		Shark(<span class="keyword">int</span> i, <span class="keyword">int</span> j)&#123;</span><br><span class="line">			<span class="keyword">this</span>.i = i;</span><br><span class="line">			<span class="keyword">this</span>.j = j;</span><br><span class="line">			<span class="keyword">this</span>.d = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">this</span>.posPriority = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">			<span class="keyword">this</span>.isAlive = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>java</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1967. 트리의 지름</title>
    <url>/2021/03/08/%5BBOJ%5D%201967.%20%ED%8A%B8%EB%A6%AC%EC%9D%98%20%EC%A7%80%EB%A6%84/</url>
    <content><![CDATA[<h3 id="1967-트리의-지름"><a href="#1967-트리의-지름" class="headerlink" title="1967. 트리의 지름"></a>1967. 트리의 지름</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1967" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>트리의 지름</p><ol><li>임의의 노드 x에서 가장 먼 노드 y를 구한다.</li><li>노드 y에서 가장 먼 노드 z를 구한다.</li><li>노드 y에서 노드 z까지의 거리가 트리의 지름이다. ( 두 노드는 단말 노드이다.)</li></ol>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(v)</span>:</span></span><br><span class="line">    dist = node = <span class="number">0</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append(v)</span><br><span class="line">    check = [<span class="number">0</span>] * N</span><br><span class="line">    check[v[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        v = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> adj[v[<span class="number">0</span>]]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check[e[<span class="number">0</span>]]:</span><br><span class="line">                check[e[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">                q.append((e[<span class="number">0</span>], e[<span class="number">1</span>] + v[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> e[<span class="number">1</span>] + v[<span class="number">1</span>] &gt; dist:</span><br><span class="line">                    dist = e[<span class="number">1</span>] + v[<span class="number">1</span>]</span><br><span class="line">                    node = e[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> dist, node</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">adj = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N - <span class="number">1</span>):</span><br><span class="line">    u, v, w = map(int, input().split())</span><br><span class="line">    adj[u - <span class="number">1</span>].append((v - <span class="number">1</span>, w))</span><br><span class="line">    adj[v - <span class="number">1</span>].append((u - <span class="number">1</span>, w))</span><br><span class="line"></span><br><span class="line">print(bfs([bfs([<span class="number">0</span>,<span class="number">0</span>])[<span class="number">1</span>], <span class="number">0</span>])[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1167. 트리의 지름</title>
    <url>/2021/03/08/%5BBOJ%5D%201167.%20%ED%8A%B8%EB%A6%AC%EC%9D%98%20%EC%A7%80%EB%A6%84/</url>
    <content><![CDATA[<h3 id="1167-트리의-지름"><a href="#1167-트리의-지름" class="headerlink" title="1167. 트리의 지름"></a>1167. 트리의 지름</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1167" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>트리의 지름</p><ol><li>임의의 노드 x에서 가장 먼 노드 y를 구한다.</li><li>노드 y에서 가장 먼 노드 z를 구한다.</li><li>노드 y에서 노드 z까지의 거리가 트리의 지름이다. ( 두 노드는 단말 노드이다.)</li></ol>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(num)</span>:</span></span><br><span class="line">    dist = node = <span class="number">0</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((num, <span class="number">0</span>))</span><br><span class="line">    check = [<span class="number">0</span>] * N</span><br><span class="line">    check[num] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        now, now_d = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> adj[now]:</span><br><span class="line">            <span class="keyword">if</span> check[i[<span class="number">0</span>]] == <span class="number">0</span>:</span><br><span class="line">                check[i[<span class="number">0</span>]] = <span class="number">1</span></span><br><span class="line">                q.append((i[<span class="number">0</span>], i[<span class="number">1</span>] + now_d))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> now_d + i[<span class="number">1</span>] &gt; dist:</span><br><span class="line">                    dist = now_d + i[<span class="number">1</span>]</span><br><span class="line">                    node = i[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> dist, node</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">adj = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    temp = list(map(int, input().split()))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(temp) - <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        adj[temp[<span class="number">0</span>] - <span class="number">1</span>].append((temp[j] - <span class="number">1</span>, temp[j + <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">a, b = bfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(bfs(b)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 5427. 불</title>
    <url>/2021/03/04/%5BBOJ%5D%205427.%20%EB%B6%88/</url>
    <content><![CDATA[<h3 id="5427-불"><a href="#5427-불" class="headerlink" title="5427. 불"></a>5427. 불</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/5427" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    C, R = map(int,input().split())</span><br><span class="line">    Map = [input().rstrip() <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    visit = [[<span class="number">0</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    fvisit = [[<span class="number">0</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    q = deque()</span><br><span class="line">    sy = sx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            <span class="keyword">if</span> Map[i][j] == <span class="string">'@'</span>:</span><br><span class="line">                sy, sx = i, j</span><br><span class="line">                visit[i][j] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> Map[i][j] == <span class="string">'*'</span>:</span><br><span class="line">                q.append((i, j, <span class="number">-1</span>))</span><br><span class="line">                fvisit[i][j] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    q.append((sy, sx, <span class="number">-2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x, t = q.popleft()</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="number">0</span> <span class="keyword">or</span> y == R - <span class="number">1</span> <span class="keyword">or</span> x == <span class="number">0</span> <span class="keyword">or</span> x == C - <span class="number">1</span>) <span class="keyword">and</span> t == <span class="number">-2</span>:</span><br><span class="line">            print(visit[y][x])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[idx]</span><br><span class="line">            nx = x + dx[idx]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; C:</span><br><span class="line">                <span class="keyword">if</span> t == <span class="number">-1</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> fvisit[ny][nx] <span class="keyword">and</span> Map[ny][nx] != <span class="string">'#'</span>:</span><br><span class="line">                        fvisit[ny][nx] = <span class="number">1</span></span><br><span class="line">                        q.append((ny, nx, t))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> fvisit[ny][nx] <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx] <span class="keyword">and</span> Map[ny][nx] != <span class="string">'#'</span>:</span><br><span class="line">                        visit[ny][nx] = visit[y][x] + <span class="number">1</span></span><br><span class="line">                        q.append((ny, nx, t))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'IMPOSSIBLE'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[Algorithm] 유니온 파인드 (Union-Find)</title>
    <url>/2021/02/27/%5BAlgorithm%5D%20%EC%9C%A0%EB%8B%88%EC%98%A8%20%ED%8C%8C%EC%9D%B8%EB%93%9C%20(Union-Find)/</url>
    <content><![CDATA[<h3 id="유니온-파인드-Union-Find"><a href="#유니온-파인드-Union-Find" class="headerlink" title="유니온-파인드 (Union-Find)"></a>유니온-파인드 (Union-Find)</h3><blockquote>
<p>그래프 알고리즘의 일종으로 상호 배타적 집합, Disjoint-set 이라고도 한다. 여러 노드가 존재할 때 어떤 두 개의 노드를 같은 집합으로 묶어주고, 다시 어떤 두 노드가 같은 집합에 있는지 확인하는 알고리즘이다.</p>
</blockquote>
<ol>
<li>Find<ul>
<li>Node x가 어느 집합에 포함되어 있는지 찾는 연산</li>
</ul>
</li>
<li>Union<ul>
<li>Node x가 포함된 집합과 Node y가 포함된 집합을 합치는 연산</li>
</ul>
</li>
</ol>
<h4 id="구현"><a href="#구현" class="headerlink" title="구현"></a>구현</h4><blockquote>
<p>간단한 트리를 통해서 구현이 가능하다.</p>
<p><code>parent[i]</code> 를 <strong>i 노드의 부모 노드</strong> 라고 정의하고 초기화 해준다.</p>
<p><code>parent[i] = i</code> 인 경우, 루트노드 임을 의미한다.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parent = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N + <span class="number">1</span>)] <span class="comment"># 초기 상태, 각 노드는 자신이 루트노드이다.</span></span><br></pre></td></tr></table></figure>



<h5 id="1-Find-함수"><a href="#1-Find-함수" class="headerlink" title="1. Find 함수"></a>1. Find 함수</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == parent[x]: <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parent[x] = find(parent[x])</span><br><span class="line">        <span class="keyword">return</span> parent[x]</span><br></pre></td></tr></table></figure>

<h5 id="2-Union-함수"><a href="#2-Union-함수" class="headerlink" title="2. Union 함수"></a>2. Union 함수</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    x = find(x)</span><br><span class="line">    y = find(y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 보통 작은 값을 부모로 둔다.</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; y: parent[y] = x</span><br><span class="line">    <span class="keyword">else</span>: parent[x] = y</span><br></pre></td></tr></table></figure>



<h4 id="예시-코드"><a href="#예시-코드" class="headerlink" title="예시 코드"></a>예시 코드</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find 연산</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x == parent[x]:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 경로 압축 최적화</span></span><br><span class="line">    parent[x] = find(parent[x])</span><br><span class="line">    <span class="keyword">return</span> parent[x]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># union 연산</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a = find(a)</span><br><span class="line">    b = find(b)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 작은 루트 노드를 기준으로 합침</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        parent[b] = a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parent[a] = b</span><br><span class="line"> </span><br><span class="line">parent = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 노드 3과 노드 5가 같은 집합인지 비교</span></span><br><span class="line"><span class="comment"># 출력 결과 : 다른 집합입니다!</span></span><br><span class="line"><span class="keyword">if</span> find(<span class="number">3</span>) == find(<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">"같은 집합입니다!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"다른 집합입니다!"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 노드 3과 노드 5를 union 연산(합침)</span></span><br><span class="line">union(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 노드 3과 노드 5가 같은 집합인지 비교</span></span><br><span class="line"><span class="comment"># 출력 결과 : 같은 집합입니다!</span></span><br><span class="line"><span class="keyword">if</span> find(<span class="number">3</span>) == find(<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">"같은 집합입니다!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"다른 집합입니다!"</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>Algotithm</tag>
        <tag>Union-Find</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16957. 체스판 위의 공</title>
    <url>/2021/02/26/%5BBOJ%5D%2016957.%20%EC%B2%B4%EC%8A%A4%ED%8C%90%20%EC%9C%84%EC%9D%98%20%EA%B3%B5/</url>
    <content><![CDATA[<h3 id="16957-체스판-위의-공"><a href="#16957-체스판-위의-공" class="headerlink" title="16957. 체스판 위의 공"></a>16957. 체스판 위의 공</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16957" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>시간초과 - bfs 통해서 탐색</p><p>이동한 칸의 부모를 찾아가면 된다.</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findParent</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> p[n] == n: <span class="keyword">return</span> n</span><br><span class="line">    p[n] = findParent(p[n])</span><br><span class="line">    <span class="keyword">return</span> p[n]</span><br><span class="line"></span><br><span class="line">R, C = list(map(int, input().split()))</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">res = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">501</span> * <span class="number">501</span>)]</span><br><span class="line">p = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">501</span> * <span class="number">501</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        y, x = i, j</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            ny = i + dy[k]</span><br><span class="line">            nx = j + dx[k]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; C:</span><br><span class="line">                <span class="keyword">if</span> Map[ny][nx] &lt; Map[y][x]:</span><br><span class="line">                    y, x = ny, nx</span><br><span class="line">        p[i*C + j] = y * C + x</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        res[findParent(i*C + j)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        print(res[i*C + j], end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>Union-Find</tag>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 2116. 주사위 쌓기</title>
    <url>/2021/02/24/%5BBOJ%5D%202116.%20%EC%A3%BC%EC%82%AC%EC%9C%84%20%EC%8C%93%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="2116-주사위-쌓기"><a href="#2116-주사위-쌓기" class="headerlink" title="2116. 주사위 쌓기"></a>2116. 주사위 쌓기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/2116" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">d = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">side</span><span class="params">(dice, i)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> max(dice[<span class="number">1</span>], dice[<span class="number">2</span>], dice[<span class="number">3</span>], dice[<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">1</span> <span class="keyword">or</span> i == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> max(dice[<span class="number">0</span>], dice[<span class="number">2</span>], dice[<span class="number">4</span>], dice[<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> max(dice[<span class="number">0</span>], dice[<span class="number">1</span>], dice[<span class="number">3</span>], dice[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">N = int(input().rstrip())</span><br><span class="line">res = float(<span class="string">'-inf'</span>)</span><br><span class="line">dice = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</span><br><span class="line">    dice.append((list(map(int, input().split()))))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    s = dice[<span class="number">0</span>][i]</span><br><span class="line">    cnt = side(dice[<span class="number">0</span>], i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, N):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">            <span class="keyword">if</span> dice[j][k] == s:</span><br><span class="line">                cnt += side(dice[j], k)</span><br><span class="line">                s = dice[j][d[k]]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    res = max(cnt, res)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 2573. 빙산</title>
    <url>/2021/02/24/%5BBOJ%5D%202573.%20%EB%B9%99%EC%82%B0/</url>
    <content><![CDATA[<h3 id="2573-빙산"><a href="#2573-빙산" class="headerlink" title="2573. 빙산"></a>2573. 빙산</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/2573" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>큐에 빙산 좌표를 넣어두고 하나씩 빼면서 진행했었는데 시간초과가 났다..</p><p>무한 루프 안에서 구역(zone)이 2가 되면 바로 빠져나오도록 else ~ break 구문을 2개 썼었는데 시간초과가 났다..</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(y, x, visit)</span>:</span></span><br><span class="line">    q = deque()</span><br><span class="line">    melt = deque()</span><br><span class="line">    q.append((y, x))</span><br><span class="line">    visit[y][x] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[d]</span><br><span class="line">            nx = x + dx[d]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx]: cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> Map[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line">        <span class="keyword">if</span> cnt:</span><br><span class="line">            melt.append((y, x, cnt))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(melt)):</span><br><span class="line">        y, x, c = melt.popleft()</span><br><span class="line">        Map[y][x] = max(<span class="number">0</span>, Map[y][x] - c)</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    zone = <span class="number">0</span></span><br><span class="line">    visit = [[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, N - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, M - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> Map[i][j] <span class="keyword">and</span> <span class="keyword">not</span> visit[i][j]:</span><br><span class="line">                zone += <span class="number">1</span></span><br><span class="line">                bfs(i, j, visit)</span><br><span class="line">    <span class="keyword">if</span> zone == <span class="number">0</span>:</span><br><span class="line">        print(<span class="number">0</span>); <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> zone &gt;= <span class="number">2</span>: </span><br><span class="line">        print(t); <span class="keyword">break</span></span><br><span class="line">    t += <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17070. 파이프 옮기기1</title>
    <url>/2021/02/23/%5BBOJ%5D%2017070.%20%ED%8C%8C%EC%9D%B4%ED%94%84%20%EC%98%AE%EA%B8%B0%EA%B8%B01/</url>
    <content><![CDATA[<h3 id="17070-파이프-옮기기1"><a href="#17070-파이프-옮기기1" class="headerlink" title="17070. 파이프 옮기기1"></a>17070. 파이프 옮기기1</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17070" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>아픔이 있었던 문제</p><p>DP로도 풀 수 있다!</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(y, x, d)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> y == N - <span class="number">1</span> <span class="keyword">and</span> x == N - <span class="number">1</span>:</span><br><span class="line">        res += <span class="number">1</span>; <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y][x + <span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">            dfs(y, x + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> x + <span class="number">1</span> &lt; N <span class="keyword">and</span> y + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y][x + <span class="number">1</span>] != <span class="number">1</span> <span class="keyword">and</span> Map[y + <span class="number">1</span>][x] != <span class="number">1</span> <span class="keyword">and</span> Map[y + <span class="number">1</span>][x + <span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">            dfs(y + <span class="number">1</span>, x + <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> d == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> y + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y + <span class="number">1</span>][x] != <span class="number">1</span>:</span><br><span class="line">            dfs(y + <span class="number">1</span>, x, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> x + <span class="number">1</span> &lt; N <span class="keyword">and</span> y + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y][x + <span class="number">1</span>] != <span class="number">1</span> <span class="keyword">and</span> Map[y + <span class="number">1</span>][x] != <span class="number">1</span> <span class="keyword">and</span> Map[y + <span class="number">1</span>][x + <span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">            dfs(y + <span class="number">1</span>, x + <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">elif</span> d == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> x + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y][x + <span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">            dfs(y, x + <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> y + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y + <span class="number">1</span>][x] != <span class="number">1</span>:</span><br><span class="line">            dfs(y + <span class="number">1</span>, x, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> x + <span class="number">1</span> &lt; N <span class="keyword">and</span> y + <span class="number">1</span> &lt; N <span class="keyword">and</span> Map[y][x + <span class="number">1</span>] != <span class="number">1</span> <span class="keyword">and</span> Map[y + <span class="number">1</span>][x] != <span class="number">1</span> <span class="keyword">and</span> Map[y + <span class="number">1</span>][x + <span class="number">1</span>] != <span class="number">1</span>:</span><br><span class="line">            dfs(y + <span class="number">1</span>, x + <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 1244. [S/W 문제해결 응용] 2일차 - 최대 상금</title>
    <url>/2021/02/22/%5BSWEA%5D%201244.%20%5BSW%20%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%5D%202%EC%9D%BC%EC%B0%A8%20-%20%EC%B5%9C%EB%8C%80%20%EC%83%81%EA%B8%88/</url>
    <content><![CDATA[<h3 id="1244-S-W-문제해결-응용-2일차-최대-상금"><a href="#1244-S-W-문제해결-응용-2일차-최대-상금" class="headerlink" title="1244. [S/W 문제해결 응용] 2일차 - 최대 상금"></a>1244. [S/W 문제해결 응용] 2일차 - 최대 상금</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?problemLevel=3&contestProbId=AV15Khn6AN0CFAYD&categoryId=AV15Khn6AN0CFAYD&categoryType=CODE&problemTitle=&orderBy=INQUERY_COUNT&selectCodeLang=ALL&select-1=3&pageSize=10&pageIndex=1" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>visit 배열을 통해서 백트랙킹을 구현했고, 시간을 줄일 수 있었다.</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cnt)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> cnt == c:</span><br><span class="line">        res = max(res, int(<span class="string">''</span>.join(n)))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(n) - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, len(n)):</span><br><span class="line">            n[i], n[j] = n[j], n[i]</span><br><span class="line">            temp = int(<span class="string">''</span>.join(n))</span><br><span class="line">            <span class="keyword">if</span> temp <span class="keyword">not</span> <span class="keyword">in</span> visit[cnt + <span class="number">1</span>]:</span><br><span class="line">                visit[cnt + <span class="number">1</span>].add(temp)</span><br><span class="line">                dfs(cnt + <span class="number">1</span>)</span><br><span class="line">            n[i], n[j] = n[j], n[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    n, c = list(map(int, input().split()))</span><br><span class="line">    res = float(<span class="string">'-inf'</span>)</span><br><span class="line">    visit = [set() <span class="keyword">for</span> _ <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line">    n = (list(str(n)))</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc + <span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>backtracking</tag>
        <tag>swea</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 1206. [S/W 문제해결 기본] 1일차 - View</title>
    <url>/2021/02/22/%5BSWEA%5D%201206.%20%5BSW%20%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EA%B8%B0%EB%B3%B8%5D%201%EC%9D%BC%EC%B0%A8%20-%20View/</url>
    <content><![CDATA[<h3 id="1206-S-W-문제해결-기본-1일차-View"><a href="#1206-S-W-문제해결-기본-1일차-View" class="headerlink" title="1206. [S/W 문제해결 기본] 1일차 - View"></a>1206. [S/W 문제해결 기본] 1일차 - View</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?problemLevel=3&contestProbId=AV134DPqAA8CFAYh&categoryId=AV134DPqAA8CFAYh&categoryType=CODE&problemTitle=&orderBy=INQUERY_COUNT&selectCodeLang=ALL&select-1=3&pageSize=10&pageIndex=1" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(lis[i] - lis[i - <span class="number">1</span>], lis[i] - lis[i - <span class="number">2</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">right</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> min(lis[i] - lis[i + <span class="number">1</span>], lis[i] - lis[i + <span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    m = int(input())</span><br><span class="line">    lis = list(map(int, input().split()))</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">2</span>, m - <span class="number">2</span>):</span><br><span class="line">        l, r = left(idx), right(idx)</span><br><span class="line">        <span class="keyword">if</span> l &lt;= <span class="number">0</span> <span class="keyword">or</span> r &lt;= <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        res += min(l, r)</span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc + <span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>swea</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1941. 소문난 칠공주</title>
    <url>/2021/02/18/%5BBOJ%5D%201941.%20%EC%86%8C%EB%AC%B8%EB%82%9C%20%EC%B9%A0%EA%B3%B5%EC%A3%BC/</url>
    <content><![CDATA[<h3 id="1941-소문난-칠공주"><a href="#1941-소문난-칠공주" class="headerlink" title="1941. 소문난 칠공주"></a>1941. 소문난 칠공주</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1941" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>무작정 dfs를 돌렸는데 아니었다 :(</p><p>-&gt; dfs를 통해서 7명을 뽑으면 십자가같은 모양으로 뽑히는 경우를 발견하지 못함!</p><p>해결 방법</p><ol><li>조합을 통해 7명을 뽑는다.</li><li>‘S’가 4이상인지 확인한다.</li><li>2를 만족했을 경우, 모두 인접해 있는지 체크한다.</li></ol>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">girls = [input().rstrip() <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">selc = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> comb <span class="keyword">in</span> combinations(selc, <span class="number">7</span>):</span><br><span class="line">    s_cnt = <span class="number">0</span></span><br><span class="line">    visit = [[<span class="number">0</span>] * <span class="number">5</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> comb:</span><br><span class="line">        <span class="keyword">if</span> girls[i//<span class="number">5</span>][i%<span class="number">5</span>] == <span class="string">'S'</span>:</span><br><span class="line">            s_cnt += <span class="number">1</span></span><br><span class="line">        visit[i//<span class="number">5</span>][i%<span class="number">5</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> s_cnt &lt; <span class="number">4</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        q = deque()</span><br><span class="line">        q.append((comb[<span class="number">0</span>]//<span class="number">5</span>, comb[<span class="number">0</span>]%<span class="number">5</span>))</span><br><span class="line">        t = <span class="number">7</span></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            y, x = q.popleft()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                ny = y + dy[a]</span><br><span class="line">                nx = x + dx[a]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; <span class="number">5</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; <span class="number">5</span> <span class="keyword">and</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">0</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line">                    t -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> t == <span class="number">0</span>: res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>combination</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1717. 집합의 표현</title>
    <url>/2021/02/18/%5BBOJ%5D%201717.%20%EC%A7%91%ED%95%A9%EC%9D%98%20%ED%91%9C%ED%98%84/</url>
    <content><![CDATA[<h3 id="1717-집합의-표현"><a href="#1717-집합의-표현" class="headerlink" title="1717. 집합의 표현"></a>1717. 집합의 표현</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1717" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <h4 id="Union-Find-참고"><a href="#Union-Find-참고" class="headerlink" title="Union-Find  참고!"></a>Union-Find  <a href="https://jinyeop-yang.github.io/2021/02/27/%5BAlgorithm%5D%20%EC%9C%A0%EB%8B%88%EC%98%A8%20%ED%8C%8C%EC%9D%B8%EB%93%9C%20(Union-Find)/">참고!</a></h4><ul><li>여러 노드가 존재할 때, 두 개의 노드를 선택해서 현재 두 노드가 서로 같은 그래프에 속하는지 판별하는 알고리즘</li><li>상호 배타적 집합 (Disjoint-set) 이라고도 한다.</li></ul><p>재귀를 사용하다보니 <code>recursion error</code>가 발생해서 재귀 최대 횟수를 늘려주었다.</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10</span>**<span class="number">5</span>) <span class="comment"># recursion Error</span></span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">parent = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> t == parent[t]:</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">    parent[t] = find(parent[t])</span><br><span class="line">    <span class="keyword">return</span> parent[t]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    a = find(a)</span><br><span class="line">    b = find(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &lt; b: parent[b] = a</span><br><span class="line">    <span class="keyword">else</span>: parent[a] = b</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">    c, a, b = map(int, input().split())</span><br><span class="line">    <span class="keyword">if</span> c:</span><br><span class="line">        <span class="keyword">if</span> find(a) == find(b):</span><br><span class="line">            print(<span class="string">'YES'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'NO'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        union(a, b)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>Union Find</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 11404. 플로이드</title>
    <url>/2021/02/17/%5BBOJ%5D%2011404.%20%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C/</url>
    <content><![CDATA[<h3 id="11404-플로이드"><a href="#11404-플로이드" class="headerlink" title="11404. 플로이드"></a>11404. 플로이드</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/11404" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <h4 id="플로이드-와샬-Floyd-Warshall"><a href="#플로이드-와샬-Floyd-Warshall" class="headerlink" title="플로이드 와샬(Floyd - Warshall)"></a>플로이드 와샬(Floyd - Warshall)</h4><ul><li><strong>모든 정점</strong>에서 <strong>모든 정점</strong>으로 가는 최단 경로를 구하는 알고리즘</li></ul>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">n = int(input())</span><br><span class="line">m = int(input())</span><br><span class="line">Map = [[float(<span class="string">'inf'</span>) <span class="keyword">if</span> i != j <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> range(n)] <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(m):</span><br><span class="line">    y, x, v = list(map(int, input().split()))</span><br><span class="line">    Map[y<span class="number">-1</span>][x<span class="number">-1</span>] = min(Map[y<span class="number">-1</span>][x<span class="number">-1</span>], v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            Map[i][j] = min(Map[i][k] + Map[k][j], Map[i][j])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> Map:</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> m:</span><br><span class="line">        print(<span class="number">0</span> <span class="keyword">if</span> e == float(<span class="string">'inf'</span>) <span class="keyword">else</span> e, end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>graph</tag>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>Floyd-Warshall</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16954. 움직이는 미로 탈출</title>
    <url>/2021/02/17/%5BBOJ%5D%2016954.%20%EC%9B%80%EC%A7%81%EC%9D%B4%EB%8A%94%20%EB%AF%B8%EB%A1%9C%20%ED%83%88%EC%B6%9C/</url>
    <content><![CDATA[<h3 id="16954-움직이는-미로-탈출"><a href="#16954-움직이는-미로-탈출" class="headerlink" title="16954. 움직이는 미로 탈출"></a>16954. 움직이는 미로 탈출</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16954" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>위로 이동하는 거라서 위쪽으로 이동하는 것만 좌표로 넣었는데 큰 착오였다!</p><p>visit를 유지하는 것이 아니라 계속 초기화 해줘야 했다!</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(y, x)</span>:</span></span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((y, x))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        visit = [[<span class="number">0</span>] * <span class="number">8</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>)]</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(q)):</span><br><span class="line">            y, x = q.popleft()</span><br><span class="line">            <span class="keyword">if</span> (y, x) == (<span class="number">7</span>, <span class="number">0</span>): <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> Map[y][x] == <span class="string">'#'</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">                ny = y + dy[i]</span><br><span class="line">                nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; <span class="number">8</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; <span class="number">8</span> <span class="keyword">and</span> Map[ny][nx] == <span class="string">'.'</span> <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line"></span><br><span class="line">        Map.pop()</span><br><span class="line">        Map.insert(<span class="number">0</span>, [<span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Map = [list(input().rstrip()) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>)]</span><br><span class="line">print(move(<span class="number">7</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 2206. 벽 부수고 이동하기</title>
    <url>/2021/02/15/%5BBOJ%5D%202206.%20%EB%B2%BD%20%EB%B6%80%EC%88%98%EA%B3%A0%20%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="2206-벽-부수고-이동하기"><a href="#2206-벽-부수고-이동하기" class="headerlink" title="2206. 벽 부수고 이동하기"></a>2206. 벽 부수고 이동하기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/2206" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p>3중 for문 헷갈렸음.. ㅠ</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections, sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">()</span>:</span></span><br><span class="line">    q = collections.deque()</span><br><span class="line">    q.append((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    visit[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x, c, t = q.popleft()</span><br><span class="line">        <span class="keyword">if</span> y == N - <span class="number">1</span> <span class="keyword">and</span> x == M - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[idx]</span><br><span class="line">            nx = x + dx[idx]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="keyword">if</span> c:</span><br><span class="line">                    <span class="keyword">if</span> Map[ny][nx] == <span class="string">'1'</span>: <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> visit[ny][nx][c]:</span><br><span class="line">                            visit[ny][nx][c] = <span class="number">1</span></span><br><span class="line">                            q.append((ny, nx, c, t + <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> visit[ny][nx][c]:</span><br><span class="line">                        <span class="keyword">if</span> Map[ny][nx] == <span class="string">'1'</span>:</span><br><span class="line">                            visit[ny][nx][c + <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">                            q.append((ny, nx, c + <span class="number">1</span>, t + <span class="number">1</span>))</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            visit[ny][nx][c] = <span class="number">1</span></span><br><span class="line">                            q.append((ny, nx, c, t + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">visit = [[[<span class="number">0</span>] * <span class="number">2</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(M)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">print(bfs())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16197. 두 동전</title>
    <url>/2021/02/15/%5BBOJ%5D%2016197.%20%EB%91%90%20%EB%8F%99%EC%A0%84/</url>
    <content><![CDATA[<h3 id="16197-두-동전"><a href="#16197-두-동전" class="headerlink" title="16197. 두 동전"></a>16197. 두 동전</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16197" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">input = sys.stdin.readline</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(y1, x1, y2, x2, t, idx)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> res &lt; t: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> t &gt; <span class="number">10</span>:</span><br><span class="line">        res = min(res, t)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    ny1, ny2 = y1 + dy[idx], y2 + dy[idx]</span><br><span class="line">    nx1, nx2 = x1 + dx[idx], x2 + dx[idx]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ny1 <span class="keyword">or</span> ny1 &gt;= n <span class="keyword">or</span> <span class="number">0</span> &gt; nx1 <span class="keyword">or</span> nx1 &gt;= m) <span class="keyword">and</span> (<span class="number">0</span> &gt; ny2 <span class="keyword">or</span> ny2 &gt;= n <span class="keyword">or</span> <span class="number">0</span> &gt; nx2 <span class="keyword">or</span> nx2 &gt;= m): <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt; ny1 <span class="keyword">or</span> ny1 &gt;= n <span class="keyword">or</span> <span class="number">0</span> &gt; nx1 <span class="keyword">or</span> nx1 &gt;= m) <span class="keyword">and</span> (<span class="number">0</span> &lt;= ny2 &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= nx2 &lt; m):</span><br><span class="line">        res = min(res, t)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &lt;= ny1 &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= nx1 &lt; m) <span class="keyword">and</span> (<span class="number">0</span> &gt; ny2 <span class="keyword">or</span> ny2 &gt;= n <span class="keyword">or</span> <span class="number">0</span> &gt; nx2 <span class="keyword">or</span> nx2 &gt;= m):</span><br><span class="line">        res = min(res, t)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> Map[ny1][nx1] == <span class="string">'#'</span>: ny1, nx1 = y1, x1</span><br><span class="line">    <span class="keyword">if</span> Map[ny2][nx2] == <span class="string">'#'</span>: ny2, nx2 = y2, x2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        solution(ny1, nx1, ny2, nx2, t + <span class="number">1</span>, a)</span><br><span class="line"></span><br><span class="line">n, m = map(int, input().split())</span><br><span class="line">Map = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">coin = deque()</span><br><span class="line">res = float(<span class="string">'inf'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'o'</span>:</span><br><span class="line">            coin.append((i, j))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    solution(coin[<span class="number">0</span>][<span class="number">0</span>], coin[<span class="number">0</span>][<span class="number">1</span>], coin[<span class="number">1</span>][<span class="number">0</span>], coin[<span class="number">1</span>][<span class="number">1</span>], <span class="number">1</span>, idx)</span><br><span class="line">print(res <span class="keyword">if</span> res &lt;= <span class="number">10</span> <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] Counter</title>
    <url>/2021/02/11/%5BPython%5D%20Counter/</url>
    <content><![CDATA[<div class="note info">
            <p><code>Python</code> 에는 요소 갯수를 세어주는 함수가 존재한다.</p><p><code>Counter</code> 라는 메소드인데 <code>collections</code> 에서 가져올 수 있다.</p><p>해당 요소가 몇 개있는지 개수를 세어준 후 반환해 준다.</p><p>유용하게 쓸 수 있을 법한 메소드!!</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Collections <span class="keyword">import</span> Counter</span><br><span class="line">A = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">B = Counter(A)</span><br><span class="line">print(B)</span><br><span class="line"><span class="comment"># 결과 : Counter(&#123;1: 3, 2: 2, 3: 1&#125;)</span></span><br><span class="line">print(B[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 결과 : 3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>collections</tag>
        <tag>Counter</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 6087. 레이저 통신</title>
    <url>/2021/02/10/%5BBOJ%5D%206087.%20%EB%A0%88%EC%9D%B4%EC%A0%80%20%ED%86%B5%EC%8B%A0/</url>
    <content><![CDATA[<h3 id="6087-레이저-통신"><a href="#6087-레이저-통신" class="headerlink" title="6087. 레이저 통신"></a>6087. 레이저 통신</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/6087" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ul><li>같은 변수 이름 사용하지 않기!</li><li>한 방향을 이동할 수 있는 끝까지 이동!</li></ul>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">lis = list(map(int, input().split()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">        lis[i] = max(lis[i], lis[i - <span class="number">1</span>] + lis[i])</span><br><span class="line">print(max(lis))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 20058. 마법사 상어와 파이어스톰</title>
    <url>/2021/01/30/%5BBOJ%5D%2020058.%20%EB%A7%88%EB%B2%95%EC%82%AC%20%EC%83%81%EC%96%B4%EC%99%80%20%ED%8C%8C%EC%9D%B4%EC%96%B4%EC%8A%A4%ED%86%B0/</url>
    <content><![CDATA[<h3 id="20058-마법사-상어와-파이어스톰"><a href="#20058-마법사-상어와-파이어스톰" class="headerlink" title="20058. 마법사 상어와 파이어스톰"></a>20058. 마법사 상어와 파이어스톰</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/20058" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">melt</span><span class="params">()</span>:</span></span><br><span class="line">    t = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            ctemp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                ny = i + dy[d]</span><br><span class="line">                nx = j + dx[d]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> A[ny][nx] &gt; <span class="number">0</span>:</span><br><span class="line">                    ctemp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> ctemp &lt; <span class="number">3</span>:</span><br><span class="line">                t.append((i, j))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y, x <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> A[y][x] &gt; <span class="number">0</span>:</span><br><span class="line">            A[y][x] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt, res</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            cnt += A[i][j]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> A[i][j] <span class="keyword">and</span> <span class="keyword">not</span> visit[i][j]:</span><br><span class="line">                q = deque()</span><br><span class="line">                q.append((i, j))</span><br><span class="line">                visit[i][j] = <span class="number">1</span></span><br><span class="line">                t = <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> q:</span><br><span class="line">                    y, x = q.popleft()</span><br><span class="line">                    <span class="keyword">for</span> d <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                        ny = y + dy[d]</span><br><span class="line">                        nx = x + dx[d]</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> A[ny][nx] &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                            t += <span class="number">1</span></span><br><span class="line">                            visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                            q.append((ny, nx))</span><br><span class="line"></span><br><span class="line">                res = max(res, t)</span><br><span class="line"></span><br><span class="line">N, Q = map(int, input().split())</span><br><span class="line">N = <span class="number">2</span> ** N</span><br><span class="line">A = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">L = map(int, input().split())</span><br><span class="line">cnt = res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> L:</span><br><span class="line">    temp = <span class="number">2</span> ** l</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, N, temp): <span class="comment"># 얼음 이동</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, N, temp):</span><br><span class="line">            t = []</span><br><span class="line">            idx = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> range(j, j + temp):</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> range(i + temp - <span class="number">1</span>, i - <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">                    t.append(A[b][a])</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> range(i, i + temp):</span><br><span class="line">                <span class="keyword">for</span> b <span class="keyword">in</span> range(j, j + temp):</span><br><span class="line">                    A[a][b] = t[idx]</span><br><span class="line">                    idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 얼음 녹이기</span></span><br><span class="line">    melt()</span><br><span class="line"><span class="comment"># 카운트</span></span><br><span class="line">check()</span><br><span class="line"></span><br><span class="line">print(cnt)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 20056. 마법사 상어와 파이어볼</title>
    <url>/2021/01/29/%5BBOJ%5D%2020056.%20%EB%A7%88%EB%B2%95%EC%82%AC%20%EC%83%81%EC%96%B4%EC%99%80%20%ED%8C%8C%EC%9D%B4%EC%96%B4%EB%B3%BC/</url>
    <content><![CDATA[<h3 id="20056-마법사-상어와-파이어볼"><a href="#20056-마법사-상어와-파이어볼" class="headerlink" title="20056. 마법사 상어와 파이어볼"></a>20056. 마법사 상어와 파이어볼</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/20056" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <p><a href="https://jinyeop-yang.github.io/2021/01/28/%5BPython%5D%20'%25'%20%EC%9D%98%20%EC%9D%8C%EC%88%98%20%EC%97%B0%EC%82%B0/">인덱스 관련 참고해야 할 부분!!!!</a></p><p>시간 줄이는 방법</p><ul><li>Map 전체를 돌지 말고 deque 하나 생성해서 이동할 파이어볼 좌표만 넣어두고 움직이면 시간 줄일 수 있다!<ul><li>해본 후기 적기-</li></ul></li></ul>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> _collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">N, M, K = map(int, input().split())</span><br><span class="line">Map = [[deque() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, m, s, d = map(int, input().split())</span><br><span class="line">    Map[y - <span class="number">1</span>][x - <span class="number">1</span>].append((m, s, d))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    temp = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 이동</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(Map[i][j])):</span><br><span class="line">                m, s, d = Map[i][j].popleft()</span><br><span class="line">                ny = (s * dy[d] + i) % N</span><br><span class="line">                nx = (s * dx[d] + j) % N</span><br><span class="line">                temp.append((ny, nx, m, s, d))</span><br><span class="line">            Map[i][j].clear()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> y, x, m, s, d <span class="keyword">in</span> temp:</span><br><span class="line">        Map[y][x].append((m, s, d))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> len(Map[i][j]) &gt;= <span class="number">2</span>:</span><br><span class="line">                nm = ns = cnt = even = odd = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> m, s, d <span class="keyword">in</span> Map[i][j]:</span><br><span class="line">                    nm += m</span><br><span class="line">                    ns += s</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> d % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                        odd += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        even += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                ns = ns // cnt</span><br><span class="line">                nm = nm // <span class="number">5</span></span><br><span class="line">                Map[i][j].clear()</span><br><span class="line">                <span class="keyword">if</span> nm != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> (even &gt; <span class="number">0</span> <span class="keyword">and</span> odd == <span class="number">0</span>) <span class="keyword">or</span> (even == <span class="number">0</span> <span class="keyword">and</span> odd &gt; <span class="number">0</span>):</span><br><span class="line">                        <span class="keyword">for</span> nd <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>):</span><br><span class="line">                            Map[i][j].append((nm, ns, nd))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> nd <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>):</span><br><span class="line">                            Map[i][j].append((nm, ns, nd))</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j]:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> Map[i][j]:</span><br><span class="line">                res += k[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python] Modulo의 음수 연산</title>
    <url>/2021/01/28/%5BPython%5D%20&#39;%25&#39;%20%EC%9D%98%20%EC%9D%8C%EC%88%98%20%EC%97%B0%EC%82%B0/</url>
    <content><![CDATA[<div class="note info">
            <p>-A % B 가 있으면, -A에다가 B를 계속 더하면서 처음으로 양수가 되었을 때 B로 나눈 나머지를 반환한다.</p><p>ex) -1 % 10 : -1 + 10 = 9 , 9 % 10 =&gt; 10</p><p>A % -B 의 경우에는, A에다가 -B를 계속 더하면서 처음으로 음수가 되었을 때, 부호를 뗀 계산을 하고 -를 붙여준다.</p><p>ex) 10 % -4 : 10 - 4 = 6 - 4 = 2 - 4 = -2, 2 % 4 =&gt; 2, 즉 -2</p><p>ex) 9 % -4 : 9 - 4 = 5 - 4 = 1 - 4 = -3, 3 % 4 =&gt; 3, 즉 -3</p>
          </div>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 20057. 마법사 상어와 토네이도</title>
    <url>/2021/01/26/%5BBOJ%5D%2020057.%20%EB%A7%88%EB%B2%95%EC%82%AC%20%EC%83%81%EC%96%B4%EC%99%80%20%ED%86%A0%EB%84%A4%EC%9D%B4%EB%8F%84/</url>
    <content><![CDATA[<h3 id="20057-마법사-상어와-토네이도"><a href="#20057-마법사-상어와-토네이도" class="headerlink" title="20057. 마법사 상어와 토네이도"></a>20057. 마법사 상어와 토네이도</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/20057" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">y = x = N // <span class="number">2</span></span><br><span class="line">temp = res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">d = [[(<span class="number">-1</span>, <span class="number">1</span>), (<span class="number">-2</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">-2</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">-1</span>)],</span><br><span class="line">     [(<span class="number">-1</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">-2</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">1</span>, <span class="number">-1</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>)],</span><br><span class="line">     [(<span class="number">-1</span>, <span class="number">-1</span>), (<span class="number">-2</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">-1</span>), (<span class="number">2</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>)],</span><br><span class="line">     [(<span class="number">1</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">-2</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">-1</span>, <span class="number">-1</span>), (<span class="number">-2</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">-1</span>, <span class="number">1</span>), (<span class="number">-1</span>, <span class="number">0</span>)]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(n * <span class="number">0.01</span>), int(n * <span class="number">0.02</span>), int(n * <span class="number">0.05</span>), int(n * <span class="number">0.07</span>), int(n * <span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(y, x, n, one, two, fiv, sev, ten, total)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="comment"># 1, 2, 7, 10, 5, 1, 2, 7, 10, a</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        ny = y + d[n][i][<span class="number">0</span>]</span><br><span class="line">        nx = x + d[n][i][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>: Map[ny][nx] += one</span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">1</span>: Map[ny][nx] += two</span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">2</span>: Map[ny][nx] += sev</span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">3</span>: Map[ny][nx] += ten</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">4</span>: Map[ny][nx] += fiv</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">9</span>: Map[ny][nx] += (total - fiv - <span class="number">2</span> * (one + two + sev + ten))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">5</span> == <span class="number">0</span>: res += one</span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">1</span>: res += two</span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">2</span>: res += sev</span><br><span class="line">            <span class="keyword">elif</span> i % <span class="number">5</span> == <span class="number">3</span>: res += ten</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">4</span>: res += fiv</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">9</span>: res += (total - fiv - (<span class="number">2</span> * (one + two + sev + ten)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment"># 좌 하 우 상</span></span><br><span class="line">    temp += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(temp):</span><br><span class="line">        x -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">            n, Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">            one, two, fiv, sev, ten = cal(n)</span><br><span class="line">            check(y, x, <span class="number">0</span>, one, two, fiv, sev, ten, n)</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(temp):</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line">        n, Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">        one, two, fiv, sev, ten = cal(n)</span><br><span class="line">        check(y, x, <span class="number">1</span>, one, two, fiv, sev, ten, n)</span><br><span class="line">    temp += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(temp):</span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        n, Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">        one, two, fiv, sev, ten = cal(n)</span><br><span class="line">        check(y, x, <span class="number">2</span>, one, two, fiv, sev, ten, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(temp):</span><br><span class="line">        y -= <span class="number">1</span></span><br><span class="line">        n, Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">        one, two, fiv, sev, ten = cal(n)</span><br><span class="line">        check(y, x, <span class="number">3</span>, one, two, fiv, sev, ten, n)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 20055. 컨베이어 위의 벨트</title>
    <url>/2021/01/26/%5BBOJ%5D%2020055.%20%EC%BB%A8%EB%B2%A0%EC%9D%B4%EC%96%B4%20%EC%9C%84%EC%9D%98%20%EB%A1%9C%EB%B4%87/</url>
    <content><![CDATA[<h3 id="20055-컨베이어-위의-벨트"><a href="#20055-컨베이어-위의-벨트" class="headerlink" title="20055. 컨베이어 위의 벨트"></a>20055. 컨베이어 위의 벨트</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/20055" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ul><li>시간을 좀 줄일 수 있다.<ul><li>로봇은 0 ~ n - 1사이에서만 움직이기 때문에 모든 n 값을 확인 할 필요가 없다.</li><li>마지막 n - 1에서 로봇이 내려가는 걸 처리해줬다고 생각했는데 꼬여서 시간을 좀 잡아먹었다.</li></ul></li><li>다시 풀어보기!</li></ul>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, k = map(int, input().split())</span><br><span class="line">belt = list(map(int, input().split()))</span><br><span class="line">robot = [<span class="number">0</span>] * (len(belt))</span><br><span class="line">res, cnt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    belt = [belt[<span class="number">-1</span>]] + belt[:<span class="number">-1</span>]</span><br><span class="line">    robot = [robot[<span class="number">-1</span>]] + robot[:<span class="number">-1</span>]</span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n * <span class="number">2</span> - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> robot[i]:</span><br><span class="line">            temp.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> temp[::<span class="number">-1</span>]:</span><br><span class="line">        <span class="keyword">if</span> robot[i]:</span><br><span class="line">            <span class="comment"># 로봇이 있을 때 n - 1 / 2n - 1 / 그 외</span></span><br><span class="line">            <span class="keyword">if</span> i == n - <span class="number">1</span>:</span><br><span class="line">                robot[i] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> i == (n * <span class="number">2</span>) - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> belt[<span class="number">0</span>] &lt;= <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> robot[<span class="number">0</span>] == <span class="number">0</span> <span class="keyword">and</span> belt[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                    belt[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">                    robot[i] = <span class="number">0</span></span><br><span class="line">                    robot[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> robot[i + <span class="number">1</span>] == <span class="number">0</span> <span class="keyword">and</span> belt[i + <span class="number">1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">                    belt[i + <span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">                    robot[i] = <span class="number">0</span></span><br><span class="line">                    robot[i + <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> robot[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> belt[<span class="number">0</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> robot[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">            robot[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">            belt[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    res += <span class="number">1</span></span><br><span class="line">    robot[n<span class="number">-1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> belt.count(<span class="number">0</span>) &gt;= k:</span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 1912. 연속합</title>
    <url>/2021/01/19/%5BBOJ%5D%201912.%20%EC%97%B0%EC%86%8D%ED%95%A9/</url>
    <content><![CDATA[<h3 id="1912-연속합"><a href="#1912-연속합" class="headerlink" title="1912. 연속합"></a>1912. 연속합</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/1912" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <h6 id="Integer-parseInt-String-s"><a href="#Integer-parseInt-String-s" class="headerlink" title="Integer.parseInt(String s)"></a>Integer.parseInt(String s)</h6><ul><li>숫자형의 문자열을 받아서 10진수로 반환</li></ul><h6 id="Integer-parseInt-String-s-int-radix"><a href="#Integer-parseInt-String-s-int-radix" class="headerlink" title="Integer.parseInt(String s, int radix)"></a>Integer.parseInt(String s, int radix)</h6><ul><li><code>radix</code>에 있는 진수의 숫자형의 문자열을 받아서 10진수로 반환</li><li>ex) <ul><li>Integer.parseInt(“1004”, 8) : 8진수로 표현된  1004를 10진수로 반환 -&gt; 516</li><li>Integer.parseInt(“1000”, 2) : 2진수로 표현된  1000를 10진수로 반환 -&gt; 8</li></ul></li></ul>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">lis = list(map(int, input().split()))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</span><br><span class="line">        lis[i] = max(lis[i], lis[i - <span class="number">1</span>] + lis[i])</span><br><span class="line">print(max(lis))</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span> arr[MAX] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">	<span class="keyword">int</span> res = arr[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">		arr[i] = <span class="built_in">max</span>(arr[i], arr[i - <span class="number">1</span>] + arr[i]);</span><br><span class="line">		res = <span class="built_in">max</span>(res, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, t, s = <span class="number">0</span>, res = <span class="number">-1000</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">		res = <span class="built_in">max</span>(res, s = <span class="built_in">max</span>(s + t, t));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, res);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		<span class="keyword">int</span> n = Integer.parseInt(br.readLine());</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">0</span>, res = -<span class="number">1000</span>;</span><br><span class="line">		<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">		</span><br><span class="line">		StringTokenizer st = <span class="keyword">new</span> StringTokenizer(br.readLine(), <span class="string">" "</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> temp = Integer.parseInt(st.nextToken());</span><br><span class="line">			res = Math.max(res, s = Math.max(temp, s + temp));</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(res);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>java</tag>
        <tag>dp</tag>
        <tag>dynamic programming</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 10814. 나이순 정렬</title>
    <url>/2021/01/18/%5BBOJ%5D%2010814.%20%EB%82%98%EC%9D%B4%EC%88%9C%20%EC%A0%95%EB%A0%AC/</url>
    <content><![CDATA[<h3 id="10814-나이순-정렬"><a href="#10814-나이순-정렬" class="headerlink" title="10814. 나이순 정렬"></a>10814. 나이순 정렬</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/10814" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <blockquote><p><code>string</code> 클래스를 <code>printf</code>로 출력하려면 <code>c_str()</code>을 적어줘야 함.</p><p>ex) printf(“%s”, 이름<strong>.c_str()</strong>)</p></blockquote>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lis = []</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    age, name = input().split()</span><br><span class="line">    lis.append((int(age), name))</span><br><span class="line">lis.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    print(i[<span class="number">0</span>], i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> a;</span><br><span class="line">		<span class="built_in">string</span> b;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		v.push_back(make_pair(a,b));</span><br><span class="line">	&#125;</span><br><span class="line">	sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %s\n"</span>, v[i].first, v[i].second.c_str());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 9012. 괄호</title>
    <url>/2021/01/17/%5BBOJ%5D%209012.%20%EA%B4%84%ED%98%B8/</url>
    <content><![CDATA[<h3 id="9012-괄호"><a href="#9012-괄호" class="headerlink" title="9012. 괄호"></a>9012. 괄호</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/9012" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note info">
            <h5 id="Scanner-vs-BufferedReader"><a href="#Scanner-vs-BufferedReader" class="headerlink" title="Scanner vs BufferedReader"></a>Scanner vs BufferedReader</h5><h6 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception </span>&#123; <span class="comment">//예외처리 필수</span></span><br><span class="line">        <span class="comment">// BufferedReader는 Exception이 처리를 따로 해줘야 하기 때문에 throws를 해주거나 </span></span><br><span class="line">        <span class="comment">// try ~ catch로 예외처리를 해줘야 한다.</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>속도면에서 BufferedReader가 빠르다!</p><p>BufferedReader는 버퍼를 이용하므로, 버퍼가 가득 차거나, 개행 문자가 나타나면 버퍼의 내용을 전송한다.</p></blockquote><h5 id="StringTokenizer"><a href="#StringTokenizer" class="headerlink" title="StringTokenizer"></a>StringTokenizer</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 예시</span></span><br><span class="line">        String a = <span class="string">"성=hong&amp;이름=possible&amp;키=큼"</span>;</span><br><span class="line">        StringTokenizer st = <span class="keyword">new</span> StringTokenizer(a, <span class="string">"&amp;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>하나의 구분자를 이용할 수 있다.</p></blockquote><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"ABC"</span>);</span><br><span class="line">        sb.append(<span class="string">"DEF"</span>);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>String은 immutable</p><p>StringBuffer와 StringBuilder의 차이는 <strong>동기화 유무</strong>!</p><p>동기화 O       /    동기화 X</p><p>멀티쓰레드   /    단일쓰레드    에서 각각 성능이 좋다.     </p></blockquote>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    lis = list(input())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">'('</span>:</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            a -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"YES"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"NO"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">"NO"</span>)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N, n, b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">	<span class="keyword">char</span> s[MAX];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">		<span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">		n = b = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">			n += (s[j] == <span class="string">'('</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">				b = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!b) &#123;</span><br><span class="line">			<span class="keyword">if</span> (n != <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		<span class="keyword">int</span> T = Integer.parseInt(br.readLine());</span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			String str = br.readLine();</span><br><span class="line">			<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;str.length(); i++) &#123;</span><br><span class="line">				<span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(c == <span class="string">'('</span>)&#123;</span><br><span class="line">					cnt++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span>(cnt == <span class="number">0</span>) &#123;</span><br><span class="line">						cnt = -<span class="number">1</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					cnt--;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			sb.append((cnt &gt; <span class="number">0</span> || cnt == -<span class="number">1</span>) ? <span class="string">"NO\n"</span> : <span class="string">"YES\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(sb);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>java</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>[OS] Process and Thread</title>
    <url>/2020/11/01/%5BOS%5D%20Process%20and%20Thread/</url>
    <content><![CDATA[<h3 id="프로세스와-스레드"><a href="#프로세스와-스레드" class="headerlink" title="프로세스와 스레드"></a>프로세스와 스레드</h3><h4 id="프로세스-Process"><a href="#프로세스-Process" class="headerlink" title="프로세스(Process)"></a>프로세스(Process)</h4><blockquote>
<p>프로세스는 실행 중인 프로그램으로 디스크로부터 메모리에 적재되어 CPU의 할당을 받을 수 있는 것을 말한다. 운영체제로부터 주소 공간, 파일, 메모리 등을 할당받으며 이것들을 총칭하여 <strong><em>프로세스</em></strong> 라고 한다.</p>
<p>구체적으로 살펴보면 프로세스는 함수의 매개변수, 복귀 주소와 로컬 변수와 같은 임시 자료를 갖는 프로세스 스택과 전역 변수들을 수록하는 데이터 섹션을 포함한다. 또한, 프로세스는 프로세스 실행 중에 동적으로 할당되는 메모리인 힙을 포함한다.</p>
</blockquote>
<h5 id="프로세스-제어-블록-PCB-Process-Control-Block"><a href="#프로세스-제어-블록-PCB-Process-Control-Block" class="headerlink" title="프로세스 제어 블록(PCB, Process Control Block)"></a>프로세스 제어 블록(PCB, Process Control Block)</h5><blockquote>
<p><strong>PCB</strong>는 <strong>특정 프로세스에 대한 중요한 정보를 저장하고 있는 운영체제의 자료구조</strong>이다.  운영체제는 프로세스를 관리하기 위해 <strong>프로세스의 생성과 동시에 고유한 PCB를 생성</strong>한다. 프로세스는 CPU를 할당받아 작업을 처리하다가도 프로세스 전환이 발생하면 진행하던 작업을 저장하고 CPU를 반환해야 하는데, 이 때 작업의 진행 상황을 모두 PCB에 저장하게 된다. 그리고 다시 CPU를 할당받게 되면 PCB에 저장되어있던 내용을 불러와 이전에 종료됐던 시점부터 다시 작업을 수행한다.</p>
</blockquote>
<a id="more"></a>

<ul>
<li>PCB에 저장되는 정보<ul>
<li>프로세스 식별자 (Process ID, PID)</li>
<li>프로세스 상태 : new, ready, running, waiting, terminated 등의 상태 저장</li>
<li>프로그램 카운터( PC ) : 프로세스가 다음에 실행할 명령어의 주소</li>
<li>CPU 레지스터</li>
<li>CPU 스케쥴링 정보 : 프로세스의 우선순위, 스케줄 큐에 대한 포인터 등</li>
<li>메모리 관리 정보 : 페이지 테이블 또는 세그먼트 테이블 등과 같은 정보를 포함</li>
<li>입출력 상태 정보 : 프로세스에 할당된 입출력 장치들과 열린 파일 목록</li>
<li>어카운팅 정보 : 사용된 CPU시간, 시간제한, 계정번호 등</li>
</ul>
</li>
</ul>
<div style="display: flex">
    <img src="/images/process.png" alt="process" width="300">
    <img src="/images/memory.png" alt="memory" width="300">
</div>



<p>프로세스는 각각 독립된 메모리 영역 (Code, Data, Stack, Heap)을 할당받는다.</p>
<ul>
<li><p>Code</p>
<ul>
<li><strong>사용자가 작성하는 소스코드 or 함수, 제어문, 상수 등</strong>이 저장되는 영역</li>
<li>프로그램이 시작하고 끝날 때까지 메모리에 적재</li>
</ul>
</li>
<li><p>Data</p>
<ul>
<li><strong>전역 변수 or Static 변수</strong>가 저장되는 영역</li>
<li>프로그램 실행 시  할당되고 끝날 때까지 메모리에 적재</li>
<li>BSS 영역과 Data 영역으로 나뉜다.<ul>
<li>BSS(Block Stated Symbol) 영역<ul>
<li>초기화가 되지 않은 변수들이 저장</li>
</ul>
</li>
<li>Data 영역<ul>
<li>초기화가 이루어진 변수들이 저장</li>
<li>ROM에 위치하는데, 전역변수와 Static 변수를 ROM에 저장하면 런타임 시 변경된 값이 적용되지 않고, 계속 초기값만 가지고 있게 된다( ROM = Read Only ). 그래서 RAM에 복사해서 런타임 시 변경되는 값을 저장할 수 있도록 함</li>
</ul>
</li>
</ul>
</li>
<li>BSS 영역과 Data영역을 나누는 이유?<ul>
<li>초기화되지 않은 데이터들까지 ROM에 저장되면 큰 사이즈의 ROM이 필요하기 때문</li>
</ul>
</li>
</ul>
</li>
<li><p>Stack</p>
<ul>
<li>함수 호출 시 생성되는 <strong>지역 변수와 매개 변수</strong>가 저장</li>
<li>즉, 함수 호출시 할당되며 함수가 종료되면 시스템에 반환되는 메모리 영역</li>
<li>컴파일 시, 크기가 결정</li>
<li>메모리의 높은 주소에서 메모리의 낮은 주소로 할당</li>
<li>Heap의 메모리 영역 침범시 Stack overflow 발생</li>
</ul>
</li>
<li><p>Heap</p>
<ul>
<li>사용자가 <strong>동적으로 할당하고 해제</strong>하는 메모리 영역</li>
<li>C / C++ : malloc(), new[]로 할당하고 free(), delete[]를 통해 해제</li>
<li>런타임 시, 크기가 결정</li>
<li>메모리의 낮은 주소에서 메모리의 높은 주소로 할당</li>
<li>Stack의 메모리 영역 침범시 Heap overflow 발생</li>
</ul>
</li>
</ul>
<h5 id="멀티-프로세스"><a href="#멀티-프로세스" class="headerlink" title="멀티 프로세스"></a>멀티 프로세스</h5><ul>
<li>멀티 프로세싱 : 하나의 응용 프로그램을 여러 개의 프로세스로 구성하여 각 프로세스가 하나의 작업(Task)를 처리하도록 하는 것</li>
<li>장점 : 여러 개의 자식 프로세스 중 하나에 문제가 발생하면, 그 자식 프로세스만 죽는 것 이상으로 다른 영향이 확산되지 않는다.</li>
<li>단점 : Context Switching에서의 오버헤드<ul>
<li>Context Switching과정에서 캐시 메모리 초기화 등 무거운 작업이 진행되고 많은 시간이 소모되는 등의 오버헤드가 발생</li>
<li>프로세스는 각각의 독립된 메모리 영역을 할당받았기 때문에 Context Switching발생 시, 캐시에 있는 모든 데이터를 리셋하고 다시 정보를 불러와야 한다.</li>
<li>프로세스 사이의 어렵고 복잡한 통신 기법(IPC)<ul>
<li>프로세스간의 변수를 공유할 수 없다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>Context Switching</code> : 하나의 프로세스가 CPU를 사용 중인 상태에서 다른 프로세스가 CPU를 사용하도록 하기 위해, 이전의 프로세스의 상태(<strong>문맥</strong>)를 보관하고 새로운 프로세스의 상태를 적재하는 작업</p>
<h4 id="스레드-Thread"><a href="#스레드-Thread" class="headerlink" title="스레드(Thread)"></a>스레드(Thread)</h4><blockquote>
<p>한 프로세스 내에서 동작되는 여러 실행 흐름의 단위이다. 프로세스 내에서 각각 Stack 영역만 따로 할당 받고, 나머지 Code, Data, Heap 영역은 공유한다.</p>
<div style="display: flex">
    <img src="/images/thread.png" alt="process" width="300">
   </div>

</blockquote>
<h5 id="멀티-스레드"><a href="#멀티-스레드" class="headerlink" title="멀티 스레드"></a>멀티 스레드</h5><ul>
<li>멀티 스레딩 : 하나의 응용프로그램을 여러 개의 스레드로 구성하고 각 스레드로 하여금 하나의 작업을 처리하도록 하는 것</li>
<li>장점<ul>
<li>시스템 자원 소모 감소(자원의 효율성 증대)<ul>
<li>시스템 콜이 줄어들어 자원을 효율적으로 관리할 수 있다.</li>
</ul>
</li>
<li>시스템 처리량 증가(처리 비용 감소)<ul>
<li>스레드 간 데이터를 주고 받는 것이 간단해지고 시스템 자원 소모가 줄어든다.</li>
<li>스레드 사이의 작업량이 작아 Context Switching이 빠르다.</li>
</ul>
</li>
<li>간단한 통신 방법으로 인한 프로그램 응답 시간 단축<ul>
<li>Stack 영역을 제외한 모든 메모리 영역을 공유하기 때문에 통신의 부담이 적다.</li>
</ul>
</li>
</ul>
</li>
<li>단점<ul>
<li>주의 깊은 설계가 필요, 디버깅이 까다로움</li>
<li>단일 프로세스 시스템의 경우 효과를 기대하기 어려움</li>
<li>다른 프로세스에서 스레드를 제어할 수 없음</li>
<li>자원 공유의 문제(동기화) 발생</li>
<li>하나의 스레드에 문제가 발생하면 전체 프로세스가 영향을 받음</li>
</ul>
</li>
</ul>
<div class="note warning">
            <p>프로세스는 운영체제로부터 자원을 할당받는 작업의 단위이고, 스레드는 프로세스가 할당받은 자원을 이용하는 실행의 단위이다.</p><p>멀티 프로세스 대신 멀티 스레드를 사용하는 이유?</p><ol><li>자원의 효율성 증대</li><li>처리 비용 감소 및 응답 시간 단축</li></ol><p>하지만, 동기화 문제를 해결해 주어야 한다.</p>
          </div>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>process</tag>
        <tag>thread</tag>
        <tag>operating system</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17142. 연구소3</title>
    <url>/2020/10/10/%5BBOJ%5D%2017142.%20%EC%97%B0%EA%B5%AC%EC%86%8C3/</url>
    <content><![CDATA[<h3 id="17142-연구소3"><a href="#17142-연구소3" class="headerlink" title="17142. 연구소3"></a>17142. 연구소3</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17142" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>combinations, deque</p><p>비활성 바이러스는 거리 체크 X</p><p>BFS 탐색을 하며 최대 거리를 꾸준히 갱신</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = []</span><br><span class="line">q = deque()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(lis)</span>:</span></span><br><span class="line">    visit = [[<span class="number">-1</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    virus = deque()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> lis:</span><br><span class="line">        virus.append(v)</span><br><span class="line">        visit[v[<span class="number">0</span>]][v[<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    max_dist = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> virus:</span><br><span class="line">        y, x = virus.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[i]</span><br><span class="line">            nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> Map[ny][nx] != <span class="number">1</span> <span class="keyword">and</span> visit[ny][nx] == <span class="number">-1</span>:</span><br><span class="line">                visit[ny][nx] = visit[y][x] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> Map[ny][nx] == <span class="number">0</span>:</span><br><span class="line">                    max_dist = max(max_dist, visit[ny][nx])</span><br><span class="line">                virus.append((ny, nx))</span><br><span class="line">                </span><br><span class="line">    a = list(sum(visit, []))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> a.count(<span class="number">-1</span>) == list(sum(Map, [])).count(<span class="number">1</span>):</span><br><span class="line">        res.append(max_dist)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            q.append((i, j))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> combinations(q, M):</span><br><span class="line">    t = bfs(i)</span><br><span class="line"></span><br><span class="line">print(min(res) <span class="keyword">if</span> res <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 52</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX], cpmap[MAX][MAX], MIN = <span class="number">10e6</span>;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; virus, m_virus;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">	<span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">		Q.push(make_pair(m_virus[i].first, m_virus[i].second));</span><br><span class="line">		cpmap[m_virus[i].first][m_virus[i].second] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line"></span><br><span class="line">		Q.pop();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">			<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (ny &gt;= N || ny &lt; <span class="number">0</span> || nx &gt;= N || nx &lt; <span class="number">0</span> || cpmap[ny][nx] == <span class="number">1</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">			cpmap[ny][nx] = cpmap[y][x] + <span class="number">1</span>;</span><br><span class="line">			visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">			</span><br><span class="line">			Q.push(make_pair(ny, nx));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!visit[i][j] &amp;&amp; !cpmap[i][j])</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">0</span>)</span><br><span class="line">				time = <span class="built_in">max</span>(time, cpmap[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MIN = <span class="built_in">min</span>(MIN, time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comb</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">		<span class="built_in">memcpy</span>(cpmap, <span class="built_in">map</span>, <span class="keyword">sizeof</span>(cpmap));</span><br><span class="line"></span><br><span class="line">		bfs();</span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; virus.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!visit[virus[i].first][virus[i].second]) &#123;</span><br><span class="line">			visit[virus[i].first][virus[i].second] = <span class="literal">true</span>;</span><br><span class="line">			m_virus.push_back(make_pair(virus[i].first, virus[i].second));</span><br><span class="line">			comb(i + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">			m_virus.pop_back();</span><br><span class="line">			visit[virus[i].first][virus[i].second] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">				virus.push_back(make_pair(i, j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	comb(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (MIN == <span class="number">10e6</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; MIN;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17140. 이차원 배열과 연산</title>
    <url>/2020/10/10/%5BBOJ%5D%2017140.%20%EC%9D%B4%EC%B0%A8%EC%9B%90%20%EB%B0%B0%EC%97%B4%EA%B3%BC%20%EC%97%B0%EC%82%B0/</url>
    <content><![CDATA[<h3 id="17140-이차원-배열과-연산"><a href="#17140-이차원-배열과-연산" class="headerlink" title="17140. 이차원 배열과 연산"></a>17140. 이차원 배열과 연산</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17140" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>Counter -&gt; 값을 ㅇictionary 형태로 반환 해줌</p><p>get(0)을 통해 0인 값을 삭제</p><p>zip을 통해 행/열 변환</p><p>sum(list, []) -&gt; 일차원 배열로 합쳐준다.</p><blockquote><p>ex) </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">sum(list, [])</span><br><span class="line"><span class="comment"># 출력 값</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></blockquote>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">r, c , k = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(time &lt;= <span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 행의 길이가 열의 길이보다 길 때</span></span><br><span class="line">    <span class="keyword">if</span> r - <span class="number">1</span> &lt; len(Map) <span class="keyword">and</span> c - <span class="number">1</span> &lt; len(Map[<span class="number">0</span>]) <span class="keyword">and</span> Map[r<span class="number">-1</span>][c<span class="number">-1</span>] == k:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># C 연산</span></span><br><span class="line">    C_flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> len(Map) &lt; len(Map[<span class="number">0</span>]):</span><br><span class="line">        C_flag = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 행 열 바꾸기</span></span><br><span class="line">        Map = list(zip(*Map))</span><br><span class="line">    <span class="comment"># if len_r &gt;= len_c:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># C 연산일 때는 행과 열을 바꿨으므로</span></span><br><span class="line">    <span class="comment"># R 연산인 경우만 계산하면 된다.</span></span><br><span class="line">    max_len = <span class="number">0</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> Map:</span><br><span class="line">        lis = Counter(row)</span><br><span class="line">        <span class="keyword">if</span> lis.get(<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">del</span> lis[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        num_cnt = list(map(list, lis.items()))</span><br><span class="line">        <span class="comment"># 갯수 -&gt; 숫자 정렬</span></span><br><span class="line">        num_cnt.sort(key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line">        temp.append(list(sum(num_cnt, []))[:<span class="number">100</span>])</span><br><span class="line">        max_len = max(max_len, len(temp[<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">        <span class="keyword">if</span> len(temp[i]) &lt; max_len:</span><br><span class="line">            temp[i] += [<span class="number">0</span>] * (max_len - len(temp[i]))</span><br><span class="line"></span><br><span class="line">    Map = temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> C_flag:</span><br><span class="line">        Map = list(zip(*Map))</span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> time &gt; <span class="number">100</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(time)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX], cpmap[MAX][MAX], temp[MAX];</span><br><span class="line"><span class="keyword">int</span> r, c, k, a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">m</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num, cnt;</span><br><span class="line">&#125;m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;m&gt; Matrix;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(m a, m b)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//if문안에 a가 앞에올 조건을 걸어라</span></span><br><span class="line">	<span class="keyword">if</span> (a.cnt &lt;= b.cnt) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.cnt == b.cnt) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.num &lt; b.num) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt_r = <span class="number">0</span>, cnt_c = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == k || t &gt; <span class="number">100</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[j][i] != <span class="number">0</span>)</span><br><span class="line">					cnt1++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="number">0</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt_r = <span class="built_in">max</span>(cnt_r, cnt1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">					cnt2++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt_c = <span class="built_in">max</span>(cnt_c, cnt2);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cnt_r &gt;= cnt_c) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					temp[<span class="built_in">map</span>[i][j]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123; </span><br><span class="line">					<span class="keyword">if</span> (temp[j] != <span class="number">0</span>) &#123;</span><br><span class="line">						Matrix.push_back(&#123; j,temp[j] &#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				sort(Matrix.<span class="built_in">begin</span>(), Matrix.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Matrix.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					v.push_back(Matrix[j].num);</span><br><span class="line">					v.push_back(Matrix[j].cnt);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">				<span class="built_in">size</span> = <span class="built_in">max</span>(<span class="built_in">size</span>, length);</span><br><span class="line">				a = <span class="built_in">max</span>(a, <span class="built_in">size</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt_r; j++)</span><br><span class="line">					<span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">					<span class="keyword">if</span>(j+<span class="number">1</span>&lt;<span class="number">100</span>)</span><br><span class="line">						<span class="built_in">map</span>[i][j + <span class="number">1</span>] = v[j];</span><br><span class="line">				</span><br><span class="line">				Matrix.<span class="built_in">clear</span>();</span><br><span class="line">				v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cnt_r &lt; cnt_c) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;MAX; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					temp[<span class="built_in">map</span>[j][i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (temp[j] != <span class="number">0</span>) &#123;</span><br><span class="line">						Matrix.push_back(&#123; j,temp[j] &#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				sort(Matrix.<span class="built_in">begin</span>(), Matrix.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Matrix.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					v.push_back(Matrix[j].num);</span><br><span class="line">					v.push_back(Matrix[j].cnt);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">				<span class="built_in">size</span> = <span class="built_in">max</span>(<span class="built_in">size</span>, length);</span><br><span class="line">				a = <span class="built_in">max</span>(a, <span class="built_in">size</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt_c; j++)</span><br><span class="line">					<span class="built_in">map</span>[j][i] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">					<span class="keyword">if</span>(j+<span class="number">1</span>&lt;<span class="number">100</span>)</span><br><span class="line">						<span class="built_in">map</span>[j+<span class="number">1</span>][i] = v[j];</span><br><span class="line"></span><br><span class="line">				Matrix.<span class="built_in">clear</span>();</span><br><span class="line">				v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		t++;</span><br><span class="line">		a = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> time = solve();</span><br><span class="line">	<span class="keyword">if</span> (time ==<span class="number">101</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; time;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17143. 낚시왕</title>
    <url>/2020/10/10/%5BBOJ%5D%2017143.%20%EB%82%9A%EC%8B%9C%EC%99%95/</url>
    <content><![CDATA[<h3 id="17143-낚시왕"><a href="#17143-낚시왕" class="headerlink" title="17143. 낚시왕"></a>17143. 낚시왕</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17143" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">move = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">R, C, M = map(int, input().split())</span><br><span class="line">Map = [[<span class="literal">None</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, s, d, z = map(int, input().split())</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">or</span> d == <span class="number">2</span>:</span><br><span class="line">        Map[y - <span class="number">1</span>][x - <span class="number">1</span>] = (s % ((R - <span class="number">1</span>) * <span class="number">2</span>), d, z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Map[y - <span class="number">1</span>][x - <span class="number">1</span>] = (s % ((C - <span class="number">1</span>) * <span class="number">2</span>), d, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(C):</span><br><span class="line">    <span class="comment"># 1. 열에 있는 상어 중 가장 가까운 상어 잡는다.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">if</span> Map[i][t]:</span><br><span class="line">            res += Map[i][t][<span class="number">2</span>]</span><br><span class="line">            Map[i][t] = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 상어 이동 ( 상 하 우 좌 )</span></span><br><span class="line">    check = [[<span class="literal">None</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            <span class="keyword">if</span> Map[i][j]:</span><br><span class="line">                s, d, z = Map[i][j]</span><br><span class="line">                y, x = i, j</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">or</span> d == <span class="number">2</span>:</span><br><span class="line">                    y += s * move[d]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x += s * move[d]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 최대 2번 방향이 바뀔 수 있다.</span></span><br><span class="line">                <span class="comment"># 방향 그대로 이동하고 뒤집어 준다.</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">or</span> d == <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">if</span> y &lt; <span class="number">0</span>:</span><br><span class="line">                            d = <span class="number">2</span> <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                            y = -y</span><br><span class="line">                        <span class="keyword">elif</span> y &gt;= R:</span><br><span class="line">                            d = <span class="number">2</span> <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                            y = (R - <span class="number">1</span>) * <span class="number">2</span> - y</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">                            d = <span class="number">3</span> <span class="keyword">if</span> d == <span class="number">4</span> <span class="keyword">else</span> <span class="number">4</span></span><br><span class="line">                            x = -x</span><br><span class="line">                        <span class="keyword">elif</span> x &gt;= C:</span><br><span class="line">                            d = <span class="number">3</span> <span class="keyword">if</span> d == <span class="number">4</span> <span class="keyword">else</span> <span class="number">4</span></span><br><span class="line">                            x = (C - <span class="number">1</span>) * <span class="number">2</span> - x</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 한마리면 그냥 넣고 중복되면 큰 값만 저장</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> check[y][x]:</span><br><span class="line">                    check[y][x] = (s, d, z)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> check[y][x][<span class="number">2</span>] &lt; z:</span><br><span class="line">                        check[y][x] = (s, d, z)</span><br><span class="line">    <span class="comment"># 맵 복사</span></span><br><span class="line">    Map = check</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt, t = <span class="number">0</span>, <span class="built_in">size</span> = <span class="number">2</span>;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line">S Shark,s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, dist;</span><br><span class="line">&#125;F;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;F&gt; Temp;</span><br><span class="line"><span class="built_in">queue</span>&lt;S&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(F a, F b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.dist &gt;= b.dist) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.dist == b.dist) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.y &gt;= b.y) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a.y == b.y) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a.x &gt; b.x) &#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		Q.push(Shark);</span><br><span class="line">		visit[Q.front().y][Q.front().x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = Q.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Q.front().x;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = Q.front().<span class="built_in">size</span>;</span><br><span class="line">			<span class="keyword">int</span> t = Q.front().t;</span><br><span class="line">			<span class="keyword">int</span> cnt = Q.front().cnt;</span><br><span class="line"></span><br><span class="line">			Q.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; N || ny &lt;<span class="number">1</span> || nx&gt;N || nx &lt; <span class="number">1</span> || <span class="built_in">map</span>[ny][nx] &gt; Shark.<span class="built_in">size</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">				visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">				s.y = ny; s.x = nx, s.cnt = cnt; s.t = t + <span class="number">1</span>;</span><br><span class="line">				Q.push(s);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (Shark.<span class="built_in">size</span> &gt; <span class="built_in">map</span>[ny][nx] &amp;&amp; <span class="built_in">map</span>[ny][nx] != <span class="number">0</span>)</span><br><span class="line">					Temp.push_back(&#123; ny,nx,s.t&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[<span class="number">0</span>].y][Temp[<span class="number">0</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[<span class="number">0</span>].y;</span><br><span class="line">			Shark.x = Temp[<span class="number">0</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[<span class="number">0</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Temp.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			sort(Temp.<span class="built_in">begin</span>(), Temp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> temp_size = Temp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[temp_size - <span class="number">1</span>].y][Temp[temp_size - <span class="number">1</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[temp_size - <span class="number">1</span>].y;</span><br><span class="line">			Shark.x = Temp[temp_size - <span class="number">1</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[temp_size - <span class="number">1</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">		Temp.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123;</span><br><span class="line">				Shark.y = i;</span><br><span class="line">				Shark.x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Shark.t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 백트래킹</title>
    <url>/2020/05/15/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/</url>
    <content><![CDATA[<h3 id="5209-최소-생산-비용"><a href="#5209-최소-생산-비용" class="headerlink" title="5209. 최소 생산 비용"></a>5209. 최소 생산 비용</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYGf7K180DFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="최소-생산-비용"><a href="#최소-생산-비용" class="headerlink" title="최소 생산 비용"></a>최소 생산 비용</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cnt, temp)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> temp &gt; res: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> cnt == N:</span><br><span class="line">        res = res <span class="keyword">if</span> res &lt; temp <span class="keyword">else</span> temp</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check[i]:</span><br><span class="line">            temp += V[cnt][i]</span><br><span class="line">            check[i] = <span class="literal">True</span></span><br><span class="line">            dfs(cnt + <span class="number">1</span>, temp)</span><br><span class="line">            check[i] = <span class="literal">False</span></span><br><span class="line">            temp -= V[cnt][i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    V = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    check = [<span class="number">0</span>] * N</span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 분할 정복</title>
    <url>/2020/05/14/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%EB%B6%84%ED%95%A0%20%EC%A0%95%EB%B3%B5/</url>
    <content><![CDATA[<h3 id="5207-이진-탐색"><a href="#5207-이진-탐색" class="headerlink" title="5207. 이진 탐색"></a>5207. 이진 탐색</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYFsQq11kDFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="이진-탐색"><a href="#이진-탐색" class="headerlink" title="이진 탐색"></a>이진 탐색</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(l, r, num, lis, flag)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> l &gt; r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    m = (l + r) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lis[m] == num:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> lis[m] &gt; num:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> search(l, m - <span class="number">1</span>, num, lis, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> search(m + <span class="number">1</span>, r, num, lis, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N, M = map(int, input().split())</span><br><span class="line">    A = list(map(int, input().split()))</span><br><span class="line">    B = list(map(int, input().split()))</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    A.sort()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(B)):</span><br><span class="line">        search(<span class="number">0</span>, len(A) - <span class="number">1</span>, B[i], A, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"#&#123;&#125; &#123;&#125;"</span>.format(tc+<span class="number">1</span>, cnt))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 탐욕 알고리즘</title>
    <url>/2020/05/07/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%ED%83%90%EC%9A%95%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</url>
    <content><![CDATA[<h3 id="5201-컨테이너-운반-5202-화물-도크-5203-베이비진-게임"><a href="#5201-컨테이너-운반-5202-화물-도크-5203-베이비진-게임" class="headerlink" title="5201. 컨테이너 운반  / 5202. 화물 도크 / 5203. 베이비진 게임"></a>5201. 컨테이너 운반  / 5202. 화물 도크 / 5203. 베이비진 게임</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYEGw61n8DFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="컨테이너-운반"><a href="#컨테이너-운반" class="headerlink" title="컨테이너 운반"></a>컨테이너 운반</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N, M = map(int, input().split())</span><br><span class="line">    w = list(map(int, input().split()))</span><br><span class="line">    t = list(map(int, input().split()))</span><br><span class="line">    visit = [<span class="number">0</span>] * N</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    w.sort()</span><br><span class="line">    t.sort()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(M<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[j] <span class="keyword">and</span> t[i] &gt;= w[j]:</span><br><span class="line">                visit[j] = <span class="number">1</span></span><br><span class="line">                res += w[j]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="화물-도크"><a href="#화물-도크" class="headerlink" title="화물 도크"></a>화물 도크</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    w = []</span><br><span class="line">    end = res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        s, e = list(map(int, input().split()))</span><br><span class="line">        w.append([s, e])</span><br><span class="line">    w.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] &gt;= end:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            end = i[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="베이비진-게임"><a href="#베이비진-게임" class="headerlink" title="베이비진 게임"></a>베이비진 게임</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">isrun</span><span class="params">(lis)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="keyword">if</span> num - <span class="number">2</span> <span class="keyword">in</span> lis <span class="keyword">or</span> num + <span class="number">1</span> <span class="keyword">in</span> lis:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> num + <span class="number">1</span> <span class="keyword">in</span> lis <span class="keyword">and</span> num + <span class="number">2</span> <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">istriplet</span><span class="params">(lis)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> lis.count(num) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    temp = list(map(int, input().split()))</span><br><span class="line">    A, B = [], []</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(temp), <span class="number">2</span>):</span><br><span class="line">        A.append(temp[i])</span><br><span class="line">        B.append(temp[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> isrun(A[:i+<span class="number">1</span>]) <span class="keyword">or</span> istriplet(A[:i+<span class="number">1</span>]):</span><br><span class="line">            res = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> isrun(B[:i+<span class="number">1</span>]) <span class="keyword">or</span> istriplet(B[:i+<span class="number">1</span>]):</span><br><span class="line">            res = <span class="number">2</span>; <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>brute force</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17144. 미세먼지 안녕!</title>
    <url>/2020/05/06/%5BBOJ%5D%2017144.%20%EB%AF%B8%EC%84%B8%EB%A8%BC%EC%A7%80%20%EC%95%88%EB%85%95!/</url>
    <content><![CDATA[<h3 id="17144-미세먼지-안녕"><a href="#17144-미세먼지-안녕" class="headerlink" title="17144. 미세먼지 안녕!"></a>17144. 미세먼지 안녕!</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17144" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spread</span><span class="params">()</span>:</span></span><br><span class="line">    add = [[<span class="number">0</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            <span class="keyword">if</span> Map[i][j] == <span class="number">-1</span> <span class="keyword">or</span> <span class="keyword">not</span> Map[i][j]: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            amount = Map[i][j] // <span class="number">5</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                ny = i + dy[k]</span><br><span class="line">                nx = j + dx[k]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; C:</span><br><span class="line">                    <span class="keyword">if</span> Map[ny][nx] != <span class="number">-1</span>:</span><br><span class="line">                        add[ny][nx] += amount</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt:</span><br><span class="line">                Map[i][j] -= (amount * cnt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            Map[i][j] += add[i][j]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 위쪽 청소</span></span><br><span class="line">    y, x = wind[<span class="number">0</span>][<span class="number">0</span>], wind[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[i][<span class="number">0</span>] = Map[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C - <span class="number">1</span>):</span><br><span class="line">        Map[<span class="number">0</span>][i] = Map[<span class="number">0</span>][i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y):</span><br><span class="line">        Map[i][C<span class="number">-1</span>] = Map[i+<span class="number">1</span>][C<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[y][i] = Map[y][i<span class="number">-1</span>]</span><br><span class="line">    Map[y][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 아래쪽 청소</span></span><br><span class="line">    y, x = wind[<span class="number">1</span>][<span class="number">0</span>], wind[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y + <span class="number">1</span>, R - <span class="number">1</span>):</span><br><span class="line">        Map[i][<span class="number">0</span>] = Map[i+<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C - <span class="number">1</span>):</span><br><span class="line">        Map[R<span class="number">-1</span>][i] = Map[R<span class="number">-1</span>][i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R<span class="number">-1</span>, y<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[i][C<span class="number">-1</span>] = Map[i<span class="number">-1</span>][C<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[y][i] = Map[y][i<span class="number">-1</span>]</span><br><span class="line">    Map[y][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">R, C, T = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">wind = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">-1</span>:</span><br><span class="line">            wind.append((i, j))</span><br><span class="line">            wind.append((i+<span class="number">1</span>,j))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(T):</span><br><span class="line">    <span class="comment"># 1. 미세먼지 확산</span></span><br><span class="line">    spread()</span><br><span class="line">    <span class="comment"># 2. 공기청정기 작동</span></span><br><span class="line">    clean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">            res += Map[i][j]</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX], R, C, T;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">d</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt;</span><br><span class="line">&#125;d;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;d&gt; Dust;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		time++;</span><br><span class="line">		<span class="keyword">if</span> (time &gt; T)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//미세먼지확산</span></span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = Dust.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//큐에들어있는만큼 미세먼지 확산</span></span><br><span class="line">			<span class="comment">//이제 큐에서 꺼내서 확산시켜야지</span></span><br><span class="line">			<span class="keyword">int</span> y = Dust.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Dust.front().x;</span><br><span class="line">			<span class="keyword">int</span> cnt = Dust.front().cnt;</span><br><span class="line">			<span class="comment">//if (map[y][x] &lt; 5) continue;</span></span><br><span class="line">			Dust.pop();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">// 얘는 몇방향으로 움직이는지 체크해주기 위함임.</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[a];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[a];</span><br><span class="line"></span><br><span class="line">				<span class="comment">//여기서는 맵밖이 아니고 공기청정기 좌표가 아니면 무조건 확산.</span></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; R || ny &lt; <span class="number">1</span> || nx &gt; C || nx &lt; <span class="number">1</span> || (ny == v[<span class="number">0</span>].first &amp;&amp; nx == v[<span class="number">0</span>].second) || (ny == v[<span class="number">1</span>].first &amp;&amp; nx == v[<span class="number">1</span>].second)) <span class="keyword">continue</span>;</span><br><span class="line">				temp++; <span class="comment">//몇방향이나 빠지는지</span></span><br><span class="line">				<span class="built_in">map</span>[ny][nx] += (cnt / <span class="number">5</span>); <span class="comment">// 값더해주기</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x]&gt;=<span class="number">5</span>) &#123;</span><br><span class="line">				<span class="built_in">map</span>[y][x] -= ((cnt / <span class="number">5</span>) * temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//공기청정기작동</span></span><br><span class="line">		<span class="comment">//윗무빙</span></span><br><span class="line">		<span class="comment">//1. 1부터 v[0]y-1까지 한칸 이동  2. C부터 2까지 한칸이동 3. v[0]y부터 2까지 이동 </span></span><br><span class="line">        	<span class="comment">//4. v[0]x+1부터 C-1까지 이동</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v[<span class="number">0</span>].first<span class="number">-1</span>; i &gt; <span class="number">1</span>; i--) &#123;<span class="comment">// 1번</span></span><br><span class="line">			<span class="built_in">map</span>[i][v[<span class="number">0</span>].second] = <span class="built_in">map</span>[i - <span class="number">1</span>][v[<span class="number">0</span>].second];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;<span class="comment">//2번</span></span><br><span class="line">			<span class="built_in">map</span>[<span class="number">1</span>][i] = <span class="built_in">map</span>[<span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v[<span class="number">0</span>].first; i++) &#123;<span class="comment">//3번</span></span><br><span class="line">			<span class="built_in">map</span>[i][C] = <span class="built_in">map</span>[i + <span class="number">1</span>][C];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = C; i &gt; v[<span class="number">0</span>].second + <span class="number">1</span>; i--) &#123;<span class="comment">//4번</span></span><br><span class="line">			<span class="built_in">map</span>[v[<span class="number">0</span>].first][i] = <span class="built_in">map</span>[v[<span class="number">0</span>].first][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//아랫무빙</span></span><br><span class="line">		<span class="comment">//1.v[1]y+1부터 R-1까지 2. 2부터 C까지 3. y[1]y부터 R-1까지 4. v[1]x+1부터 C-1까지</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v[<span class="number">1</span>].first + <span class="number">1</span>; i &lt; R; i++) &#123;<span class="comment">// 1번</span></span><br><span class="line">			<span class="built_in">map</span>[i][v[<span class="number">1</span>].second] = <span class="built_in">map</span>[i + <span class="number">1</span>][v[<span class="number">1</span>].second];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;<span class="comment">//2번</span></span><br><span class="line">			<span class="built_in">map</span>[R][i] = <span class="built_in">map</span>[R][i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = R; i &gt; v[<span class="number">1</span>].first; i--) &#123;<span class="comment">//3번</span></span><br><span class="line">			<span class="built_in">map</span>[i][C] = <span class="built_in">map</span>[i - <span class="number">1</span>][C];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = C; i &gt; v[<span class="number">1</span>].second + <span class="number">1</span>; i--) &#123;<span class="comment">//4번</span></span><br><span class="line">			<span class="built_in">map</span>[v[<span class="number">1</span>].first][i] = <span class="built_in">map</span>[v[<span class="number">1</span>].first][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>[v[<span class="number">0</span>].first][v[<span class="number">0</span>].second + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">map</span>[v[<span class="number">1</span>].first][v[<span class="number">1</span>].second + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//다시 미세먼지 위치를 큐에 넣어준다.</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">					Dust.push(&#123; i,j,<span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; R &gt;&gt; C &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">-1</span>) &#123;</span><br><span class="line">				v.push_back(make_pair(i, j));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">				Dust.push(&#123; i,j,<span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">				num += <span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 완전검색</title>
    <url>/2020/05/06/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%EC%99%84%EC%A0%84%EA%B2%80%EC%83%89/</url>
    <content><![CDATA[<h3 id="5188-최소합-5189-전자카트"><a href="#5188-최소합-5189-전자카트" class="headerlink" title="5188. 최소합  / 5189. 전자카트"></a>5188. 최소합  / 5189. 전자카트</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYDrI61lYDFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

<h3 id="최소합"><a href="#최소합" class="headerlink" title="- 최소합"></a>- 최소합</h3></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(y, x, r)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res &lt; r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> y == N - <span class="number">1</span> <span class="keyword">and</span> x == N - <span class="number">1</span>:</span><br><span class="line">        res = min(r, res)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        ny = y + dy[i]</span><br><span class="line">        nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                dfs(ny, nx, r + Map[ny][nx])</span><br><span class="line">                visit[ny][nx] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>, Map[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"#&#123;&#125; &#123;&#125;"</span>.format(tc + <span class="number">1</span>, res))</span><br></pre></td></tr></table></figure>

<h3 id="전자카트"><a href="#전자카트" class="headerlink" title="- 전자카트"></a>- 전자카트</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cnt, n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> cnt == N:</span><br><span class="line">        lis.append(n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visit[i]:</span><br><span class="line">            visit[i] = <span class="number">1</span></span><br><span class="line">            dfs(cnt + <span class="number">1</span>, n + str(i))</span><br><span class="line">            visit[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    visit = [<span class="number">0</span>] * N</span><br><span class="line">    lis = []</span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line">    visit[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> lis:</span><br><span class="line">        a += <span class="string">'0'</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a) - <span class="number">1</span>):</span><br><span class="line">            temp += Map[int(a[i])][int(a[i+<span class="number">1</span>])]</span><br><span class="line">        res = min(res, temp)</span><br><span class="line">    print(<span class="string">"#&#123;&#125; &#123;&#125;"</span>.format(tc + <span class="number">1</span>, res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>brute force</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16236. 아기 상어</title>
    <url>/2020/04/23/%5BBOJ%5D%2016236.%20%EC%95%84%EA%B8%B0%20%EC%83%81%EC%96%B4/</url>
    <content><![CDATA[<h3 id="16236-아기-상어"><a href="#16236-아기-상어" class="headerlink" title="16236. 아기 상어"></a>16236. 아기 상어</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">9</span>:</span><br><span class="line">            sy, sx, size, cnt = i, j, <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">            Map[i][j] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    eat = []</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((sy, sx))</span><br><span class="line">    visit[sy][sx] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[i]</span><br><span class="line">            nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = visit[y][x] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx] <span class="keyword">or</span> Map[ny][nx] == size:</span><br><span class="line">                        q.append((ny, nx))</span><br><span class="line">                    <span class="keyword">elif</span> <span class="number">0</span> &lt; Map[ny][nx] &lt; size:</span><br><span class="line">                        eat.append([ny, nx, visit[ny][nx]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> eat:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> len(eat) == <span class="number">1</span>:</span><br><span class="line">        sy, sx = eat[<span class="number">0</span>][<span class="number">0</span>], eat[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># eat.sort(key=lambda a: (a[2], a[0], a[1]))</span></span><br><span class="line">        eat = sorted(eat, key=<span class="keyword">lambda</span> a: (a[<span class="number">2</span>], a[<span class="number">0</span>], a[<span class="number">1</span>]))</span><br><span class="line">        sy, sx = eat[<span class="number">0</span>][<span class="number">0</span>], eat[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    res += eat[<span class="number">0</span>][<span class="number">2</span>] - <span class="number">1</span></span><br><span class="line">    Map[sy][sx] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt == size:</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt, t = <span class="number">0</span>, <span class="built_in">size</span> = <span class="number">2</span>;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line">S Shark,s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, dist;</span><br><span class="line">&#125;F;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;F&gt; Temp;</span><br><span class="line"><span class="built_in">queue</span>&lt;S&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(F a, F b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.dist &gt;= b.dist) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.dist == b.dist) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.y &gt;= b.y) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a.y == b.y) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a.x &gt; b.x) &#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		Q.push(Shark);</span><br><span class="line">		visit[Q.front().y][Q.front().x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = Q.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Q.front().x;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = Q.front().<span class="built_in">size</span>;</span><br><span class="line">			<span class="keyword">int</span> t = Q.front().t;</span><br><span class="line">			<span class="keyword">int</span> cnt = Q.front().cnt;</span><br><span class="line"></span><br><span class="line">			Q.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; N || ny &lt;<span class="number">1</span> || nx&gt;N || nx &lt; <span class="number">1</span> || <span class="built_in">map</span>[ny][nx] &gt; Shark.<span class="built_in">size</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">				visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">				s.y = ny; s.x = nx, s.cnt = cnt; s.t = t + <span class="number">1</span>;</span><br><span class="line">				Q.push(s);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (Shark.<span class="built_in">size</span> &gt; <span class="built_in">map</span>[ny][nx] &amp;&amp; <span class="built_in">map</span>[ny][nx] != <span class="number">0</span>)</span><br><span class="line">					Temp.push_back(&#123; ny,nx,s.t&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[<span class="number">0</span>].y][Temp[<span class="number">0</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[<span class="number">0</span>].y;</span><br><span class="line">			Shark.x = Temp[<span class="number">0</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[<span class="number">0</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Temp.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			sort(Temp.<span class="built_in">begin</span>(), Temp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> temp_size = Temp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[temp_size - <span class="number">1</span>].y][Temp[temp_size - <span class="number">1</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[temp_size - <span class="number">1</span>].y;</span><br><span class="line">			Shark.x = Temp[temp_size - <span class="number">1</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[temp_size - <span class="number">1</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">		Temp.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123;</span><br><span class="line">				Shark.y = i;</span><br><span class="line">				Shark.x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Shark.t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16235. 나무 재테크</title>
    <url>/2020/04/22/%5BBOJ%5D%2016235.%20%EB%82%98%EB%AC%B4%20%EC%9E%AC%ED%85%8C%ED%81%AC/</url>
    <content><![CDATA[<h3 id="16235-나무-재테크"><a href="#16235-나무-재테크" class="headerlink" title="16235. 나무 재테크"></a>16235. 나무 재테크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16235" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">N, M, K = map(int, input().split())</span><br><span class="line">add = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">Map = [[<span class="number">5</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">tree = [[[] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, z = map(int, input().split())</span><br><span class="line">    tree[y<span class="number">-1</span>][x<span class="number">-1</span>].append(z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    <span class="comment"># S/S</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> tree[i][j]:</span><br><span class="line">                temp, t = [], len(tree[i][j])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(t):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] &gt;= tree[i][j][<span class="number">-1</span>-k]:</span><br><span class="line">                        Map[i][j] -= tree[i][j][<span class="number">-1</span>-k]</span><br><span class="line">                        temp.append(tree[i][j][<span class="number">-1</span>-k] + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        t = k</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(tree[i][j]) - t):</span><br><span class="line">                    Map[i][j] += (tree[i][j][k] // <span class="number">2</span>)</span><br><span class="line">                tree[i][j] = temp[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># F</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> tree[i][j]:</span><br><span class="line">                <span class="keyword">for</span> age <span class="keyword">in</span> tree[i][j]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> age % <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                            ny = i + dy[k]</span><br><span class="line">                            nx = j + dx[k]</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">                                temp.append((ny, nx))</span><br><span class="line">    <span class="keyword">for</span> y, x <span class="keyword">in</span> temp:</span><br><span class="line">        tree[y][x].append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># W</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            Map[i][j] += add[i][j]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        res += len(tree[i][j])</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, Yang[MAX][MAX], addYang[MAX][MAX], cnt;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, age;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line">T tree;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">springsummer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line">		Q.pop();</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">		<span class="keyword">int</span> die = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tree_cnt = <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">		sort(<span class="built_in">map</span>[y][x].<span class="built_in">begin</span>(), <span class="built_in">map</span>[y][x].<span class="built_in">end</span>());</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree_cnt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x][i] &lt;= Yang[y][x]) &#123;</span><br><span class="line">				Yang[y][x] -= <span class="built_in">map</span>[y][x][i];</span><br><span class="line">				temp.push_back(++<span class="built_in">map</span>[y][x][i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				die += <span class="built_in">map</span>[y][x][i] / <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>[y][x].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="built_in">map</span>[y][x].push_back(temp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">map</span>[y][x].<span class="built_in">size</span>()!=<span class="number">0</span>)</span><br><span class="line">			Q.push(make_pair(y, x));</span><br><span class="line">		Yang[y][x] += die;</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">	q = Q;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = q.front().second;</span><br><span class="line">		q.pop();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x][i] % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">8</span>; a++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[a];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[a];</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">if</span> (ny &lt; <span class="number">1</span> || ny &gt; N || nx &lt; <span class="number">1</span> || nx &gt; N) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">map</span>[ny][nx].<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">					Q.push(make_pair(ny, nx));</span><br><span class="line">				<span class="built_in">map</span>[ny][nx].push_back(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			Yang[i][j] += addYang[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (year &lt; K) &#123;</span><br><span class="line">		springsummer();</span><br><span class="line">		fall();</span><br><span class="line">		winter();</span><br><span class="line">		year++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line">		Q.pop();</span><br><span class="line"></span><br><span class="line">		cnt += <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; addYang[i][j];</span><br><span class="line">			Yang[i][j] = <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y, x, age;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; y &gt;&gt; x &gt;&gt; age;</span><br><span class="line">		tree.y = y; tree.x = x; tree.age = age;</span><br><span class="line">		<span class="built_in">map</span>[y][x].push_back(age);</span><br><span class="line">		Q.push(make_pair(y, x));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	solve();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16234. 인구 이동</title>
    <url>/2020/04/21/%5BBOJ%5D%2016234.%20%EC%9D%B8%EA%B5%AC%20%EC%9D%B4%EB%8F%99/</url>
    <content><![CDATA[<h3 id="16234-인구-이동"><a href="#16234-인구-이동" class="headerlink" title="16234. 인구 이동"></a>16234. 인구 이동</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16234" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L, R = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    Q = []</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    Union = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[i][j]:</span><br><span class="line">                visit[i][j] = <span class="number">1</span></span><br><span class="line">                Q.append((i, j))</span><br><span class="line">            <span class="keyword">while</span> Q:</span><br><span class="line">                y, x = Q.pop()</span><br><span class="line">                temp.append((y, x))</span><br><span class="line">                <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">                    ny = y + a</span><br><span class="line">                    nx = x + b</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                        <span class="keyword">if</span> L &lt;= abs(Map[y][x] - Map[ny][nx]) &lt;= R:</span><br><span class="line">                            visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                            Q.append((ny, nx))</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span>:</span><br><span class="line">                Union.append(temp)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Union:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> lis <span class="keyword">in</span> Union:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> y, x <span class="keyword">in</span> lis:</span><br><span class="line">                temp += Map[y][x]</span><br><span class="line">            temp //= len(lis)</span><br><span class="line">            <span class="keyword">for</span> y, x <span class="keyword">in</span> lis:</span><br><span class="line">                Map[y][x] = temp</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, L, R, <span class="built_in">map</span>[MAX][MAX], MOVE = <span class="number">0</span>, People = <span class="number">0</span>, Nation = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> visit2[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> now_y = i;</span><br><span class="line">	<span class="keyword">int</span> now_x = j;</span><br><span class="line">	visit2[i][j] = <span class="number">1</span>;</span><br><span class="line">	People += <span class="built_in">map</span>[i][j];</span><br><span class="line">	Nation += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = now_y + dy[a];</span><br><span class="line">		<span class="keyword">int</span> x = now_x + dx[a];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">0</span> &lt; y &amp;&amp; y &lt;= N &amp;&amp; <span class="number">0</span> &lt; x &amp;&amp; x &lt;= N &amp;&amp; visit2[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(<span class="built_in">map</span>[y][x] - <span class="built_in">map</span>[now_y][now_x]) &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[y][x] - <span class="built_in">map</span>[now_y][now_x]) &lt;= R)</span><br><span class="line">			&#123;</span><br><span class="line">				visit2[y][x] = <span class="number">1</span>;</span><br><span class="line">				v.push_back(make_pair(y, x));</span><br><span class="line">				dfs(y, x);</span><br><span class="line">				<span class="comment">//return;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; L &gt;&gt; R;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">stop</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (visit2[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (<span class="number">0</span> &lt; i + dy[k] &amp;&amp; i + dy[k] &lt;= N &amp;&amp; <span class="number">0</span> &lt; j + dx[k] &amp;&amp; j + dx[k] &lt;= N &amp;&amp; visit2[i + dy[k]][j + dx[k]] == <span class="number">0</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(<span class="built_in">map</span>[i][j] - <span class="built_in">map</span>[i + dy[k]][j + dx[k]]) &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[i][j] - <span class="built_in">map</span>[i + dy[k]][j + dx[k]]) &lt;= R)</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">stop</span> = <span class="number">1</span>;</span><br><span class="line">								v.push_back(make_pair(i, j));</span><br><span class="line">								dfs(i, j);</span><br><span class="line">								<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; v.<span class="built_in">size</span>(); z++)</span><br><span class="line">									<span class="built_in">map</span>[v[z].first][v[z].second] = (People / Nation);</span><br><span class="line">								v.<span class="built_in">clear</span>();</span><br><span class="line">								People = <span class="number">0</span>;</span><br><span class="line">								Nation = <span class="number">0</span>;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(visit2, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit2));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stop</span> == <span class="number">1</span>)</span><br><span class="line">			MOVE++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stop</span> == <span class="number">0</span> || MOVE == <span class="number">0</span>)</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; MOVE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15686. 치킨 배달</title>
    <url>/2020/04/20/%5BBOJ%5D%2015686.%20%EC%B9%98%ED%82%A8%20%EB%B0%B0%EB%8B%AC/</url>
    <content><![CDATA[<h3 id="15686-치킨-배달"><a href="#15686-치킨-배달" class="headerlink" title="15686. 치킨 배달"></a>15686. 치킨 배달</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">home, chicken, res = [], [], float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">1</span>:</span><br><span class="line">            home.append((i, j))</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            chicken.append((i, j))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 치킨집 중 M개를 뽑는다.</span></span><br><span class="line"><span class="keyword">for</span> comb <span class="keyword">in</span> combinations(chicken, M):</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 각각의 집에서</span></span><br><span class="line">    <span class="keyword">for</span> hy, hx <span class="keyword">in</span> home:</span><br><span class="line">        temp = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="comment"># 가장 가까운 치킨집을 찾는다.</span></span><br><span class="line">        <span class="keyword">for</span> cy, cx <span class="keyword">in</span> comb:</span><br><span class="line">            t = abs(hy - cy) + abs(hx - cx)</span><br><span class="line">            temp = min(temp, t)</span><br><span class="line">        r += temp</span><br><span class="line">    res = min(r, res)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>], ans;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; h;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; c;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; comb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dist[<span class="number">1000</span>];</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h.<span class="built_in">size</span>(); i++)</span><br><span class="line">		dist[i] = <span class="number">987654321</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comb.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> d = <span class="built_in">abs</span>(comb[i].first - h[j].first) + <span class="built_in">abs</span>(comb[i].second - h[j].second);</span><br><span class="line">			<span class="keyword">if</span> (dist[j] &gt; d)</span><br><span class="line">				dist[j] = d;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">		a += dist[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans &gt; a)</span><br><span class="line">		ans = a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">		cal();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = a; k &lt; c.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">		comb.push_back(c[k]);</span><br><span class="line">		select(cnt + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">		comb.pop_back();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">1</span>)</span><br><span class="line">				h.push_back(make_pair(i, j));</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>)</span><br><span class="line">				c.push_back(make_pair(i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ans = <span class="number">987654321</span>;</span><br><span class="line">	select(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 5373. 큐빙</title>
    <url>/2020/04/19/%5BBOJ%5D%205373.%20%ED%81%90%EB%B9%99/</url>
    <content><![CDATA[<h3 id="5373-큐빙"><a href="#5373-큐빙" class="headerlink" title="5373. 큐빙"></a>5373. 큐빙</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/5373" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 바라보는 면 회전</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(cube, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="string">'+'</span>:</span><br><span class="line">        temp = deepcopy(cube)</span><br><span class="line">        cube[<span class="number">0</span>][<span class="number">0</span>], cube[<span class="number">0</span>][<span class="number">1</span>], cube[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">0</span>], temp[<span class="number">1</span>][<span class="number">0</span>], temp[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        cube[<span class="number">1</span>][<span class="number">0</span>], cube[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">1</span>], temp[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        cube[<span class="number">2</span>][<span class="number">0</span>], cube[<span class="number">2</span>][<span class="number">1</span>], cube[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">2</span>], temp[<span class="number">1</span>][<span class="number">2</span>], temp[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = deepcopy(cube)</span><br><span class="line">        cube[<span class="number">0</span>][<span class="number">0</span>], cube[<span class="number">0</span>][<span class="number">1</span>], cube[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">2</span>], temp[<span class="number">1</span>][<span class="number">2</span>], temp[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">        cube[<span class="number">1</span>][<span class="number">0</span>], cube[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">1</span>], temp[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        cube[<span class="number">2</span>][<span class="number">0</span>], cube[<span class="number">2</span>][<span class="number">1</span>], cube[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">0</span>], temp[<span class="number">1</span>][<span class="number">0</span>], temp[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">tc = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(tc):</span><br><span class="line">    n = int(input())</span><br><span class="line">    lis = list(input().split())</span><br><span class="line"></span><br><span class="line">    cube_u = [</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>],</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>],</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_d = [</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>],</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>],</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_f = [</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>],</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>],</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_b = [</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>],</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>],</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_l = [</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>],</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>],</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_r = [</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</span><br><span class="line">    ]</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 바라보는 면을 기준으로 상, 하, 좌, 우를 회전</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> d[<span class="number">0</span>] == <span class="string">'U'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = cube_f[<span class="number">0</span>][:]</span><br><span class="line">                cube_f[<span class="number">0</span>], cube_r[<span class="number">0</span>], cube_b[<span class="number">0</span>], cube_l[<span class="number">0</span>] = cube_r[<span class="number">0</span>][:], cube_b[<span class="number">0</span>][:], cube_l[<span class="number">0</span>][:], temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cube_f[<span class="number">0</span>][:]</span><br><span class="line">                cube_f[<span class="number">0</span>], cube_l[<span class="number">0</span>], cube_b[<span class="number">0</span>], cube_r[<span class="number">0</span>] = cube_l[<span class="number">0</span>][:], cube_b[<span class="number">0</span>][:], cube_r[<span class="number">0</span>][:], temp</span><br><span class="line">			<span class="comment"># 바라보는 면 회전 함수</span></span><br><span class="line">            rotate(cube_u, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'D'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = cube_f[<span class="number">2</span>][:]</span><br><span class="line">                cube_f[<span class="number">2</span>], cube_l[<span class="number">2</span>], cube_b[<span class="number">2</span>], cube_r[<span class="number">2</span>] = cube_l[<span class="number">2</span>][:], cube_b[<span class="number">2</span>][:], cube_r[<span class="number">2</span>][:], temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cube_f[<span class="number">2</span>][:]</span><br><span class="line">                cube_f[<span class="number">2</span>], cube_r[<span class="number">2</span>], cube_b[<span class="number">2</span>], cube_l[<span class="number">2</span>] = cube_r[<span class="number">2</span>][:], cube_b[<span class="number">2</span>][:], cube_l[<span class="number">2</span>][:], temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_d, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'F'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>] = cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>] = cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>] = cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>] = cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_f, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'B'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">0</span>][<span class="number">0</span>] = cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_r[<span class="number">0</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">2</span>][<span class="number">2</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">0</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_l[<span class="number">0</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">2</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">2</span>] = cube_r[<span class="number">2</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_r[<span class="number">2</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">0</span>][<span class="number">2</span>] = cube_u[<span class="number">0</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">0</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_b, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'L'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>] = cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>] = cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_l, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>] = cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>] = cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_r, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            res += cube_u[i][j]</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15685. 드래곤커브</title>
    <url>/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/</url>
    <content><![CDATA[<h3 id="15685-드래곤커브"><a href="#15685-드래곤커브" class="headerlink" title="15685. 드래곤커브"></a>15685. 드래곤커브</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ol><li>0 : 우 1: 상 2: 좌 3: 우</li><li>규칙을 찾는다.</li></ol><ul><li>ex) 시작점이 (0, 0) 이고 시작 방향이 0 일 경우</li></ul><p><code>0 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_0.JPG" class="" title="curve0"><p><code>1 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_1.JPG" class="" title="curve1"><p><code>2 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_2.JPG" class="" title="curve2"><p><code>3 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_3.JPG" class="" title="curve3"><ul><li>위 그림을 참고하면 <code>x + 1</code>세대의 방향은 <code>x</code>세대의 끝점부터 시작점까지 +1 씩 해준 방향과 동일함을 알 수 있다. 따라서 입력 받는 <code>g</code>세대까지 방향 list를 구현하고 <code>Map</code>에 값을 채워 나가며 드래곤 커브를 구현할 수 있다.</li></ul><ol start="3"><li>기준 좌표로부터 →, ↓, ↘ 방향을 체크하여 모두 지나간 지점이면 정사각형의 꼭지점이 모두 드래곤 커브의 일부임을 알 수 있다.</li></ol>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>] * <span class="number">101</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">101</span>)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</span><br><span class="line">    x, y, d, g = map(int, input().split())</span><br><span class="line">    curve = [d]</span><br><span class="line">    Map[y][x] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(g):</span><br><span class="line">        curve += [(i + <span class="number">1</span>) % <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> curve[::<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> curve:</span><br><span class="line">        y = y + dy[i]</span><br><span class="line">        x = x + dx[i]</span><br><span class="line">        Map[y][x] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">4</span>:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15684. 사다리조작</title>
    <url>/2020/04/17/%5BBOJ%5D%2015684.%20%EC%82%AC%EB%8B%A4%EB%A6%AC%EC%A1%B0%EC%9E%91/</url>
    <content><![CDATA[<h3 id="15684-사다리조작"><a href="#15684-사다리조작" class="headerlink" title="15684. 사다리조작"></a>15684. 사다리조작</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15684" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ol><li>H * N 크기의 사다리를 만든다.</li><li>입력된 좌표의 값을 1로 바꾼다(사다리 연결)</li><li>solve()를 통해서 재귀적으로 가능한 사다리를 만든다.<ul><li>이 때, 가로줄은 연속적으로 만들지 않아도 된다는 것을 유의한다.</li><li>현재 위치가 0이면(옆 사다리와 연결되어 있지 않다면) 1로 만들어주고 (사다리를 연결해주고) x 좌표를 +2 해주어 한칸을 건너 뛴다.</li><li>사다리를 생성할 때마다 do()를 통해서 사다리를 돌려본다.</li><li>사다리 개수가 3을 초과할 때, 사다리 조작에 실패했을 때 추가한 사다리 개수가 3이면 return을 해준다.</li></ul></li><li>do()를 통해 사다리를 탄다.<ul><li>현재 x 위치를 temp에 저장 후, y 가 사다리의 마지막에 도착했을 때 x 와 temp를 비교</li><li>현재 위치 값이 1 이라면 오른쪽으로 1칸 이동</li><li>현재 위치 값이 0 이라면 왼쪽을 탐색 후 왼쪽이 1일 경우 왼쪽으로 1칸 이동</li></ul></li></ol>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        temp = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> ladder[j][temp]:</span><br><span class="line">                temp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> temp &gt; <span class="number">0</span> <span class="keyword">and</span> ladder[j][temp<span class="number">-1</span>]:</span><br><span class="line">                temp -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i != temp:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, y, x)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> cnt &gt;= res:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> do():</span><br><span class="line">        res = min(res, cnt)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y, H):</span><br><span class="line">        temp = x <span class="keyword">if</span> i == y <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(temp, N<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ladder[i][j]:</span><br><span class="line">                ladder[i][j] = <span class="number">1</span></span><br><span class="line">                solve(cnt + <span class="number">1</span>, i, j + <span class="number">2</span>)</span><br><span class="line">                ladder[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">N, M, H = map(int, input().split())</span><br><span class="line">ladder = [[<span class="number">0</span>] * (N) <span class="keyword">for</span> _ <span class="keyword">in</span> range(H)]</span><br><span class="line">res = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    ladder[a<span class="number">-1</span>][b<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">solve(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">print(res <span class="keyword">if</span> res &lt; <span class="number">4</span> <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>backtracking</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 기본 - Tree (1)</title>
    <url>/2020/04/16/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EA%B8%B0%EB%B3%B8%20-%20Tree%20(1)/</url>
    <content><![CDATA[<h3 id="5174-subtree-5178-노드의-합"><a href="#5174-subtree-5178-노드의-합" class="headerlink" title="5174. subtree  / 5178. 노드의 합"></a>5174. subtree  / 5178. 노드의 합</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDN86AAXw5UW6&subjectId=AWOVJ-_6qfsDFAWg" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

<h3 id="subtree"><a href="#subtree" class="headerlink" title="- subtree"></a>- subtree</h3></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtree</span><span class="params">(s, cnt)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lis), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] == s <span class="keyword">and</span> <span class="keyword">not</span> visit[i]:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            subtree(lis[i+<span class="number">1</span>], cnt + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(T):</span><br><span class="line">    r, s = map(int, input().split())</span><br><span class="line">    lis = list(map(int, input().split()))</span><br><span class="line">    visit = [<span class="number">0</span>] * len(lis)</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lis), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] == s:</span><br><span class="line">            visit[i] = <span class="literal">True</span></span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            subtree(lis[i+<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">            visit[i] = <span class="literal">False</span></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="노드의-합"><a href="#노드의-합" class="headerlink" title="- 노드의 합"></a>- 노드의 합</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(T):</span><br><span class="line">    N, M, L = map(int, input().split())</span><br><span class="line">    lis = [<span class="number">0</span>] * (N+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(M):</span><br><span class="line">        a, b = map(int, input().split())</span><br><span class="line">        lis[a] = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        lis[N//<span class="number">2</span>] = lis[N]</span><br><span class="line">        N -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> N &gt; <span class="number">1</span>:</span><br><span class="line">        lis[N//<span class="number">2</span>] = lis[N] + lis[N<span class="number">-1</span>]</span><br><span class="line">        N -= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;lis[L]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>tree</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15683. 감시</title>
    <url>/2020/04/15/%5BBOJ%5D%2015683.%20%EA%B0%90%EC%8B%9C/</url>
    <content><![CDATA[<h3 id="15683-감시"><a href="#15683-감시" class="headerlink" title="15683. 감시"></a>15683. 감시</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>예전 c++로 풀 때는 하나하나 다 구현하였는데, python을 배우면서 쉽게 접근이 가능했다.</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 상 하 좌 우</span></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(idx, m)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> idx == len(cctv):</span><br><span class="line">        <span class="comment"># 행마다 0인 값을 카운트</span></span><br><span class="line">        temp = sum([i.count(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> m])</span><br><span class="line">        cnt = min(cnt, temp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    y, x, n = cctv[idx]</span><br><span class="line">    <span class="comment"># cctv의 번호에 맞게 방향을 꺼내준다.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> di[n]:</span><br><span class="line">        cpMap = copy.deepcopy(m)</span><br><span class="line">        <span class="comment"># 방향 설정</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">            ny, nx = y, x</span><br><span class="line">            <span class="keyword">while</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="comment"># 벽이면</span></span><br><span class="line">                <span class="keyword">if</span> cpMap[ny][nx] == <span class="number">6</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 감시</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cpMap[ny][nx] = <span class="number">7</span></span><br><span class="line">                ny += dy[i]</span><br><span class="line">                nx += dx[i]</span><br><span class="line">        <span class="comment"># 재귀를 통한 반복</span></span><br><span class="line">        dfs(idx + <span class="number">1</span>, cpMap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</span><br><span class="line">cctv = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">            cctv.append((i,j,Map[i][j]))</span><br><span class="line"><span class="comment"># cctv의 번호에 따라 바라볼 수 있는 방향을 다 넣어둠</span></span><br><span class="line">di = [<span class="number">0</span>,[[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]]</span><br><span class="line"></span><br><span class="line">cnt = float(<span class="string">'inf'</span>)</span><br><span class="line">dfs(<span class="number">0</span>, Map)</span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

<h4 id="C-예전-풀이"><a href="#C-예전-풀이" class="headerlink" title="C++ (예전 풀이)"></a>C++ (예전 풀이)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 987654321</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, Map[<span class="number">9</span>][<span class="number">9</span>], ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; cctv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> dir, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">// 0 : 북 , 1: 동 , 2 : 남 , 3 : 서</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;<span class="comment">//위쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">0</span>)</span><br><span class="line">				Map[i][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;<span class="comment">//오른쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = y + <span class="number">1</span>; i &lt; M; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">0</span>)</span><br><span class="line">				Map[x][i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;<span class="comment">//아래쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">0</span>)</span><br><span class="line">				Map[i][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;<span class="comment">//왼쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = y - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">0</span>)</span><br><span class="line">				Map[x][i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (check == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (Map[i][j] == <span class="number">0</span>)</span><br><span class="line">					cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ans = <span class="built_in">min</span>(ans, cnt);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> x = cctv[check].first;</span><br><span class="line">	<span class="keyword">int</span> y = cctv[check].second;</span><br><span class="line">	<span class="keyword">int</span> cpMap[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">			cpMap[i][j] = Map[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">2</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see(dir + <span class="number">2</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see((dir + <span class="number">1</span>)%<span class="number">4</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see((dir + <span class="number">1</span>) % <span class="number">4</span>, x, y);</span><br><span class="line">			see((dir + <span class="number">2</span>) % <span class="number">4</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">5</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++)</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">		dfs(check + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Map[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (Map[i][j] &gt; <span class="number">0</span> &amp;&amp; Map[i][j] &lt; <span class="number">6</span>)</span><br><span class="line">				cctv.push_back(make_pair(i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = MAX;</span><br><span class="line">	dfs(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>c++</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14891. 톱니바퀴</title>
    <url>/2020/03/24/%5BBOJ%5D%2014891.%20%ED%86%B1%EB%8B%88%EB%B0%94%ED%80%B4/</url>
    <content><![CDATA[<h3 id="14891-톱니바퀴"><a href="#14891-톱니바퀴" class="headerlink" title="14891. 톱니바퀴"></a>14891. 톱니바퀴</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14891" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotation</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">        temp = gear[n].pop()</span><br><span class="line">        gear[n].insert(<span class="number">0</span>, temp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = gear[n].pop(<span class="number">0</span>)</span><br><span class="line">        gear[n].append(temp)</span><br><span class="line">gear = [list(map(int, input())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">rotate, res = [], <span class="number">0</span></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(K):</span><br><span class="line">    rotate.append(list(map(int, input().split())))</span><br><span class="line"><span class="keyword">for</span> n, d <span class="keyword">in</span> rotate:</span><br><span class="line">    state = [(n <span class="number">-1</span>, d)]</span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">2</span>] != gear[i+<span class="number">1</span>][<span class="number">6</span>]:</span><br><span class="line">                state.append((i + <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">6</span>] != gear[i<span class="number">-1</span>][<span class="number">2</span>]:</span><br><span class="line">                state.append((i - <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> state:</span><br><span class="line">        rotation(a, b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> gear[i][<span class="number">0</span>]:</span><br><span class="line">        res += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14890. 경사로</title>
    <url>/2020/03/23/%5BBOJ%5D%2014890.%20%EA%B2%BD%EC%82%AC%EB%A1%9C/</url>
    <content><![CDATA[<h3 id="14890-경사로"><a href="#14890-경사로" class="headerlink" title="14890. 경사로"></a>14890. 경사로</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14890" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 가로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] == Map[i][idx]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[i][idx - <span class="number">1</span>] - Map[i][idx]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] &lt; Map[i][idx]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][idx] == Map[i][j]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 세로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] == Map[idx][i]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[idx - <span class="number">1</span>][i] - Map[idx][i]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] &lt; Map[idx][i]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[idx][i] == Map[j][i]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14889. 스타트와 링크</title>
    <url>/2020/03/21/%5BBOJ%5D%2014889.%20%EC%8A%A4%ED%83%80%ED%8A%B8%EC%99%80%20%EB%A7%81%ED%81%AC/</url>
    <content><![CDATA[<h3 id="14889-스타트와-링크"><a href="#14889-스타트와-링크" class="headerlink" title="14889. 스타트와 링크"></a>14889. 스타트와 링크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14889" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">comb = list(combinations(range(N), N//<span class="number">2</span>))</span><br><span class="line">count = len(list(combinations(range(N), N//<span class="number">2</span>)))//<span class="number">2</span></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(count):</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                a += Map[comb[l][i]][comb[l][j]] + Map[comb[l][j]][comb[l][i]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                b += Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]] + Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]]</span><br><span class="line">        res = min(res, abs(a-b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14888. 연산자 끼워넣기</title>
    <url>/2020/03/19/%5BBOJ%5D%2014888.%20%EC%97%B0%EC%82%B0%EC%9E%90%20%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14888-연산자-끼워넣기"><a href="#14888-연산자-끼워넣기" class="headerlink" title="14888. 연산자 끼워넣기"></a>14888. 연산자 끼워넣기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">numbers = list(map(int, input().split()))</span><br><span class="line">plus, minus, product, divide = map(int, input().split())</span><br><span class="line">max_n = <span class="number">-10e10</span></span><br><span class="line">min_n = <span class="number">10e10</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(plus, minus, product, divide, cnt, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cnt == N<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">global</span> max_n, min_n</span><br><span class="line">        max_n = max(number, max_n)</span><br><span class="line">        min_n = min(number, min_n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> plus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus - <span class="number">1</span>, minus, product, divide, cnt + <span class="number">1</span>, number + numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> minus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus - <span class="number">1</span>, product, divide, cnt + <span class="number">1</span>, number - numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> product &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product - <span class="number">1</span>, divide, cnt + <span class="number">1</span>, number * numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> divide &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product, divide - <span class="number">1</span>, cnt + <span class="number">1</span>, int(number / numbers[cnt+<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">calc(plus, minus, product, divide, <span class="number">0</span>, numbers[<span class="number">0</span>])</span><br><span class="line">print(max_n)</span><br><span class="line">print(min_n)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14499. 주사위 굴리기</title>
    <url>/2020/03/18/%5BBOJ%5D%2014499.%20%EC%A3%BC%EC%82%AC%EC%9C%84%20%EA%B5%B4%EB%A6%AC%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14499-주사위-굴리기"><a href="#14499-주사위-굴리기" class="headerlink" title="14499. 주사위 굴리기"></a>14499. 주사위 굴리기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>굴리는 것만 생각하면 된다. 방향은 틀어 지지 않는다.</p><p>그래서 상하좌우로 굴려질 때, 각 위치가 이동되어 지는 위치만을 고려하여 풀이하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">direction = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line">d = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">N, M, y, x, K = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">move = list(map(int, input().split()))</span><br><span class="line">dice, temp = [<span class="number">0</span>] * <span class="number">6</span>, [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> move:</span><br><span class="line">    y += d[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    x += d[i<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &gt; y <span class="keyword">or</span> y &gt;= N <span class="keyword">or</span> <span class="number">0</span> &gt; x <span class="keyword">or</span> x &gt;= M:</span><br><span class="line">        y -= d[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        x -= d[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    temp = dice[:]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        dice[j] = temp[direction[i<span class="number">-1</span>][j]<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = dice[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dice[<span class="number">5</span>], Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">    print(dice[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13458. 시험 감독</title>
    <url>/2020/03/18/%5BBOJ%5D%2013458.%20%EC%8B%9C%ED%97%98%20%EA%B0%90%EB%8F%85/</url>
    <content><![CDATA[<h3 id="13458-시험-감독"><a href="#13458-시험-감독" class="headerlink" title="13458. 시험 감독"></a>13458. 시험 감독</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13458" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">student = list(map(int, input().split()))</span><br><span class="line">B, C = map(int, input().split())</span><br><span class="line">cnt = N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> student:</span><br><span class="line">    a = i - B</span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (a % C) == <span class="number">0</span>:</span><br><span class="line">            cnt += a // C</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt += (a//C) + <span class="number">1</span></span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 3190. 뱀</title>
    <url>/2020/03/17/%5BBOJ%5D%203190.%20%EB%B1%80/</url>
    <content><![CDATA[<h3 id="3190-뱀"><a href="#3190-뱀" class="headerlink" title="3190. 뱀"></a>3190. 뱀</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/3190" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_check</span><span class="params">(d, str)</span>:</span> <span class="comment"># 방향을 돌려준다.</span></span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">'D'</span>:</span><br><span class="line">        d = (d + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> str == <span class="string">'L'</span>:</span><br><span class="line">        d = (d - <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(snake)</span>:</span> <span class="comment"># 방향따라 한칸씩 이동</span></span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">2</span>] == <span class="number">0</span>:</span><br><span class="line">        snake[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        snake[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">2</span>:</span><br><span class="line">        snake[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">3</span>:</span><br><span class="line">        snake[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> snake</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    snake = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]   <span class="comment"># 초기 뱀의 위치, 방향</span></span><br><span class="line">    route.append([<span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># 뱀이 움직이는 경로</span></span><br><span class="line">    Map[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    t_idx = end_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = move(snake) <span class="comment"># 뱀의 이동</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> s[<span class="number">1</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> N &lt; s[<span class="number">0</span>] <span class="keyword">or</span> N &lt; s[<span class="number">1</span>] <span class="keyword">or</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] == <span class="number">1</span>:</span><br><span class="line">            end_time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] != <span class="number">2</span>: <span class="comment"># 사과가 없으면</span></span><br><span class="line">            a, b = route.pop(<span class="number">0</span>) <span class="comment"># 꼬리 당기기</span></span><br><span class="line">            Map[a][b] = <span class="number">0</span></span><br><span class="line">        Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">        route.append([s[<span class="number">0</span>], s[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        snake = s[:] <span class="comment"># 이동한 위치를 다시 snake에 저장</span></span><br><span class="line"></span><br><span class="line">        end_time += <span class="number">1</span> <span class="comment"># 1초 증가</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t_idx != len(time):</span><br><span class="line">            <span class="keyword">if</span> end_time == int(time[t_idx][<span class="number">0</span>]): <span class="comment"># 이동 시간에 이동</span></span><br><span class="line">                snake[<span class="number">2</span>] = dir_check(snake[<span class="number">2</span>], time[t_idx][<span class="number">1</span>])</span><br><span class="line">                t_idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end_time</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>]*(N+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">time = []</span><br><span class="line">route = []</span><br><span class="line"></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    Map[a][b] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">L = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(L):</span><br><span class="line">    a, b = list(input().split())</span><br><span class="line">    time.append((a,b))</span><br><span class="line"></span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 12100. 2048 (Easy)</title>
    <url>/2020/03/17/%5BBOJ%5D%2012100.%202048%20(Easy)/</url>
    <content><![CDATA[<h3 id="12100-2048-Easy"><a href="#12100-2048-Easy" class="headerlink" title="12100. 2048 (Easy)"></a>12100. 2048 (Easy)</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작 전, 초기 맵의 MAX값을 res에 넣어 두고 시작한다.</p><p>product 내장 함수를 통해서 중복순열을 구현하여 시뮬레이션을 돌렸다.</p><p>같은 값을 더해주고 이동시키면서 한칸한칸 전진하려 했는데 헷갈려서</p><p>같은 값을 찾아서 모두 더해준 후 각 방향에 따라서 이동시켜 주는 식으로 풀이 하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(S, n)</span>:</span></span><br><span class="line">    temp = n</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> range(len(S)):</span><br><span class="line">        <span class="keyword">if</span> S[d] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]: <span class="keyword">continue</span></span><br><span class="line">                    cnt = <span class="number">1</span>; flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j + cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j + cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j + cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[j][i], Map[k][i] = Map[k][i], Map[j][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j - cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j - cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j - cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[k][i], Map[j][i] = Map[j][i], Map[k][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j + cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j + cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j + cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][j], Map[i][k] = Map[i][k], Map[i][j]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j - cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j - cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j - cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][k], Map[i][j] = Map[i][j], Map[i][k]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">cpMap = deepcopy(Map)</span><br><span class="line">lis = list(product(range(<span class="number">4</span>), repeat=<span class="number">5</span>))</span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    temp = max(temp, *Map[i])</span><br><span class="line">res = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)):</span><br><span class="line">    n = move(lis[i], res)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">    Map = deepcopy(cpMap)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13460. 구슬 탈출 2</title>
    <url>/2020/03/17/%5BBOJ%5D%2013460.%20%EA%B5%AC%EC%8A%AC%20%ED%83%88%EC%B6%9C%202/</url>
    <content><![CDATA[<h3 id="13460-구슬-탈출-2"><a href="#13460-구슬-탈출-2" class="headerlink" title="13460. 구슬 탈출 2"></a>13460. 구슬 탈출 2</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(dir, y, x, hy, hx)</span>:</span> <span class="comment"># 각 방향으로 이동하면서 홀에 빠지는지 체크</span></span><br><span class="line">    cnt = hole = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>: <span class="comment"># 상</span></span><br><span class="line">        <span class="keyword">while</span> Map[y - cnt - <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y - cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y -= cnt</span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>: <span class="comment"># 하</span></span><br><span class="line">        <span class="keyword">while</span> Map[y + cnt + <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y + cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y += cnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>: <span class="comment"># 좌</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x - cnt - <span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x - cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x -= cnt</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 우</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x + cnt +<span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x + cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x += cnt</span><br><span class="line">    <span class="keyword">return</span> hole, y, x, cnt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_rb</span><span class="params">(dir, ry, rx, by, bx, res)</span>:</span> <span class="comment"># 같은 자리니까 더 많이 움직인 쪽이 멀리 있으니까 한칸 덜 오도록</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ry, rx, by, bx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, d, ry, rx, by, bx, hy, hx)</span>:</span> <span class="comment"># red, blue, hole</span></span><br><span class="line">    dq = deque()</span><br><span class="line">    dq.append([cnt, d, ry, rx, by, bx, hy, hx])</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        cnt, d, ry, rx, by, bx, hy, hx = dq.popleft()</span><br><span class="line">        <span class="keyword">if</span> cnt &gt; <span class="number">9</span>:</span><br><span class="line">            result = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="comment"># 상하좌우 체크</span></span><br><span class="line">            <span class="keyword">if</span> cnt != <span class="number">0</span>: <span class="comment"># 처음에는 상하좌우 다 돌아야 되기 때문에 거를 필요 없음</span></span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">0</span> <span class="keyword">or</span> d == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> d == <span class="number">2</span> <span class="keyword">or</span> d == <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">or</span> i == <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            b_check, next_by, next_bx, b_cnt = move(i, by, bx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> b_check: <span class="comment"># 파란색 공이 빠졌으면 진행할 필요없이 다음으로</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            r_check, next_ry, next_rx, r_cnt = move(i, ry, rx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> r_check: <span class="comment"># 빨간색 공이 빠졌으면 끝</span></span><br><span class="line">                result = cnt + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> next_ry == next_by <span class="keyword">and</span> next_rx == next_bx: <span class="comment"># 옮겼을 때, 같은 위치면 이동</span></span><br><span class="line">                next_ry, next_rx, next_by, next_bx = compare_rb(i, next_ry, next_rx, next_by, next_bx, b_cnt &gt; r_cnt)</span><br><span class="line">            </span><br><span class="line">            dq.append([cnt + <span class="number">1</span>, i, next_ry, next_rx, next_by, next_bx, hy, hx])</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'B'</span>:</span><br><span class="line">            blue_y = i; blue_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'R'</span>:</span><br><span class="line">            red_y = i; red_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'O'</span>:</span><br><span class="line">            hole_y = i; hole_x = j</span><br><span class="line"></span><br><span class="line">print(solve(<span class="number">0</span>, <span class="literal">None</span>, red_y, red_x, blue_y, blue_x, hole_y, hole_x))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14502. 연구소</title>
    <url>/2020/03/16/%5BBOJ%5D%2014502.%20%EC%97%B0%EA%B5%AC%EC%86%8C/</url>
    <content><![CDATA[<h3 id="14502-연구소"><a href="#14502-연구소" class="headerlink" title="14502. 연구소"></a>14502. 연구소</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>바이러스 위치를 virus 리스트에 담고, 0의 위치를 comb 리스트를 담았다.</p><p>combinations 함수를 통해 comb 리스트안의 요소들로 조합을 만들어 bfs를 돌리며</p><p>안전영역의 최대값을 구했다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(visit)</span>:</span></span><br><span class="line">    cnt = len(comb) - <span class="number">3</span></span><br><span class="line">    q = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> virus:</span><br><span class="line">        q.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            ny = y + a</span><br><span class="line">            nx = x + b</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx] <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line">                    cnt -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cnt &lt;= res: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">virus = []</span><br><span class="line">comb = []</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            virus.append([i, j])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]:</span><br><span class="line">            comb.append([i, j])</span><br><span class="line">c = list(combinations(comb, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</span><br><span class="line">    visit = [[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        y, x = c[i][j][<span class="number">0</span>], c[i][j][<span class="number">1</span>]</span><br><span class="line">        visit[y][x] = <span class="number">1</span></span><br><span class="line">    n = bfs(visit)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14500. 테트로미노</title>
    <url>/2020/03/16/%5BBOJ%5D%2014500.%20%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8/</url>
    <content><![CDATA[<h3 id="14500-테트로미노"><a href="#14500-테트로미노" class="headerlink" title="14500. 테트로미노"></a>14500. 테트로미노</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>문제 그대로 구현했다. 블럭을 순서를 매기고 회전할 수 있는 방향을 하나하나 다 지정해주었다.</p><p>문제를 제대로 읽었어야 했다. 회전까지는 만들고 대칭을 안읽어서 헤맸었다.</p><p>회전과 대칭이 모두 가능하다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = map(int, input().split()) <span class="comment"># N * M</span></span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="comment"># 1번</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">3</span> &lt; M:</span><br><span class="line">            res.add(sum(Map[i][j:j+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">3</span> &lt; N:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, i + <span class="number">4</span>):</span><br><span class="line">                temp += Map[k][j]</span><br><span class="line">            res.add(temp)</span><br><span class="line">        <span class="comment"># 2번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># 3번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j<span class="number">-1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 4번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i + <span class="number">1</span>][j] + Map[i + <span class="number">1</span>][j - <span class="number">1</span>] + Map[i + <span class="number">2</span>][j - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 5번</span></span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i<span class="number">-1</span>][j] + Map[i][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">print(max(res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14503. 로봇 청소기</title>
    <url>/2020/03/16/%5BBOJ%5D%2014503.%20%EB%A1%9C%EB%B4%87%20%EC%B2%AD%EC%86%8C%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14503-로봇-청소기"><a href="#14503-로봇-청소기" class="headerlink" title="14503. 로봇 청소기"></a>14503. 로봇 청소기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작위치 ry, rx 와 방향 d를 받아서 풀이를 진행한다.</p><p>0 : 북, 1 : 동, 2 : 남, 3 : 서</p><p>방향이 지정되어 있고 문제의 조건에 현재 방향의 왼쪽부터 탐색한다고 되어 있으므로</p><p>탐색 방향을 dir + 3 - i 로 지정해 주었다.</p><p>다음 2 - c 조건에 의해서 4방향 다 청소가 되어 있는 경우</p><p>방향에 +2를 해주어 반대방향으로 설정해주고 다시 solve함수를 호출한다.</p><p>이 때, 2 - d의 조건인 반대방향이 벽이면 그대로 종료한다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(y, x, dir)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = <span class="number">2</span></span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a, b = d[(dir + <span class="number">3</span> - i) % <span class="number">4</span>]</span><br><span class="line">        ny = y + a</span><br><span class="line">        nx = x + b</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M <span class="keyword">and</span> <span class="keyword">not</span> Map[ny][nx]:</span><br><span class="line">            solve(ny,  nx, (dir + <span class="number">3</span> - i) % <span class="number">4</span>)</span><br><span class="line">    <span class="comment">#4방향 다 청소 되어 있는 경우</span></span><br><span class="line">    a, b = d[(dir+<span class="number">2</span>) % <span class="number">4</span>]</span><br><span class="line">    ny = y + a</span><br><span class="line">    nx = x + b</span><br><span class="line">    <span class="keyword">if</span> Map[ny][nx] == <span class="number">1</span>:</span><br><span class="line">        print(res); sys.exit(<span class="number">0</span>)</span><br><span class="line">    solve(ny, nx, dir)</span><br><span class="line"><span class="comment"># 0123 북동남서</span></span><br><span class="line">d = [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">-1</span>]]</span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">ry, rx, dir = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">solve(ry, rx, dir)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>첫 포스팅! 꾸준하자</title>
    <url>/2020/03/16/%5B1%5D%EC%B2%AB%20%ED%8F%AC%EC%8A%A4%ED%8C%85/</url>
    <content><![CDATA[<p>​           <a id="more"></a></p>
<div class="note warning">
            <ul><li>생각나는 것들 기록하기</li><li>하루 최소 1commit 하기</li><li>공부한 거 정리</li></ul>
          </div>

]]></content>
  </entry>
</search>
