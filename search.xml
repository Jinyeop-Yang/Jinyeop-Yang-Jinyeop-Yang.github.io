<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[BOJ] 9012. 괄호</title>
    <url>/2020/12/31/%5BBOJ%5D%209012.%20%EA%B4%84%ED%98%B8/</url>
    <content><![CDATA[<h3 id="9012-괄호"><a href="#9012-괄호" class="headerlink" title="9012. 괄호"></a>9012. 괄호</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/9012" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    lis = list(input())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">'('</span>:</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">')'</span>:</span><br><span class="line">            <span class="keyword">if</span> a == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            a -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"YES"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"NO"</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(<span class="string">"NO"</span>)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N, n, b;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">	<span class="keyword">char</span> s[MAX];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">		<span class="keyword">int</span> l = <span class="built_in">strlen</span>(s);</span><br><span class="line">		n = b = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; l; j++) &#123;</span><br><span class="line">			n += (s[j] == <span class="string">'('</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">				b = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!b) &#123;</span><br><span class="line">			<span class="keyword">if</span> (n != <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
        <tag>stack</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>[OS] Process and Thread</title>
    <url>/2020/11/01/%5BOS%5D%20Process%20and%20Thread/</url>
    <content><![CDATA[<h3 id="프로세스와-스레드"><a href="#프로세스와-스레드" class="headerlink" title="프로세스와 스레드"></a>프로세스와 스레드</h3><h4 id="프로세스-Process"><a href="#프로세스-Process" class="headerlink" title="프로세스(Process)"></a>프로세스(Process)</h4><blockquote>
<p>프로세스는 실행 중인 프로그램으로 디스크로부터 메모리에 적재되어 CPU의 할당을 받을 수 있는 것을 말한다. 운영체제로부터 주소 공간, 파일, 메모리 등을 할당받으며 이것들을 총칭하여 <strong><em>프로세스</em></strong> 라고 한다.</p>
<p>구체적으로 살펴보면 프로세스는 함수의 매개변수, 복귀 주소와 로컬 변수와 같은 임시 자료를 갖는 프로세스 스택과 전역 변수들을 수록하는 데이터 섹션을 포함한다. 또한, 프로세스는 프로세스 실행 중에 동적으로 할당되는 메모리인 힙을 포함한다.</p>
</blockquote>
<h5 id="프로세스-제어-블록-PCB-Process-Control-Block"><a href="#프로세스-제어-블록-PCB-Process-Control-Block" class="headerlink" title="프로세스 제어 블록(PCB, Process Control Block)"></a>프로세스 제어 블록(PCB, Process Control Block)</h5><blockquote>
<p><strong>PCB</strong>는 <strong>특정 프로세스에 대한 중요한 정보를 저장하고 있는 운영체제의 자료구조</strong>이다.  운영체제는 프로세스를 관리하기 위해 <strong>프로세스의 생성과 동시에 고유한 PCB를 생성</strong>한다. 프로세스는 CPU를 할당받아 작업을 처리하다가도 프로세스 전환이 발생하면 진행하던 작업을 저장하고 CPU를 반환해야 하는데, 이 때 작업의 진행 상황을 모두 PCB에 저장하게 된다. 그리고 다시 CPU를 할당받게 되면 PCB에 저장되어있던 내용을 불러와 이전에 종료됐던 시점부터 다시 작업을 수행한다.</p>
</blockquote>
<a id="more"></a>

<ul>
<li>PCB에 저장되는 정보<ul>
<li>프로세스 식별자 (Process ID, PID)</li>
<li>프로세스 상태 : new, ready, running, waiting, terminated 등의 상태 저장</li>
<li>프로그램 카운터( PC ) : 프로세스가 다음에 실행할 명령어의 주소</li>
<li>CPU 레지스터</li>
<li>CPU 스케쥴링 정보 : 프로세스의 우선순위, 스케줄 큐에 대한 포인터 등</li>
<li>메모리 관리 정보 : 페이지 테이블 또는 세그먼트 테이블 등과 같은 정보를 포함</li>
<li>입출력 상태 정보 : 프로세스에 할당된 입출력 장치들과 열린 파일 목록</li>
<li>어카운팅 정보 : 사용된 CPU시간, 시간제한, 계정번호 등</li>
</ul>
</li>
</ul>
<div style="display: flex">
    <img src="/images/process.png" alt="process" width="300">
    <img src="/images/memory.png" alt="memory" width="300">
</div>



<p>프로세스는 각각 독립된 메모리 영역 (Code, Data, Stack, Heap)을 할당받는다.</p>
<ul>
<li><p>Code</p>
<ul>
<li><strong>사용자가 작성하는 소스코드 or 함수, 제어문, 상수 등</strong>이 저장되는 영역</li>
<li>프로그램이 시작하고 끝날 때까지 메모리에 적재</li>
</ul>
</li>
<li><p>Data</p>
<ul>
<li><strong>전역 변수 or Static 변수</strong>가 저장되는 영역</li>
<li>프로그램 실행 시  할당되고 끝날 때까지 메모리에 적재</li>
<li>BSS 영역과 Data 영역으로 나뉜다.<ul>
<li>BSS(Block Stated Symbol) 영역<ul>
<li>초기화가 되지 않은 변수들이 저장</li>
</ul>
</li>
<li>Data 영역<ul>
<li>초기화가 이루어진 변수들이 저장</li>
<li>ROM에 위치하는데, 전역변수와 Static 변수를 ROM에 저장하면 런타임 시 변경된 값이 적용되지 않고, 계속 초기값만 가지고 있게 된다( ROM = Read Only ). 그래서 RAM에 복사해서 런타임 시 변경되는 값을 저장할 수 있도록 함</li>
</ul>
</li>
</ul>
</li>
<li>BSS 영역과 Data영역을 나누는 이유?<ul>
<li>초기화되지 않은 데이터들까지 ROM에 저장되면 큰 사이즈의 ROM이 필요하기 때문</li>
</ul>
</li>
</ul>
</li>
<li><p>Stack</p>
<ul>
<li>함수 호출 시 생성되는 <strong>지역 변수와 매개 변수</strong>가 저장</li>
<li>즉, 함수 호출시 할당되며 함수가 종료되면 시스템에 반환되는 메모리 영역</li>
<li>컴파일 시, 크기가 결정</li>
<li>메모리의 높은 주소에서 메모리의 낮은 주소로 할당</li>
<li>Heap의 메모리 영역 침범시 Stack overflow 발생</li>
</ul>
</li>
<li><p>Heap</p>
<ul>
<li>사용자가 <strong>동적으로 할당하고 해제</strong>하는 메모리 영역</li>
<li>C / C++ : malloc(), new[]로 할당하고 free(), delete[]를 통해 해제</li>
<li>런타임 시, 크기가 결정</li>
<li>메모리의 낮은 주소에서 메모리의 높은 주소로 할당</li>
<li>Stack의 메모리 영역 침범시 Heap overflow 발생</li>
</ul>
</li>
</ul>
<div class="note warning">
            <p>왜 여러 프로세스(멀티 프로세스)로 할 수 있는 작업들을 굳이 하나의 프로세스에서 스레드로 나누는가?</p><p>-&gt; 시스템 자원을 효율적으로 관리하기 위해서!</p>
          </div>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>process</tag>
        <tag>thread</tag>
        <tag>operating system</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17142. 연구소3</title>
    <url>/2020/10/10/%5BBOJ%5D%2017142.%20%EC%97%B0%EA%B5%AC%EC%86%8C3/</url>
    <content><![CDATA[<h3 id="17142-연구소3"><a href="#17142-연구소3" class="headerlink" title="17142. 연구소3"></a>17142. 연구소3</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17142" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>combinations, deque</p><p>비활성 바이러스는 거리 체크 X</p><p>BFS 탐색을 하며 최대 거리를 꾸준히 갱신</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = []</span><br><span class="line">q = deque()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(lis)</span>:</span></span><br><span class="line">    visit = [[<span class="number">-1</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    virus = deque()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> lis:</span><br><span class="line">        virus.append(v)</span><br><span class="line">        visit[v[<span class="number">0</span>]][v[<span class="number">1</span>]] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    max_dist = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> virus:</span><br><span class="line">        y, x = virus.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[i]</span><br><span class="line">            nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> Map[ny][nx] != <span class="number">1</span> <span class="keyword">and</span> visit[ny][nx] == <span class="number">-1</span>:</span><br><span class="line">                visit[ny][nx] = visit[y][x] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> Map[ny][nx] == <span class="number">0</span>:</span><br><span class="line">                    max_dist = max(max_dist, visit[ny][nx])</span><br><span class="line">                virus.append((ny, nx))</span><br><span class="line">                </span><br><span class="line">    a = list(sum(visit, []))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> a.count(<span class="number">-1</span>) == list(sum(Map, [])).count(<span class="number">1</span>):</span><br><span class="line">        res.append(max_dist)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            q.append((i, j))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> combinations(q, M):</span><br><span class="line">    t = bfs(i)</span><br><span class="line"></span><br><span class="line">print(min(res) <span class="keyword">if</span> res <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 52</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX], cpmap[MAX][MAX], MIN = <span class="number">10e6</span>;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; virus, m_virus;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">	<span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line">		Q.push(make_pair(m_virus[i].first, m_virus[i].second));</span><br><span class="line">		cpmap[m_virus[i].first][m_virus[i].second] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line"></span><br><span class="line">		Q.pop();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">			<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (ny &gt;= N || ny &lt; <span class="number">0</span> || nx &gt;= N || nx &lt; <span class="number">0</span> || cpmap[ny][nx] == <span class="number">1</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">			cpmap[ny][nx] = cpmap[y][x] + <span class="number">1</span>;</span><br><span class="line">			visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">			</span><br><span class="line">			Q.push(make_pair(ny, nx));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!visit[i][j] &amp;&amp; !cpmap[i][j])</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">0</span>)</span><br><span class="line">				time = <span class="built_in">max</span>(time, cpmap[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MIN = <span class="built_in">min</span>(MIN, time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">comb</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">		<span class="built_in">memcpy</span>(cpmap, <span class="built_in">map</span>, <span class="keyword">sizeof</span>(cpmap));</span><br><span class="line"></span><br><span class="line">		bfs();</span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = idx; i &lt; virus.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!visit[virus[i].first][virus[i].second]) &#123;</span><br><span class="line">			visit[virus[i].first][virus[i].second] = <span class="literal">true</span>;</span><br><span class="line">			m_virus.push_back(make_pair(virus[i].first, virus[i].second));</span><br><span class="line">			comb(i + <span class="number">1</span>, cnt + <span class="number">1</span>);</span><br><span class="line">			m_virus.pop_back();</span><br><span class="line">			visit[virus[i].first][virus[i].second] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">				virus.push_back(make_pair(i, j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	comb(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (MIN == <span class="number">10e6</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; MIN;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17140. 이차원 배열과 연산</title>
    <url>/2020/10/10/%5BBOJ%5D%2017140.%20%EC%9D%B4%EC%B0%A8%EC%9B%90%20%EB%B0%B0%EC%97%B4%EA%B3%BC%20%EC%97%B0%EC%82%B0/</url>
    <content><![CDATA[<h3 id="17140-이차원-배열과-연산"><a href="#17140-이차원-배열과-연산" class="headerlink" title="17140. 이차원 배열과 연산"></a>17140. 이차원 배열과 연산</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17140" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>Counter -&gt; 값을 ㅇictionary 형태로 반환 해줌</p><p>get(0)을 통해 0인 값을 삭제</p><p>zip을 통해 행/열 변환</p><p>sum(list, []) -&gt; 일차원 배열로 합쳐준다.</p><blockquote><p>ex) </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line">sum(list, [])</span><br><span class="line"><span class="comment"># 출력 값</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></blockquote>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">r, c , k = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(time &lt;= <span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 행의 길이가 열의 길이보다 길 때</span></span><br><span class="line">    <span class="keyword">if</span> r - <span class="number">1</span> &lt; len(Map) <span class="keyword">and</span> c - <span class="number">1</span> &lt; len(Map[<span class="number">0</span>]) <span class="keyword">and</span> Map[r<span class="number">-1</span>][c<span class="number">-1</span>] == k:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># C 연산</span></span><br><span class="line">    C_flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> len(Map) &lt; len(Map[<span class="number">0</span>]):</span><br><span class="line">        C_flag = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 행 열 바꾸기</span></span><br><span class="line">        Map = list(zip(*Map))</span><br><span class="line">    <span class="comment"># if len_r &gt;= len_c:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># C 연산일 때는 행과 열을 바꿨으므로</span></span><br><span class="line">    <span class="comment"># R 연산인 경우만 계산하면 된다.</span></span><br><span class="line">    max_len = <span class="number">0</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> Map:</span><br><span class="line">        lis = Counter(row)</span><br><span class="line">        <span class="keyword">if</span> lis.get(<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">del</span> lis[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        num_cnt = list(map(list, lis.items()))</span><br><span class="line">        <span class="comment"># 갯수 -&gt; 숫자 정렬</span></span><br><span class="line">        num_cnt.sort(key=<span class="keyword">lambda</span> x:(x[<span class="number">1</span>], x[<span class="number">0</span>]))</span><br><span class="line">        temp.append(list(sum(num_cnt, []))[:<span class="number">100</span>])</span><br><span class="line">        max_len = max(max_len, len(temp[<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temp)):</span><br><span class="line">        <span class="keyword">if</span> len(temp[i]) &lt; max_len:</span><br><span class="line">            temp[i] += [<span class="number">0</span>] * (max_len - len(temp[i]))</span><br><span class="line"></span><br><span class="line">    Map = temp</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> C_flag:</span><br><span class="line">        Map = list(zip(*Map))</span><br><span class="line">    time += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> time &gt; <span class="number">100</span>:</span><br><span class="line">    print(<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(time)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX], cpmap[MAX][MAX], temp[MAX];</span><br><span class="line"><span class="keyword">int</span> r, c, k, a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">m</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num, cnt;</span><br><span class="line">&#125;m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;m&gt; Matrix;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(m a, m b)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//if문안에 a가 앞에올 조건을 걸어라</span></span><br><span class="line">	<span class="keyword">if</span> (a.cnt &lt;= b.cnt) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.cnt == b.cnt) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.num &lt; b.num) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt_r = <span class="number">0</span>, cnt_c = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span>[r][c] == k || t &gt; <span class="number">100</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt1 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[j][i] != <span class="number">0</span>)</span><br><span class="line">					cnt1++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[j][i] == <span class="number">0</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt_r = <span class="built_in">max</span>(cnt_r, cnt1);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt2 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">					cnt2++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">0</span>)</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cnt_c = <span class="built_in">max</span>(cnt_c, cnt2);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (cnt_r &gt;= cnt_c) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					temp[<span class="built_in">map</span>[i][j]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123; </span><br><span class="line">					<span class="keyword">if</span> (temp[j] != <span class="number">0</span>) &#123;</span><br><span class="line">						Matrix.push_back(&#123; j,temp[j] &#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				sort(Matrix.<span class="built_in">begin</span>(), Matrix.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Matrix.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					v.push_back(Matrix[j].num);</span><br><span class="line">					v.push_back(Matrix[j].cnt);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">				<span class="built_in">size</span> = <span class="built_in">max</span>(<span class="built_in">size</span>, length);</span><br><span class="line">				a = <span class="built_in">max</span>(a, <span class="built_in">size</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt_r; j++)</span><br><span class="line">					<span class="built_in">map</span>[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">					<span class="keyword">if</span>(j+<span class="number">1</span>&lt;<span class="number">100</span>)</span><br><span class="line">						<span class="built_in">map</span>[i][j + <span class="number">1</span>] = v[j];</span><br><span class="line">				</span><br><span class="line">				Matrix.<span class="built_in">clear</span>();</span><br><span class="line">				v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (cnt_r &lt; cnt_c) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;MAX; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="keyword">sizeof</span>(temp));</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					temp[<span class="built_in">map</span>[j][i]]++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; MAX; j++) &#123;</span><br><span class="line">					<span class="keyword">if</span> (temp[j] != <span class="number">0</span>) &#123;</span><br><span class="line">						Matrix.push_back(&#123; j,temp[j] &#125;);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				sort(Matrix.<span class="built_in">begin</span>(), Matrix.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Matrix.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">					v.push_back(Matrix[j].num);</span><br><span class="line">					v.push_back(Matrix[j].cnt);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">int</span> length = v.<span class="built_in">size</span>();</span><br><span class="line">				<span class="built_in">size</span> = <span class="built_in">max</span>(<span class="built_in">size</span>, length);</span><br><span class="line">				a = <span class="built_in">max</span>(a, <span class="built_in">size</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt_c; j++)</span><br><span class="line">					<span class="built_in">map</span>[j][i] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">					<span class="keyword">if</span>(j+<span class="number">1</span>&lt;<span class="number">100</span>)</span><br><span class="line">						<span class="built_in">map</span>[j+<span class="number">1</span>][i] = v[j];</span><br><span class="line"></span><br><span class="line">				Matrix.<span class="built_in">clear</span>();</span><br><span class="line">				v.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		t++;</span><br><span class="line">		a = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; r &gt;&gt; c &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> time = solve();</span><br><span class="line">	<span class="keyword">if</span> (time ==<span class="number">101</span>)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; time;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17143. 낚시왕</title>
    <url>/2020/10/10/%5BBOJ%5D%2017143.%20%EB%82%9A%EC%8B%9C%EC%99%95/</url>
    <content><![CDATA[<h3 id="17143-낚시왕"><a href="#17143-낚시왕" class="headerlink" title="17143. 낚시왕"></a>17143. 낚시왕</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17143" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">move = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">R, C, M = map(int, input().split())</span><br><span class="line">Map = [[<span class="literal">None</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, s, d, z = map(int, input().split())</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">or</span> d == <span class="number">2</span>:</span><br><span class="line">        Map[y - <span class="number">1</span>][x - <span class="number">1</span>] = (s % ((R - <span class="number">1</span>) * <span class="number">2</span>), d, z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        Map[y - <span class="number">1</span>][x - <span class="number">1</span>] = (s % ((C - <span class="number">1</span>) * <span class="number">2</span>), d, z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(C):</span><br><span class="line">    <span class="comment"># 1. 열에 있는 상어 중 가장 가까운 상어 잡는다.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">if</span> Map[i][t]:</span><br><span class="line">            res += Map[i][t][<span class="number">2</span>]</span><br><span class="line">            Map[i][t] = <span class="literal">None</span></span><br><span class="line">            <span class="comment"># print(res)</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 상어 이동 ( 상 하 우 좌 )</span></span><br><span class="line">    check = [[<span class="literal">None</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            <span class="keyword">if</span> Map[i][j]:</span><br><span class="line">                s, d, z = Map[i][j]</span><br><span class="line">                y, x = i, j</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">or</span> d == <span class="number">2</span>:</span><br><span class="line">                    y += s * move[d]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    x += s * move[d]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 최대 2번 방향이 바뀔 수 있다.</span></span><br><span class="line">                <span class="comment"># 방향 그대로 이동하고 뒤집어 준다.</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">or</span> d == <span class="number">2</span>:</span><br><span class="line">                        <span class="keyword">if</span> y &lt; <span class="number">0</span>:</span><br><span class="line">                            d = <span class="number">2</span> <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                            y = -y</span><br><span class="line">                        <span class="keyword">elif</span> y &gt;= R:</span><br><span class="line">                            d = <span class="number">2</span> <span class="keyword">if</span> d == <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                            y = (R - <span class="number">1</span>) * <span class="number">2</span> - y</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">                            d = <span class="number">3</span> <span class="keyword">if</span> d == <span class="number">4</span> <span class="keyword">else</span> <span class="number">4</span></span><br><span class="line">                            x = -x</span><br><span class="line">                        <span class="keyword">elif</span> x &gt;= C:</span><br><span class="line">                            d = <span class="number">3</span> <span class="keyword">if</span> d == <span class="number">4</span> <span class="keyword">else</span> <span class="number">4</span></span><br><span class="line">                            x = (C - <span class="number">1</span>) * <span class="number">2</span> - x</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 한마리면 그냥 넣고 중복되면 큰 값만 저장</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> check[y][x]:</span><br><span class="line">                    check[y][x] = (s, d, z)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> check[y][x][<span class="number">2</span>] &lt; z:</span><br><span class="line">                        check[y][x] = (s, d, z)</span><br><span class="line">    <span class="comment"># 맵 복사</span></span><br><span class="line">    Map = check</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt, t = <span class="number">0</span>, <span class="built_in">size</span> = <span class="number">2</span>;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line">S Shark,s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, dist;</span><br><span class="line">&#125;F;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;F&gt; Temp;</span><br><span class="line"><span class="built_in">queue</span>&lt;S&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(F a, F b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.dist &gt;= b.dist) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.dist == b.dist) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.y &gt;= b.y) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a.y == b.y) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a.x &gt; b.x) &#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		Q.push(Shark);</span><br><span class="line">		visit[Q.front().y][Q.front().x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = Q.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Q.front().x;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = Q.front().<span class="built_in">size</span>;</span><br><span class="line">			<span class="keyword">int</span> t = Q.front().t;</span><br><span class="line">			<span class="keyword">int</span> cnt = Q.front().cnt;</span><br><span class="line"></span><br><span class="line">			Q.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; N || ny &lt;<span class="number">1</span> || nx&gt;N || nx &lt; <span class="number">1</span> || <span class="built_in">map</span>[ny][nx] &gt; Shark.<span class="built_in">size</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">				visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">				s.y = ny; s.x = nx, s.cnt = cnt; s.t = t + <span class="number">1</span>;</span><br><span class="line">				Q.push(s);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (Shark.<span class="built_in">size</span> &gt; <span class="built_in">map</span>[ny][nx] &amp;&amp; <span class="built_in">map</span>[ny][nx] != <span class="number">0</span>)</span><br><span class="line">					Temp.push_back(&#123; ny,nx,s.t&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[<span class="number">0</span>].y][Temp[<span class="number">0</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[<span class="number">0</span>].y;</span><br><span class="line">			Shark.x = Temp[<span class="number">0</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[<span class="number">0</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Temp.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			sort(Temp.<span class="built_in">begin</span>(), Temp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> temp_size = Temp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[temp_size - <span class="number">1</span>].y][Temp[temp_size - <span class="number">1</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[temp_size - <span class="number">1</span>].y;</span><br><span class="line">			Shark.x = Temp[temp_size - <span class="number">1</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[temp_size - <span class="number">1</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">		Temp.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123;</span><br><span class="line">				Shark.y = i;</span><br><span class="line">				Shark.x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Shark.t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 백트래킹</title>
    <url>/2020/05/15/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%EB%B0%B1%ED%8A%B8%EB%9E%98%ED%82%B9/</url>
    <content><![CDATA[<h3 id="5209-최소-생산-비용"><a href="#5209-최소-생산-비용" class="headerlink" title="5209. 최소 생산 비용"></a>5209. 최소 생산 비용</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYGf7K180DFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="최소-생산-비용"><a href="#최소-생산-비용" class="headerlink" title="최소 생산 비용"></a>최소 생산 비용</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cnt, temp)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> temp &gt; res: <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> cnt == N:</span><br><span class="line">        res = res <span class="keyword">if</span> res &lt; temp <span class="keyword">else</span> temp</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check[i]:</span><br><span class="line">            temp += V[cnt][i]</span><br><span class="line">            check[i] = <span class="literal">True</span></span><br><span class="line">            dfs(cnt + <span class="number">1</span>, temp)</span><br><span class="line">            check[i] = <span class="literal">False</span></span><br><span class="line">            temp -= V[cnt][i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    V = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    check = [<span class="number">0</span>] * N</span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 분할 정복</title>
    <url>/2020/05/14/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%EB%B6%84%ED%95%A0%20%EC%A0%95%EB%B3%B5/</url>
    <content><![CDATA[<h3 id="5207-이진-탐색"><a href="#5207-이진-탐색" class="headerlink" title="5207. 이진 탐색"></a>5207. 이진 탐색</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYFsQq11kDFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="이진-탐색"><a href="#이진-탐색" class="headerlink" title="이진 탐색"></a>이진 탐색</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(l, r, num, lis, flag)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> l &gt; r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    m = (l + r) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lis[m] == num:</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> lis[m] &gt; num:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> search(l, m - <span class="number">1</span>, num, lis, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> search(m + <span class="number">1</span>, r, num, lis, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N, M = map(int, input().split())</span><br><span class="line">    A = list(map(int, input().split()))</span><br><span class="line">    B = list(map(int, input().split()))</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    A.sort()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(B)):</span><br><span class="line">        search(<span class="number">0</span>, len(A) - <span class="number">1</span>, B[i], A, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"#&#123;&#125; &#123;&#125;"</span>.format(tc+<span class="number">1</span>, cnt))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 탐욕 알고리즘</title>
    <url>/2020/05/07/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%ED%83%90%EC%9A%95%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/</url>
    <content><![CDATA[<h3 id="5201-컨테이너-운반-5202-화물-도크-5203-베이비진-게임"><a href="#5201-컨테이너-운반-5202-화물-도크-5203-베이비진-게임" class="headerlink" title="5201. 컨테이너 운반  / 5202. 화물 도크 / 5203. 베이비진 게임"></a>5201. 컨테이너 운반  / 5202. 화물 도크 / 5203. 베이비진 게임</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYEGw61n8DFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="컨테이너-운반"><a href="#컨테이너-운반" class="headerlink" title="컨테이너 운반"></a>컨테이너 운반</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N, M = map(int, input().split())</span><br><span class="line">    w = list(map(int, input().split()))</span><br><span class="line">    t = list(map(int, input().split()))</span><br><span class="line">    visit = [<span class="number">0</span>] * N</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    w.sort()</span><br><span class="line">    t.sort()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(M<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[j] <span class="keyword">and</span> t[i] &gt;= w[j]:</span><br><span class="line">                visit[j] = <span class="number">1</span></span><br><span class="line">                res += w[j]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="화물-도크"><a href="#화물-도크" class="headerlink" title="화물 도크"></a>화물 도크</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    w = []</span><br><span class="line">    end = res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        s, e = list(map(int, input().split()))</span><br><span class="line">        w.append([s, e])</span><br><span class="line">    w.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">        <span class="keyword">if</span> i[<span class="number">0</span>] &gt;= end:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            end = i[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="베이비진-게임"><a href="#베이비진-게임" class="headerlink" title="베이비진 게임"></a>베이비진 게임</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">isrun</span><span class="params">(lis)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="keyword">if</span> num - <span class="number">2</span> <span class="keyword">in</span> lis <span class="keyword">or</span> num + <span class="number">1</span> <span class="keyword">in</span> lis:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> num + <span class="number">1</span> <span class="keyword">in</span> lis <span class="keyword">and</span> num + <span class="number">2</span> <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">istriplet</span><span class="params">(lis)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> lis.count(num) &gt;= <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    temp = list(map(int, input().split()))</span><br><span class="line">    A, B = [], []</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(temp), <span class="number">2</span>):</span><br><span class="line">        A.append(temp[i])</span><br><span class="line">        B.append(temp[i+<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> isrun(A[:i+<span class="number">1</span>]) <span class="keyword">or</span> istriplet(A[:i+<span class="number">1</span>]):</span><br><span class="line">            res = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> isrun(B[:i+<span class="number">1</span>]) <span class="keyword">or</span> istriplet(B[:i+<span class="number">1</span>]):</span><br><span class="line">            res = <span class="number">2</span>; <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>brute force</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 17144. 미세먼지 안녕!</title>
    <url>/2020/05/06/%5BBOJ%5D%2017144.%20%EB%AF%B8%EC%84%B8%EB%A8%BC%EC%A7%80%20%EC%95%88%EB%85%95!/</url>
    <content><![CDATA[<h3 id="17144-미세먼지-안녕"><a href="#17144-미세먼지-안녕" class="headerlink" title="17144. 미세먼지 안녕!"></a>17144. 미세먼지 안녕!</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/17144" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spread</span><span class="params">()</span>:</span></span><br><span class="line">    add = [[<span class="number">0</span>] * C <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            <span class="keyword">if</span> Map[i][j] == <span class="number">-1</span> <span class="keyword">or</span> <span class="keyword">not</span> Map[i][j]: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            amount = Map[i][j] // <span class="number">5</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                ny = i + dy[k]</span><br><span class="line">                nx = j + dx[k]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; R <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; C:</span><br><span class="line">                    <span class="keyword">if</span> Map[ny][nx] != <span class="number">-1</span>:</span><br><span class="line">                        add[ny][nx] += amount</span><br><span class="line">                        cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt:</span><br><span class="line">                Map[i][j] -= (amount * cnt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">            Map[i][j] += add[i][j]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 위쪽 청소</span></span><br><span class="line">    y, x = wind[<span class="number">0</span>][<span class="number">0</span>], wind[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[i][<span class="number">0</span>] = Map[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C - <span class="number">1</span>):</span><br><span class="line">        Map[<span class="number">0</span>][i] = Map[<span class="number">0</span>][i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y):</span><br><span class="line">        Map[i][C<span class="number">-1</span>] = Map[i+<span class="number">1</span>][C<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[y][i] = Map[y][i<span class="number">-1</span>]</span><br><span class="line">    Map[y][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 아래쪽 청소</span></span><br><span class="line">    y, x = wind[<span class="number">1</span>][<span class="number">0</span>], wind[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y + <span class="number">1</span>, R - <span class="number">1</span>):</span><br><span class="line">        Map[i][<span class="number">0</span>] = Map[i+<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C - <span class="number">1</span>):</span><br><span class="line">        Map[R<span class="number">-1</span>][i] = Map[R<span class="number">-1</span>][i+<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(R<span class="number">-1</span>, y<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[i][C<span class="number">-1</span>] = Map[i<span class="number">-1</span>][C<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(C<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        Map[y][i] = Map[y][i<span class="number">-1</span>]</span><br><span class="line">    Map[y][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">R, C, T = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(R)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">wind = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">-1</span>:</span><br><span class="line">            wind.append((i, j))</span><br><span class="line">            wind.append((i+<span class="number">1</span>,j))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(T):</span><br><span class="line">    <span class="comment"># 1. 미세먼지 확산</span></span><br><span class="line">    spread()</span><br><span class="line">    <span class="comment"># 2. 공기청정기 작동</span></span><br><span class="line">    clean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(R):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(C):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] &gt; <span class="number">0</span>:</span><br><span class="line">            res += Map[i][j]</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[MAX][MAX], R, C, T;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">d</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt;</span><br><span class="line">&#125;d;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;d&gt; Dust;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		time++;</span><br><span class="line">		<span class="keyword">if</span> (time &gt; T)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//미세먼지확산</span></span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = Dust.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="comment">//큐에들어있는만큼 미세먼지 확산</span></span><br><span class="line">			<span class="comment">//이제 큐에서 꺼내서 확산시켜야지</span></span><br><span class="line">			<span class="keyword">int</span> y = Dust.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Dust.front().x;</span><br><span class="line">			<span class="keyword">int</span> cnt = Dust.front().cnt;</span><br><span class="line">			<span class="comment">//if (map[y][x] &lt; 5) continue;</span></span><br><span class="line">			Dust.pop();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">int</span> temp = <span class="number">0</span>; <span class="comment">// 얘는 몇방향으로 움직이는지 체크해주기 위함임.</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[a];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[a];</span><br><span class="line"></span><br><span class="line">				<span class="comment">//여기서는 맵밖이 아니고 공기청정기 좌표가 아니면 무조건 확산.</span></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; R || ny &lt; <span class="number">1</span> || nx &gt; C || nx &lt; <span class="number">1</span> || (ny == v[<span class="number">0</span>].first &amp;&amp; nx == v[<span class="number">0</span>].second) || (ny == v[<span class="number">1</span>].first &amp;&amp; nx == v[<span class="number">1</span>].second)) <span class="keyword">continue</span>;</span><br><span class="line">				temp++; <span class="comment">//몇방향이나 빠지는지</span></span><br><span class="line">				<span class="built_in">map</span>[ny][nx] += (cnt / <span class="number">5</span>); <span class="comment">// 값더해주기</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x]&gt;=<span class="number">5</span>) &#123;</span><br><span class="line">				<span class="built_in">map</span>[y][x] -= ((cnt / <span class="number">5</span>) * temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//공기청정기작동</span></span><br><span class="line">		<span class="comment">//윗무빙</span></span><br><span class="line">		<span class="comment">//1. 1부터 v[0]y-1까지 한칸 이동  2. C부터 2까지 한칸이동 3. v[0]y부터 2까지 이동 </span></span><br><span class="line">        	<span class="comment">//4. v[0]x+1부터 C-1까지 이동</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v[<span class="number">0</span>].first<span class="number">-1</span>; i &gt; <span class="number">1</span>; i--) &#123;<span class="comment">// 1번</span></span><br><span class="line">			<span class="built_in">map</span>[i][v[<span class="number">0</span>].second] = <span class="built_in">map</span>[i - <span class="number">1</span>][v[<span class="number">0</span>].second];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;<span class="comment">//2번</span></span><br><span class="line">			<span class="built_in">map</span>[<span class="number">1</span>][i] = <span class="built_in">map</span>[<span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v[<span class="number">0</span>].first; i++) &#123;<span class="comment">//3번</span></span><br><span class="line">			<span class="built_in">map</span>[i][C] = <span class="built_in">map</span>[i + <span class="number">1</span>][C];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = C; i &gt; v[<span class="number">0</span>].second + <span class="number">1</span>; i--) &#123;<span class="comment">//4번</span></span><br><span class="line">			<span class="built_in">map</span>[v[<span class="number">0</span>].first][i] = <span class="built_in">map</span>[v[<span class="number">0</span>].first][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//아랫무빙</span></span><br><span class="line">		<span class="comment">//1.v[1]y+1부터 R-1까지 2. 2부터 C까지 3. y[1]y부터 R-1까지 4. v[1]x+1부터 C-1까지</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v[<span class="number">1</span>].first + <span class="number">1</span>; i &lt; R; i++) &#123;<span class="comment">// 1번</span></span><br><span class="line">			<span class="built_in">map</span>[i][v[<span class="number">1</span>].second] = <span class="built_in">map</span>[i + <span class="number">1</span>][v[<span class="number">1</span>].second];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; C; i++) &#123;<span class="comment">//2번</span></span><br><span class="line">			<span class="built_in">map</span>[R][i] = <span class="built_in">map</span>[R][i + <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = R; i &gt; v[<span class="number">1</span>].first; i--) &#123;<span class="comment">//3번</span></span><br><span class="line">			<span class="built_in">map</span>[i][C] = <span class="built_in">map</span>[i - <span class="number">1</span>][C];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = C; i &gt; v[<span class="number">1</span>].second + <span class="number">1</span>; i--) &#123;<span class="comment">//4번</span></span><br><span class="line">			<span class="built_in">map</span>[v[<span class="number">1</span>].first][i] = <span class="built_in">map</span>[v[<span class="number">1</span>].first][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>[v[<span class="number">0</span>].first][v[<span class="number">0</span>].second + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">map</span>[v[<span class="number">1</span>].first][v[<span class="number">1</span>].second + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//다시 미세먼지 위치를 큐에 넣어준다.</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">					Dust.push(&#123; i,j,<span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; R &gt;&gt; C &gt;&gt; T;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">-1</span>) &#123;</span><br><span class="line">				v.push_back(make_pair(i, j));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">map</span>[i][j] != <span class="number">0</span>)</span><br><span class="line">				Dust.push(&#123; i,j,<span class="built_in">map</span>[i][j] &#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= R; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= C; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">				num += <span class="built_in">map</span>[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 응용 - 완전검색</title>
    <url>/2020/05/06/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EC%9D%91%EC%9A%A9%20-%20%EC%99%84%EC%A0%84%EA%B2%80%EC%83%89/</url>
    <content><![CDATA[<h3 id="5188-최소합-5189-전자카트"><a href="#5188-최소합-5189-전자카트" class="headerlink" title="5188. 최소합  / 5189. 전자카트"></a>5188. 최소합  / 5189. 전자카트</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDYSqAAbw5UW6&subjectId=AWUYDrI61lYDFAVT" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

<h3 id="최소합"><a href="#최소합" class="headerlink" title="- 최소합"></a>- 최소합</h3></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(y, x, r)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res &lt; r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> y == N - <span class="number">1</span> <span class="keyword">and</span> x == N - <span class="number">1</span>:</span><br><span class="line">        res = min(r, res)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        ny = y + dy[i]</span><br><span class="line">        nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                dfs(ny, nx, r + Map[ny][nx])</span><br><span class="line">                visit[ny][nx] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>, Map[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"#&#123;&#125; &#123;&#125;"</span>.format(tc + <span class="number">1</span>, res))</span><br></pre></td></tr></table></figure>

<h3 id="전자카트"><a href="#전자카트" class="headerlink" title="- 전자카트"></a>- 전자카트</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(cnt, n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> cnt == N:</span><br><span class="line">        lis.append(n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> visit[i]:</span><br><span class="line">            visit[i] = <span class="number">1</span></span><br><span class="line">            dfs(cnt + <span class="number">1</span>, n + str(i))</span><br><span class="line">            visit[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(int(input())):</span><br><span class="line">    N = int(input())</span><br><span class="line">    Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    visit = [<span class="number">0</span>] * N</span><br><span class="line">    lis = []</span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line">    visit[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="string">'0'</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> lis:</span><br><span class="line">        a += <span class="string">'0'</span></span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a) - <span class="number">1</span>):</span><br><span class="line">            temp += Map[int(a[i])][int(a[i+<span class="number">1</span>])]</span><br><span class="line">        res = min(res, temp)</span><br><span class="line">    print(<span class="string">"#&#123;&#125; &#123;&#125;"</span>.format(tc + <span class="number">1</span>, res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>brute force</tag>
        <tag>SWEA</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16236. 아기 상어</title>
    <url>/2020/04/23/%5BBOJ%5D%2016236.%20%EC%95%84%EA%B8%B0%20%EC%83%81%EC%96%B4/</url>
    <content><![CDATA[<h3 id="16236-아기-상어"><a href="#16236-아기-상어" class="headerlink" title="16236. 아기 상어"></a>16236. 아기 상어</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16236" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">9</span>:</span><br><span class="line">            sy, sx, size, cnt = i, j, <span class="number">2</span>, <span class="number">0</span></span><br><span class="line">            Map[i][j] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    eat = []</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    q = deque()</span><br><span class="line">    q.append((sy, sx))</span><br><span class="line">    visit[sy][sx] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            ny = y + dy[i]</span><br><span class="line">            nx = x + dx[i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = visit[y][x] + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx] <span class="keyword">or</span> Map[ny][nx] == size:</span><br><span class="line">                        q.append((ny, nx))</span><br><span class="line">                    <span class="keyword">elif</span> <span class="number">0</span> &lt; Map[ny][nx] &lt; size:</span><br><span class="line">                        eat.append([ny, nx, visit[ny][nx]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> eat:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> len(eat) == <span class="number">1</span>:</span><br><span class="line">        sy, sx = eat[<span class="number">0</span>][<span class="number">0</span>], eat[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># eat.sort(key=lambda a: (a[2], a[0], a[1]))</span></span><br><span class="line">        eat = sorted(eat, key=<span class="keyword">lambda</span> a: (a[<span class="number">2</span>], a[<span class="number">0</span>], a[<span class="number">1</span>]))</span><br><span class="line">        sy, sx = eat[<span class="number">0</span>][<span class="number">0</span>], eat[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    res += eat[<span class="number">0</span>][<span class="number">2</span>] - <span class="number">1</span></span><br><span class="line">    Map[sy][sx] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> cnt == size:</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, cnt, t = <span class="number">0</span>, <span class="built_in">size</span> = <span class="number">2</span>;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line">S Shark,s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, dist;</span><br><span class="line">&#125;F;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;F&gt; Temp;</span><br><span class="line"><span class="built_in">queue</span>&lt;S&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(F a, F b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.dist &gt;= b.dist) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.dist == b.dist) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.y &gt;= b.y) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a.y == b.y) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a.x &gt; b.x) &#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		Q.push(Shark);</span><br><span class="line">		visit[Q.front().y][Q.front().x] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> y = Q.front().y;</span><br><span class="line">			<span class="keyword">int</span> x = Q.front().x;</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">size</span> = Q.front().<span class="built_in">size</span>;</span><br><span class="line">			<span class="keyword">int</span> t = Q.front().t;</span><br><span class="line">			<span class="keyword">int</span> cnt = Q.front().cnt;</span><br><span class="line"></span><br><span class="line">			Q.pop();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[i];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[i];</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (ny &gt; N || ny &lt;<span class="number">1</span> || nx&gt;N || nx &lt; <span class="number">1</span> || <span class="built_in">map</span>[ny][nx] &gt; Shark.<span class="built_in">size</span> || visit[ny][nx]) <span class="keyword">continue</span>;</span><br><span class="line">				visit[ny][nx] = <span class="literal">true</span>;</span><br><span class="line">				s.y = ny; s.x = nx, s.cnt = cnt; s.t = t + <span class="number">1</span>;</span><br><span class="line">				Q.push(s);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (Shark.<span class="built_in">size</span> &gt; <span class="built_in">map</span>[ny][nx] &amp;&amp; <span class="built_in">map</span>[ny][nx] != <span class="number">0</span>)</span><br><span class="line">					Temp.push_back(&#123; ny,nx,s.t&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (Temp.<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[<span class="number">0</span>].y][Temp[<span class="number">0</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[<span class="number">0</span>].y;</span><br><span class="line">			Shark.x = Temp[<span class="number">0</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[<span class="number">0</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (Temp.<span class="built_in">size</span>() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">			sort(Temp.<span class="built_in">begin</span>(), Temp.<span class="built_in">end</span>(), compare);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">int</span> temp_size = Temp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">			<span class="built_in">map</span>[Temp[temp_size - <span class="number">1</span>].y][Temp[temp_size - <span class="number">1</span>].x] = <span class="number">9</span>;</span><br><span class="line">			<span class="built_in">map</span>[Shark.y][Shark.x] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			Shark.y = Temp[temp_size - <span class="number">1</span>].y;</span><br><span class="line">			Shark.x = Temp[temp_size - <span class="number">1</span>].x;</span><br><span class="line">			Shark.cnt++;</span><br><span class="line">			Shark.t = Temp[temp_size - <span class="number">1</span>].dist;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (Shark.cnt == Shark.<span class="built_in">size</span>) &#123;</span><br><span class="line">				Shark.<span class="built_in">size</span>++;</span><br><span class="line">				Shark.cnt = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Temp.pop_back();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">memset</span>(visit, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">		Temp.<span class="built_in">clear</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">9</span>) &#123;</span><br><span class="line">				Shark.y = i;</span><br><span class="line">				Shark.x = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	bfs();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; Shark.t;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16235. 나무 재테크</title>
    <url>/2020/04/22/%5BBOJ%5D%2016235.%20%EB%82%98%EB%AC%B4%20%EC%9E%AC%ED%85%8C%ED%81%AC/</url>
    <content><![CDATA[<h3 id="16235-나무-재테크"><a href="#16235-나무-재테크" class="headerlink" title="16235. 나무 재테크"></a>16235. 나무 재테크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16235" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">N, M, K = map(int, input().split())</span><br><span class="line">add = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">Map = [[<span class="number">5</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">tree = [[[] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    y, x, z = map(int, input().split())</span><br><span class="line">    tree[y<span class="number">-1</span>][x<span class="number">-1</span>].append(z)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    <span class="comment"># S/S</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> tree[i][j]:</span><br><span class="line">                temp, t = [], len(tree[i][j])</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(t):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] &gt;= tree[i][j][<span class="number">-1</span>-k]:</span><br><span class="line">                        Map[i][j] -= tree[i][j][<span class="number">-1</span>-k]</span><br><span class="line">                        temp.append(tree[i][j][<span class="number">-1</span>-k] + <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        t = k</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(len(tree[i][j]) - t):</span><br><span class="line">                    Map[i][j] += (tree[i][j][k] // <span class="number">2</span>)</span><br><span class="line">                tree[i][j] = temp[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># F</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            <span class="keyword">if</span> tree[i][j]:</span><br><span class="line">                <span class="keyword">for</span> age <span class="keyword">in</span> tree[i][j]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> age % <span class="number">5</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                            ny = i + dy[k]</span><br><span class="line">                            nx = j + dx[k]</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N:</span><br><span class="line">                                temp.append((ny, nx))</span><br><span class="line">    <span class="keyword">for</span> y, x <span class="keyword">in</span> temp:</span><br><span class="line">        tree[y][x].append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># W</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            Map[i][j] += add[i][j]</span><br><span class="line"></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        res += len(tree[i][j])</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, Yang[MAX][MAX], addYang[MAX][MAX], cnt;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>] = &#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>, <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">T</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> y, x, age;</span><br><span class="line">&#125;T;</span><br><span class="line"></span><br><span class="line">T tree;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">map</span>[MAX][MAX];</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">springsummer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">size</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line">		Q.pop();</span><br><span class="line">        </span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">		<span class="keyword">int</span> die = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tree_cnt = <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">		sort(<span class="built_in">map</span>[y][x].<span class="built_in">begin</span>(), <span class="built_in">map</span>[y][x].<span class="built_in">end</span>());</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree_cnt; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x][i] &lt;= Yang[y][x]) &#123;</span><br><span class="line">				Yang[y][x] -= <span class="built_in">map</span>[y][x][i];</span><br><span class="line">				temp.push_back(++<span class="built_in">map</span>[y][x][i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				die += <span class="built_in">map</span>[y][x][i] / <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>[y][x].<span class="built_in">clear</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">			<span class="built_in">map</span>[y][x].push_back(temp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">map</span>[y][x].<span class="built_in">size</span>()!=<span class="number">0</span>)</span><br><span class="line">			Q.push(make_pair(y, x));</span><br><span class="line">		Yang[y][x] += die;</span><br><span class="line">		<span class="built_in">size</span>--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">	q = Q;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = q.front().second;</span><br><span class="line">		q.pop();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">size</span> = <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[y][x][i] % <span class="number">5</span> != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">8</span>; a++) &#123;</span><br><span class="line">				<span class="keyword">int</span> ny = y + dy[a];</span><br><span class="line">				<span class="keyword">int</span> nx = x + dx[a];</span><br><span class="line">			</span><br><span class="line">				<span class="keyword">if</span> (ny &lt; <span class="number">1</span> || ny &gt; N || nx &lt; <span class="number">1</span> || nx &gt; N) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">if</span>(<span class="built_in">map</span>[ny][nx].<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line">					Q.push(make_pair(ny, nx));</span><br><span class="line">				<span class="built_in">map</span>[ny][nx].push_back(<span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			Yang[i][j] += addYang[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (year &lt; K) &#123;</span><br><span class="line">		springsummer();</span><br><span class="line">		fall();</span><br><span class="line">		winter();</span><br><span class="line">		year++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> <span class="built_in">size</span> = Q.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = Q.front().first;</span><br><span class="line">		<span class="keyword">int</span> x = Q.front().second;</span><br><span class="line">		Q.pop();</span><br><span class="line"></span><br><span class="line">		cnt += <span class="built_in">map</span>[y][x].<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; addYang[i][j];</span><br><span class="line">			Yang[i][j] = <span class="number">5</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y, x, age;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; y &gt;&gt; x &gt;&gt; age;</span><br><span class="line">		tree.y = y; tree.x = x; tree.age = age;</span><br><span class="line">		<span class="built_in">map</span>[y][x].push_back(age);</span><br><span class="line">		Q.push(make_pair(y, x));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	solve();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 16234. 인구 이동</title>
    <url>/2020/04/21/%5BBOJ%5D%2016234.%20%EC%9D%B8%EA%B5%AC%20%EC%9D%B4%EB%8F%99/</url>
    <content><![CDATA[<h3 id="16234-인구-이동"><a href="#16234-인구-이동" class="headerlink" title="16234. 인구 이동"></a>16234. 인구 이동</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/16234" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L, R = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    Q = []</span><br><span class="line">    visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    Union = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> visit[i][j]:</span><br><span class="line">                visit[i][j] = <span class="number">1</span></span><br><span class="line">                Q.append((i, j))</span><br><span class="line">            <span class="keyword">while</span> Q:</span><br><span class="line">                y, x = Q.pop()</span><br><span class="line">                temp.append((y, x))</span><br><span class="line">                <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">                    ny = y + a</span><br><span class="line">                    nx = x + b</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; N <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                        <span class="keyword">if</span> L &lt;= abs(Map[y][x] - Map[ny][nx]) &lt;= R:</span><br><span class="line">                            visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                            Q.append((ny, nx))</span><br><span class="line">            <span class="keyword">if</span> len(temp) &gt; <span class="number">1</span>:</span><br><span class="line">                Union.append(temp)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Union:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> lis <span class="keyword">in</span> Union:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> y, x <span class="keyword">in</span> lis:</span><br><span class="line">                temp += Map[y][x]</span><br><span class="line">            temp //= len(lis)</span><br><span class="line">            <span class="keyword">for</span> y, x <span class="keyword">in</span> lis:</span><br><span class="line">                Map[y][x] = temp</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 51</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, L, R, <span class="built_in">map</span>[MAX][MAX], MOVE = <span class="number">0</span>, People = <span class="number">0</span>, Nation = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> visit2[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123; <span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> now_y = i;</span><br><span class="line">	<span class="keyword">int</span> now_x = j;</span><br><span class="line">	visit2[i][j] = <span class="number">1</span>;</span><br><span class="line">	People += <span class="built_in">map</span>[i][j];</span><br><span class="line">	Nation += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; <span class="number">4</span>; a++) &#123;</span><br><span class="line">		<span class="keyword">int</span> y = now_y + dy[a];</span><br><span class="line">		<span class="keyword">int</span> x = now_x + dx[a];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="number">0</span> &lt; y &amp;&amp; y &lt;= N &amp;&amp; <span class="number">0</span> &lt; x &amp;&amp; x &lt;= N &amp;&amp; visit2[y][x] == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(<span class="built_in">map</span>[y][x] - <span class="built_in">map</span>[now_y][now_x]) &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[y][x] - <span class="built_in">map</span>[now_y][now_x]) &lt;= R)</span><br><span class="line">			&#123;</span><br><span class="line">				visit2[y][x] = <span class="number">1</span>;</span><br><span class="line">				v.push_back(make_pair(y, x));</span><br><span class="line">				dfs(y, x);</span><br><span class="line">				<span class="comment">//return;</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>); <span class="built_in">cout</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; L &gt;&gt; R;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; <span class="built_in">map</span>[i][j];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> <span class="built_in">stop</span> = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (visit2[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (<span class="number">0</span> &lt; i + dy[k] &amp;&amp; i + dy[k] &lt;= N &amp;&amp; <span class="number">0</span> &lt; j + dx[k] &amp;&amp; j + dx[k] &lt;= N &amp;&amp; visit2[i + dy[k]][j + dx[k]] == <span class="number">0</span>) &#123;</span><br><span class="line">							<span class="keyword">if</span> (L &lt;= <span class="built_in">abs</span>(<span class="built_in">map</span>[i][j] - <span class="built_in">map</span>[i + dy[k]][j + dx[k]]) &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">map</span>[i][j] - <span class="built_in">map</span>[i + dy[k]][j + dx[k]]) &lt;= R)</span><br><span class="line">							&#123;</span><br><span class="line">								<span class="built_in">stop</span> = <span class="number">1</span>;</span><br><span class="line">								v.push_back(make_pair(i, j));</span><br><span class="line">								dfs(i, j);</span><br><span class="line">								<span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt; v.<span class="built_in">size</span>(); z++)</span><br><span class="line">									<span class="built_in">map</span>[v[z].first][v[z].second] = (People / Nation);</span><br><span class="line">								v.<span class="built_in">clear</span>();</span><br><span class="line">								People = <span class="number">0</span>;</span><br><span class="line">								Nation = <span class="number">0</span>;</span><br><span class="line">								<span class="keyword">break</span>;</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(visit2, <span class="literal">false</span>, <span class="keyword">sizeof</span>(visit2));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">stop</span> == <span class="number">1</span>)</span><br><span class="line">			MOVE++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">stop</span> == <span class="number">0</span> || MOVE == <span class="number">0</span>)</span><br><span class="line">			flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; MOVE;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15686. 치킨 배달</title>
    <url>/2020/04/20/%5BBOJ%5D%2015686.%20%EC%B9%98%ED%82%A8%20%EB%B0%B0%EB%8B%AC/</url>
    <content><![CDATA[<h3 id="15686-치킨-배달"><a href="#15686-치킨-배달" class="headerlink" title="15686. 치킨 배달"></a>15686. 치킨 배달</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15686" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">home, chicken, res = [], [], float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">1</span>:</span><br><span class="line">            home.append((i, j))</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            chicken.append((i, j))</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 치킨집 중 M개를 뽑는다.</span></span><br><span class="line"><span class="keyword">for</span> comb <span class="keyword">in</span> combinations(chicken, M):</span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 각각의 집에서</span></span><br><span class="line">    <span class="keyword">for</span> hy, hx <span class="keyword">in</span> home:</span><br><span class="line">        temp = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="comment"># 가장 가까운 치킨집을 찾는다.</span></span><br><span class="line">        <span class="keyword">for</span> cy, cx <span class="keyword">in</span> comb:</span><br><span class="line">            t = abs(hy - cy) + abs(hx - cx)</span><br><span class="line">            temp = min(temp, t)</span><br><span class="line">        r += temp</span><br><span class="line">    res = min(r, res)</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>



<h4 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>], ans;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; h;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; c;</span><br><span class="line"><span class="built_in">vector</span> &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; comb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dist[<span class="number">1000</span>];</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h.<span class="built_in">size</span>(); i++)</span><br><span class="line">		dist[i] = <span class="number">987654321</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comb.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">			<span class="keyword">int</span> d = <span class="built_in">abs</span>(comb[i].first - h[j].first) + <span class="built_in">abs</span>(comb[i].second - h[j].second);</span><br><span class="line">			<span class="keyword">if</span> (dist[j] &gt; d)</span><br><span class="line">				dist[j] = d;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; h.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">		a += dist[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans &gt; a)</span><br><span class="line">		ans = a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> cnt, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (cnt == M) &#123;</span><br><span class="line">		cal();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = a; k &lt; c.<span class="built_in">size</span>(); k++) &#123;</span><br><span class="line">		comb.push_back(c[k]);</span><br><span class="line">		select(cnt + <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">		comb.pop_back();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">1</span>)</span><br><span class="line">				h.push_back(make_pair(i, j));</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">map</span>[i][j] == <span class="number">2</span>)</span><br><span class="line">				c.push_back(make_pair(i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ans = <span class="number">987654321</span>;</span><br><span class="line">	select(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>c++</tag>
        <tag>brute force</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 5373. 큐빙</title>
    <url>/2020/04/19/%5BBOJ%5D%205373.%20%ED%81%90%EB%B9%99/</url>
    <content><![CDATA[<h3 id="5373-큐빙"><a href="#5373-큐빙" class="headerlink" title="5373. 큐빙"></a>5373. 큐빙</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/5373" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 바라보는 면 회전</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(cube, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="string">'+'</span>:</span><br><span class="line">        temp = deepcopy(cube)</span><br><span class="line">        cube[<span class="number">0</span>][<span class="number">0</span>], cube[<span class="number">0</span>][<span class="number">1</span>], cube[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">0</span>], temp[<span class="number">1</span>][<span class="number">0</span>], temp[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        cube[<span class="number">1</span>][<span class="number">0</span>], cube[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">1</span>], temp[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">        cube[<span class="number">2</span>][<span class="number">0</span>], cube[<span class="number">2</span>][<span class="number">1</span>], cube[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">2</span>], temp[<span class="number">1</span>][<span class="number">2</span>], temp[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = deepcopy(cube)</span><br><span class="line">        cube[<span class="number">0</span>][<span class="number">0</span>], cube[<span class="number">0</span>][<span class="number">1</span>], cube[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">2</span>], temp[<span class="number">1</span>][<span class="number">2</span>], temp[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">        cube[<span class="number">1</span>][<span class="number">0</span>], cube[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">1</span>], temp[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">        cube[<span class="number">2</span>][<span class="number">0</span>], cube[<span class="number">2</span>][<span class="number">1</span>], cube[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">0</span>], temp[<span class="number">1</span>][<span class="number">0</span>], temp[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">tc = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(tc):</span><br><span class="line">    n = int(input())</span><br><span class="line">    lis = list(input().split())</span><br><span class="line"></span><br><span class="line">    cube_u = [</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>],</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>],</span><br><span class="line">        [<span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_d = [</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>],</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>],</span><br><span class="line">        [<span class="string">'y'</span>, <span class="string">'y'</span>, <span class="string">'y'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_f = [</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>],</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>],</span><br><span class="line">        [<span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_b = [</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>],</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>],</span><br><span class="line">        [<span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_l = [</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>],</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>],</span><br><span class="line">        [<span class="string">'g'</span>, <span class="string">'g'</span>, <span class="string">'g'</span>]</span><br><span class="line">    ]</span><br><span class="line">    cube_r = [</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>],</span><br><span class="line">        [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</span><br><span class="line">    ]</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 바라보는 면을 기준으로 상, 하, 좌, 우를 회전</span></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> lis:</span><br><span class="line">        <span class="keyword">if</span> d[<span class="number">0</span>] == <span class="string">'U'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = cube_f[<span class="number">0</span>][:]</span><br><span class="line">                cube_f[<span class="number">0</span>], cube_r[<span class="number">0</span>], cube_b[<span class="number">0</span>], cube_l[<span class="number">0</span>] = cube_r[<span class="number">0</span>][:], cube_b[<span class="number">0</span>][:], cube_l[<span class="number">0</span>][:], temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cube_f[<span class="number">0</span>][:]</span><br><span class="line">                cube_f[<span class="number">0</span>], cube_l[<span class="number">0</span>], cube_b[<span class="number">0</span>], cube_r[<span class="number">0</span>] = cube_l[<span class="number">0</span>][:], cube_b[<span class="number">0</span>][:], cube_r[<span class="number">0</span>][:], temp</span><br><span class="line">			<span class="comment"># 바라보는 면 회전 함수</span></span><br><span class="line">            rotate(cube_u, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'D'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = cube_f[<span class="number">2</span>][:]</span><br><span class="line">                cube_f[<span class="number">2</span>], cube_l[<span class="number">2</span>], cube_b[<span class="number">2</span>], cube_r[<span class="number">2</span>] = cube_l[<span class="number">2</span>][:], cube_b[<span class="number">2</span>][:], cube_r[<span class="number">2</span>][:], temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = cube_f[<span class="number">2</span>][:]</span><br><span class="line">                cube_f[<span class="number">2</span>], cube_r[<span class="number">2</span>], cube_b[<span class="number">2</span>], cube_l[<span class="number">2</span>] = cube_r[<span class="number">2</span>][:], cube_b[<span class="number">2</span>][:], cube_l[<span class="number">2</span>][:], temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_d, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'F'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>] = cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>] = cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">2</span>], cube_l[<span class="number">1</span>][<span class="number">2</span>], cube_l[<span class="number">0</span>][<span class="number">2</span>] = cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">1</span>], cube_u[<span class="number">2</span>][<span class="number">2</span>] = cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">0</span>], cube_r[<span class="number">1</span>][<span class="number">0</span>], cube_r[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">1</span>], cube_d[<span class="number">0</span>][<span class="number">0</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_f, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'B'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">2</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">0</span>][<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">                cube_l[<span class="number">2</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">0</span>][<span class="number">0</span>] = cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_r[<span class="number">0</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_r[<span class="number">0</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">2</span>][<span class="number">2</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_l[<span class="number">0</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_l[<span class="number">0</span>][<span class="number">0</span>], cube_l[<span class="number">1</span>][<span class="number">0</span>], cube_l[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">2</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">1</span>], cube_d[<span class="number">2</span>][<span class="number">2</span>] = cube_r[<span class="number">2</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_r[<span class="number">2</span>][<span class="number">2</span>], cube_r[<span class="number">1</span>][<span class="number">2</span>], cube_r[<span class="number">0</span>][<span class="number">2</span>] = cube_u[<span class="number">0</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">1</span>], cube_u[<span class="number">0</span>][<span class="number">0</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_b, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'L'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>] = cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>]]</span><br><span class="line">                cube_u[<span class="number">0</span>][<span class="number">0</span>], cube_u[<span class="number">1</span>][<span class="number">0</span>], cube_u[<span class="number">2</span>][<span class="number">0</span>] = cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_f[<span class="number">0</span>][<span class="number">0</span>], cube_f[<span class="number">1</span>][<span class="number">0</span>], cube_f[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_d[<span class="number">0</span>][<span class="number">0</span>], cube_d[<span class="number">1</span>][<span class="number">0</span>], cube_d[<span class="number">2</span>][<span class="number">0</span>] = cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_b[<span class="number">2</span>][<span class="number">2</span>], cube_b[<span class="number">1</span>][<span class="number">2</span>], cube_b[<span class="number">0</span>][<span class="number">2</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_l, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> d[<span class="number">0</span>] == <span class="string">'R'</span>:</span><br><span class="line">            <span class="keyword">if</span> d[<span class="number">1</span>] == <span class="string">'+'</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>] = cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = [cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>]]</span><br><span class="line">                cube_u[<span class="number">2</span>][<span class="number">2</span>], cube_u[<span class="number">1</span>][<span class="number">2</span>], cube_u[<span class="number">0</span>][<span class="number">2</span>] = cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">                cube_b[<span class="number">0</span>][<span class="number">0</span>], cube_b[<span class="number">1</span>][<span class="number">0</span>], cube_b[<span class="number">2</span>][<span class="number">0</span>] = cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_d[<span class="number">2</span>][<span class="number">2</span>], cube_d[<span class="number">1</span>][<span class="number">2</span>], cube_d[<span class="number">0</span>][<span class="number">2</span>] = cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">                cube_f[<span class="number">2</span>][<span class="number">2</span>], cube_f[<span class="number">1</span>][<span class="number">2</span>], cube_f[<span class="number">0</span>][<span class="number">2</span>] = temp</span><br><span class="line"></span><br><span class="line">            rotate(cube_r, d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            res += cube_u[i][j]</span><br><span class="line">        print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15685. 드래곤커브</title>
    <url>/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/</url>
    <content><![CDATA[<h3 id="15685-드래곤커브"><a href="#15685-드래곤커브" class="headerlink" title="15685. 드래곤커브"></a>15685. 드래곤커브</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15685" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ol><li>0 : 우 1: 상 2: 좌 3: 우</li><li>규칙을 찾는다.</li></ol><ul><li>ex) 시작점이 (0, 0) 이고 시작 방향이 0 일 경우</li></ul><p><code>0 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_0.JPG" class="" title="curve0"><p><code>1 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_1.JPG" class="" title="curve1"><p><code>2 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_2.JPG" class="" title="curve2"><p><code>3 세대</code></p><img src="/2020/04/18/%5BBOJ%5D%2015685.%20%EB%93%9C%EB%9E%98%EA%B3%A4%EC%BB%A4%EB%B8%8C/dragon_curve_3.JPG" class="" title="curve3"><ul><li>위 그림을 참고하면 <code>x + 1</code>세대의 방향은 <code>x</code>세대의 끝점부터 시작점까지 +1 씩 해준 방향과 동일함을 알 수 있다. 따라서 입력 받는 <code>g</code>세대까지 방향 list를 구현하고 <code>Map</code>에 값을 채워 나가며 드래곤 커브를 구현할 수 있다.</li></ul><ol start="3"><li>기준 좌표로부터 →, ↓, ↘ 방향을 체크하여 모두 지나간 지점이면 정사각형의 꼭지점이 모두 드래곤 커브의 일부임을 알 수 있다.</li></ol>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dy = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">dx = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>]</span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>] * <span class="number">101</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">101</span>)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(N):</span><br><span class="line">    x, y, d, g = map(int, input().split())</span><br><span class="line">    curve = [d]</span><br><span class="line">    Map[y][x] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(g):</span><br><span class="line">        curve += [(i + <span class="number">1</span>) % <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> curve[::<span class="number">-1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> curve:</span><br><span class="line">        y = y + dy[i]</span><br><span class="line">        x = x + dx[i]</span><br><span class="line">        Map[y][x] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] == <span class="number">4</span>:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15684. 사다리조작</title>
    <url>/2020/04/17/%5BBOJ%5D%2015684.%20%EC%82%AC%EB%8B%A4%EB%A6%AC%EC%A1%B0%EC%9E%91/</url>
    <content><![CDATA[<h3 id="15684-사다리조작"><a href="#15684-사다리조작" class="headerlink" title="15684. 사다리조작"></a>15684. 사다리조작</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15684" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <ol><li>H * N 크기의 사다리를 만든다.</li><li>입력된 좌표의 값을 1로 바꾼다(사다리 연결)</li><li>solve()를 통해서 재귀적으로 가능한 사다리를 만든다.<ul><li>이 때, 가로줄은 연속적으로 만들지 않아도 된다는 것을 유의한다.</li><li>현재 위치가 0이면(옆 사다리와 연결되어 있지 않다면) 1로 만들어주고 (사다리를 연결해주고) x 좌표를 +2 해주어 한칸을 건너 뛴다.</li><li>사다리를 생성할 때마다 do()를 통해서 사다리를 돌려본다.</li><li>사다리 개수가 3을 초과할 때, 사다리 조작에 실패했을 때 추가한 사다리 개수가 3이면 return을 해준다.</li></ul></li><li>do()를 통해 사다리를 탄다.<ul><li>현재 x 위치를 temp에 저장 후, y 가 사다리의 마지막에 도착했을 때 x 와 temp를 비교</li><li>현재 위치 값이 1 이라면 오른쪽으로 1칸 이동</li><li>현재 위치 값이 0 이라면 왼쪽을 탐색 후 왼쪽이 1일 경우 왼쪽으로 1칸 이동</li></ul></li></ol>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">        temp = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> ladder[j][temp]:</span><br><span class="line">                temp += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> temp &gt; <span class="number">0</span> <span class="keyword">and</span> ladder[j][temp<span class="number">-1</span>]:</span><br><span class="line">                temp -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i != temp:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, y, x)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> cnt &gt;= res:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> do():</span><br><span class="line">        res = min(res, cnt)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> cnt == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(y, H):</span><br><span class="line">        temp = x <span class="keyword">if</span> i == y <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(temp, N<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> ladder[i][j]:</span><br><span class="line">                ladder[i][j] = <span class="number">1</span></span><br><span class="line">                solve(cnt + <span class="number">1</span>, i, j + <span class="number">2</span>)</span><br><span class="line">                ladder[i][j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">N, M, H = map(int, input().split())</span><br><span class="line">ladder = [[<span class="number">0</span>] * (N) <span class="keyword">for</span> _ <span class="keyword">in</span> range(H)]</span><br><span class="line">res = <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(M):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    ladder[a<span class="number">-1</span>][b<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">solve(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">print(res <span class="keyword">if</span> res &lt; <span class="number">4</span> <span class="keyword">else</span> <span class="number">-1</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
        <tag>backtracking</tag>
      </tags>
  </entry>
  <entry>
    <title>[SWEA] 파이썬 SW문제해결 기본 - Tree (1)</title>
    <url>/2020/04/16/%5BSWEA%5D%20%ED%8C%8C%EC%9D%B4%EC%8D%AC%20SW%EB%AC%B8%EC%A0%9C%ED%95%B4%EA%B2%B0%20%EA%B8%B0%EB%B3%B8%20-%20Tree%20(1)/</url>
    <content><![CDATA[<h3 id="5174-subtree-5178-노드의-합"><a href="#5174-subtree-5178-노드의-합" class="headerlink" title="5174. subtree  / 5178. 노드의 합"></a>5174. subtree  / 5178. 노드의 합</h3><ul>
<li><p><a href="https://swexpertacademy.com/main/learn/course/subjectDetail.do?courseId=AVuPDN86AAXw5UW6&subjectId=AWOVJ-_6qfsDFAWg" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

<h3 id="subtree"><a href="#subtree" class="headerlink" title="- subtree"></a>- subtree</h3></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtree</span><span class="params">(s, cnt)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lis), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] == s <span class="keyword">and</span> <span class="keyword">not</span> visit[i]:</span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            subtree(lis[i+<span class="number">1</span>], cnt + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(T):</span><br><span class="line">    r, s = map(int, input().split())</span><br><span class="line">    lis = list(map(int, input().split()))</span><br><span class="line">    visit = [<span class="number">0</span>] * len(lis)</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lis), <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> lis[i] == s:</span><br><span class="line">            visit[i] = <span class="literal">True</span></span><br><span class="line">            res += <span class="number">1</span></span><br><span class="line">            subtree(lis[i+<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line">            visit[i] = <span class="literal">False</span></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;res&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="노드의-합"><a href="#노드의-합" class="headerlink" title="- 노드의 합"></a>- 노드의 합</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> tc <span class="keyword">in</span> range(T):</span><br><span class="line">    N, M, L = map(int, input().split())</span><br><span class="line">    lis = [<span class="number">0</span>] * (N+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(M):</span><br><span class="line">        a, b = map(int, input().split())</span><br><span class="line">        lis[a] = b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> N % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        lis[N//<span class="number">2</span>] = lis[N]</span><br><span class="line">        N -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> N &gt; <span class="number">1</span>:</span><br><span class="line">        lis[N//<span class="number">2</span>] = lis[N] + lis[N<span class="number">-1</span>]</span><br><span class="line">        N -= <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'#<span class="subst">&#123;tc+<span class="number">1</span>&#125;</span> <span class="subst">&#123;lis[L]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SW Expert Academy</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>algorithm</tag>
        <tag>SWEA</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 15683. 감시</title>
    <url>/2020/04/15/%5BBOJ%5D%2015683.%20%EA%B0%90%EC%8B%9C/</url>
    <content><![CDATA[<h3 id="15683-감시"><a href="#15683-감시" class="headerlink" title="15683. 감시"></a>15683. 감시</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/15683" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>예전 c++로 풀 때는 하나하나 다 구현하였는데, python을 배우면서 쉽게 접근이 가능했다.</p>
          </div>

<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 상 하 좌 우</span></span><br><span class="line">dy = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(idx, m)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> cnt</span><br><span class="line">    <span class="keyword">if</span> idx == len(cctv):</span><br><span class="line">        <span class="comment"># 행마다 0인 값을 카운트</span></span><br><span class="line">        temp = sum([i.count(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> m])</span><br><span class="line">        cnt = min(cnt, temp)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    y, x, n = cctv[idx]</span><br><span class="line">    <span class="comment"># cctv의 번호에 맞게 방향을 꺼내준다.</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> di[n]:</span><br><span class="line">        cpMap = copy.deepcopy(m)</span><br><span class="line">        <span class="comment"># 방향 설정</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">            ny, nx = y, x</span><br><span class="line">            <span class="keyword">while</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="comment"># 벽이면</span></span><br><span class="line">                <span class="keyword">if</span> cpMap[ny][nx] == <span class="number">6</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="comment"># 감시</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cpMap[ny][nx] = <span class="number">7</span></span><br><span class="line">                ny += dy[i]</span><br><span class="line">                nx += dx[i]</span><br><span class="line">        <span class="comment"># 재귀를 통한 반복</span></span><br><span class="line">        dfs(idx + <span class="number">1</span>, cpMap)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> i <span class="keyword">in</span> range(N)]</span><br><span class="line">cctv = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">            cctv.append((i,j,Map[i][j]))</span><br><span class="line"><span class="comment"># cctv의 번호에 따라 바라볼 수 있는 방향을 다 넣어둠</span></span><br><span class="line">di = [<span class="number">0</span>,[[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]]</span><br><span class="line"></span><br><span class="line">cnt = float(<span class="string">'inf'</span>)</span><br><span class="line">dfs(<span class="number">0</span>, Map)</span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

<h4 id="C-예전-풀이"><a href="#C-예전-풀이" class="headerlink" title="C++ (예전 풀이)"></a>C++ (예전 풀이)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 987654321</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, Map[<span class="number">9</span>][<span class="number">9</span>], ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; cctv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">see</span><span class="params">(<span class="keyword">int</span> dir, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="comment">// 0 : 북 , 1: 동 , 2 : 남 , 3 : 서</span></span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">0</span>) &#123;<span class="comment">//위쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">0</span>)</span><br><span class="line">				Map[i][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">1</span>) &#123;<span class="comment">//오른쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = y + <span class="number">1</span>; i &lt; M; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">0</span>)</span><br><span class="line">				Map[x][i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">2</span>) &#123;<span class="comment">//아래쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[i][y] == <span class="number">0</span>)</span><br><span class="line">				Map[i][y] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dir == <span class="number">3</span>) &#123;<span class="comment">//왼쪽</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = y - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">6</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span> (Map[x][i] == <span class="number">0</span>)</span><br><span class="line">				Map[x][i] = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (check == cctv.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (Map[i][j] == <span class="number">0</span>)</span><br><span class="line">					cnt++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		ans = <span class="built_in">min</span>(ans, cnt);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> x = cctv[check].first;</span><br><span class="line">	<span class="keyword">int</span> y = cctv[check].second;</span><br><span class="line">	<span class="keyword">int</span> cpMap[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">			cpMap[i][j] = Map[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">2</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see(dir + <span class="number">2</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see((dir + <span class="number">1</span>)%<span class="number">4</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">4</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++) &#123;</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">			see((dir + <span class="number">1</span>) % <span class="number">4</span>, x, y);</span><br><span class="line">			see((dir + <span class="number">2</span>) % <span class="number">4</span>, x, y);</span><br><span class="line">	</span><br><span class="line">			dfs(check + <span class="number">1</span>);</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;M; j++)</span><br><span class="line">					Map[i][j] = cpMap[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Map[x][y] == <span class="number">5</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> dir = <span class="number">0</span>; dir &lt; <span class="number">4</span>; dir++)</span><br><span class="line">			see(dir, x, y);</span><br><span class="line">		dfs(check + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Map[i][j]);</span><br><span class="line">			<span class="keyword">if</span> (Map[i][j] &gt; <span class="number">0</span> &amp;&amp; Map[i][j] &lt; <span class="number">6</span>)</span><br><span class="line">				cctv.push_back(make_pair(i, j));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ans = MAX;</span><br><span class="line">	dfs(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14891. 톱니바퀴</title>
    <url>/2020/03/24/%5BBOJ%5D%2014891.%20%ED%86%B1%EB%8B%88%EB%B0%94%ED%80%B4/</url>
    <content><![CDATA[<h3 id="14891-톱니바퀴"><a href="#14891-톱니바퀴" class="headerlink" title="14891. 톱니바퀴"></a>14891. 톱니바퀴</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14891" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotation</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">        temp = gear[n].pop()</span><br><span class="line">        gear[n].insert(<span class="number">0</span>, temp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        temp = gear[n].pop(<span class="number">0</span>)</span><br><span class="line">        gear[n].append(temp)</span><br><span class="line">gear = [list(map(int, input())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">rotate, res = [], <span class="number">0</span></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(K):</span><br><span class="line">    rotate.append(list(map(int, input().split())))</span><br><span class="line"><span class="keyword">for</span> n, d <span class="keyword">in</span> rotate:</span><br><span class="line">    state = [(n <span class="number">-1</span>, d)]</span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">2</span>] != gear[i+<span class="number">1</span>][<span class="number">6</span>]:</span><br><span class="line">                state.append((i + <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    t = d</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> gear[i][<span class="number">6</span>] != gear[i<span class="number">-1</span>][<span class="number">2</span>]:</span><br><span class="line">                state.append((i - <span class="number">1</span>, t * (<span class="number">-1</span>)))</span><br><span class="line">                t *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> state:</span><br><span class="line">        rotation(a, b)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">if</span> gear[i][<span class="number">0</span>]:</span><br><span class="line">        res += (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14890. 경사로</title>
    <url>/2020/03/23/%5BBOJ%5D%2014890.%20%EA%B2%BD%EC%82%AC%EB%A1%9C/</url>
    <content><![CDATA[<h3 id="14890-경사로"><a href="#14890-경사로" class="headerlink" title="14890. 경사로"></a>14890. 경사로</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14890" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, L = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">visit = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 가로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] == Map[i][idx]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[i][idx - <span class="number">1</span>] - Map[i][idx]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[i][idx - <span class="number">1</span>] &lt; Map[i][idx]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][idx] == Map[i][j]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N): <span class="comment"># 세로 탐색</span></span><br><span class="line">    idx, cnt = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> idx &lt; N:</span><br><span class="line">        <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] == Map[idx][i]:</span><br><span class="line">            cnt += <span class="number">1</span>; idx += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> abs(Map[idx - <span class="number">1</span>][i] - Map[idx][i]) &gt;= <span class="number">2</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> Map[idx - <span class="number">1</span>][i] &lt; Map[idx][i]:</span><br><span class="line">                <span class="keyword">if</span> cnt &lt; L: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    idx += <span class="number">1</span>; cnt = <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(idx, N):</span><br><span class="line">                    <span class="keyword">if</span> Map[idx][i] == Map[j][i]: temp += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> temp &gt;= L:</span><br><span class="line">                    idx += L; cnt = <span class="number">0</span>; <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> idx == N: res += <span class="number">1</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14889. 스타트와 링크</title>
    <url>/2020/03/21/%5BBOJ%5D%2014889.%20%EC%8A%A4%ED%83%80%ED%8A%B8%EC%99%80%20%EB%A7%81%ED%81%AC/</url>
    <content><![CDATA[<h3 id="14889-스타트와-링크"><a href="#14889-스타트와-링크" class="headerlink" title="14889. 스타트와 링크"></a>14889. 스타트와 링크</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14889" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">comb = list(combinations(range(N), N//<span class="number">2</span>))</span><br><span class="line">count = len(list(combinations(range(N), N//<span class="number">2</span>)))//<span class="number">2</span></span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    res = float(<span class="string">'inf'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> range(count):</span><br><span class="line">        a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                a += Map[comb[l][i]][comb[l][j]] + Map[comb[l][j]][comb[l][i]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(N//<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, N//<span class="number">2</span>):</span><br><span class="line">                b += Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]] + Map[comb[count*<span class="number">2</span> <span class="number">-1</span> -l][j]][comb[count*<span class="number">2</span> <span class="number">-1</span> -l][i]]</span><br><span class="line">        res = min(res, abs(a-b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14888. 연산자 끼워넣기</title>
    <url>/2020/03/19/%5BBOJ%5D%2014888.%20%EC%97%B0%EC%82%B0%EC%9E%90%20%EB%81%BC%EC%9B%8C%EB%84%A3%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14888-연산자-끼워넣기"><a href="#14888-연산자-끼워넣기" class="headerlink" title="14888. 연산자 끼워넣기"></a>14888. 연산자 끼워넣기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14888" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">numbers = list(map(int, input().split()))</span><br><span class="line">plus, minus, product, divide = map(int, input().split())</span><br><span class="line">max_n = <span class="number">-10e10</span></span><br><span class="line">min_n = <span class="number">10e10</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(plus, minus, product, divide, cnt, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cnt == N<span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">global</span> max_n, min_n</span><br><span class="line">        max_n = max(number, max_n)</span><br><span class="line">        min_n = min(number, min_n)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> plus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus - <span class="number">1</span>, minus, product, divide, cnt + <span class="number">1</span>, number + numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> minus &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus - <span class="number">1</span>, product, divide, cnt + <span class="number">1</span>, number - numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> product &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product - <span class="number">1</span>, divide, cnt + <span class="number">1</span>, number * numbers[cnt+<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> divide &gt; <span class="number">0</span>:</span><br><span class="line">        calc(plus, minus, product, divide - <span class="number">1</span>, cnt + <span class="number">1</span>, int(number / numbers[cnt+<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">calc(plus, minus, product, divide, <span class="number">0</span>, numbers[<span class="number">0</span>])</span><br><span class="line">print(max_n)</span><br><span class="line">print(min_n)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14499. 주사위 굴리기</title>
    <url>/2020/03/18/%5BBOJ%5D%2014499.%20%EC%A3%BC%EC%82%AC%EC%9C%84%20%EA%B5%B4%EB%A6%AC%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14499-주사위-굴리기"><a href="#14499-주사위-굴리기" class="headerlink" title="14499. 주사위 굴리기"></a>14499. 주사위 굴리기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14499" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>굴리는 것만 생각하면 된다. 방향은 틀어 지지 않는다.</p><p>그래서 상하좌우로 굴려질 때, 각 위치가 이동되어 지는 위치만을 고려하여 풀이하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">direction = [</span><br><span class="line">    [<span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]</span><br><span class="line">]</span><br><span class="line">d = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">N, M, y, x, K = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">move = list(map(int, input().split()))</span><br><span class="line">dice, temp = [<span class="number">0</span>] * <span class="number">6</span>, [<span class="number">0</span>] * <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> move:</span><br><span class="line">    y += d[i<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">    x += d[i<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &gt; y <span class="keyword">or</span> y &gt;= N <span class="keyword">or</span> <span class="number">0</span> &gt; x <span class="keyword">or</span> x &gt;= M:</span><br><span class="line">        y -= d[i - <span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">        x -= d[i - <span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    temp = dice[:]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        dice[j] = temp[direction[i<span class="number">-1</span>][j]<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = dice[<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dice[<span class="number">5</span>], Map[y][x] = Map[y][x], <span class="number">0</span></span><br><span class="line">    print(dice[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13458. 시험 감독</title>
    <url>/2020/03/18/%5BBOJ%5D%2013458.%20%EC%8B%9C%ED%97%98%20%EA%B0%90%EB%8F%85/</url>
    <content><![CDATA[<h3 id="13458-시험-감독"><a href="#13458-시험-감독" class="headerlink" title="13458. 시험 감독"></a>13458. 시험 감독</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13458" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = int(input())</span><br><span class="line">student = list(map(int, input().split()))</span><br><span class="line">B, C = map(int, input().split())</span><br><span class="line">cnt = N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> student:</span><br><span class="line">    a = i - B</span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> (a % C) == <span class="number">0</span>:</span><br><span class="line">            cnt += a // C</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt += (a//C) + <span class="number">1</span></span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 3190. 뱀</title>
    <url>/2020/03/17/%5BBOJ%5D%203190.%20%EB%B1%80/</url>
    <content><![CDATA[<h3 id="3190-뱀"><a href="#3190-뱀" class="headerlink" title="3190. 뱀"></a>3190. 뱀</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/3190" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_check</span><span class="params">(d, str)</span>:</span> <span class="comment"># 방향을 돌려준다.</span></span><br><span class="line">    <span class="keyword">if</span> str == <span class="string">'D'</span>:</span><br><span class="line">        d = (d + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">elif</span> str == <span class="string">'L'</span>:</span><br><span class="line">        d = (d - <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(snake)</span>:</span> <span class="comment"># 방향따라 한칸씩 이동</span></span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">2</span>] == <span class="number">0</span>:</span><br><span class="line">        snake[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">1</span>:</span><br><span class="line">        snake[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">2</span>:</span><br><span class="line">        snake[<span class="number">1</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> snake[<span class="number">2</span>] == <span class="number">3</span>:</span><br><span class="line">        snake[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> snake</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">()</span>:</span></span><br><span class="line">    snake = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]   <span class="comment"># 초기 뱀의 위치, 방향</span></span><br><span class="line">    route.append([<span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># 뱀이 움직이는 경로</span></span><br><span class="line">    Map[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    t_idx = end_time = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        s = move(snake) <span class="comment"># 뱀의 이동</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> s[<span class="number">1</span>] &lt; <span class="number">1</span> <span class="keyword">or</span> N &lt; s[<span class="number">0</span>] <span class="keyword">or</span> N &lt; s[<span class="number">1</span>] <span class="keyword">or</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] == <span class="number">1</span>:</span><br><span class="line">            end_time += <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] != <span class="number">2</span>: <span class="comment"># 사과가 없으면</span></span><br><span class="line">            a, b = route.pop(<span class="number">0</span>) <span class="comment"># 꼬리 당기기</span></span><br><span class="line">            Map[a][b] = <span class="number">0</span></span><br><span class="line">        Map[s[<span class="number">0</span>]][s[<span class="number">1</span>]] = <span class="number">1</span></span><br><span class="line">        route.append([s[<span class="number">0</span>], s[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">        snake = s[:] <span class="comment"># 이동한 위치를 다시 snake에 저장</span></span><br><span class="line"></span><br><span class="line">        end_time += <span class="number">1</span> <span class="comment"># 1초 증가</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t_idx != len(time):</span><br><span class="line">            <span class="keyword">if</span> end_time == int(time[t_idx][<span class="number">0</span>]): <span class="comment"># 이동 시간에 이동</span></span><br><span class="line">                snake[<span class="number">2</span>] = dir_check(snake[<span class="number">2</span>], time[t_idx][<span class="number">1</span>])</span><br><span class="line">                t_idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> end_time</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [[<span class="number">0</span>]*(N+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">time = []</span><br><span class="line">route = []</span><br><span class="line"></span><br><span class="line">K = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(K):</span><br><span class="line">    a, b = map(int, input().split())</span><br><span class="line">    Map[a][b] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">L = int(input())</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(L):</span><br><span class="line">    a, b = list(input().split())</span><br><span class="line">    time.append((a,b))</span><br><span class="line"></span><br><span class="line">print(solve())</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 12100. 2048 (Easy)</title>
    <url>/2020/03/17/%5BBOJ%5D%2012100.%202048%20(Easy)/</url>
    <content><![CDATA[<h3 id="12100-2048-Easy"><a href="#12100-2048-Easy" class="headerlink" title="12100. 2048 (Easy)"></a>12100. 2048 (Easy)</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/12100" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작 전, 초기 맵의 MAX값을 res에 넣어 두고 시작한다.</p><p>product 내장 함수를 통해서 중복순열을 구현하여 시뮬레이션을 돌렸다.</p><p>같은 값을 더해주고 이동시키면서 한칸한칸 전진하려 했는데 헷갈려서</p><p>같은 값을 찾아서 모두 더해준 후 각 방향에 따라서 이동시켜 주는 식으로 풀이 하였다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(S, n)</span>:</span></span><br><span class="line">    temp = n</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> range(len(S)):</span><br><span class="line">        <span class="keyword">if</span> S[d] == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]: <span class="keyword">continue</span></span><br><span class="line">                    cnt = <span class="number">1</span>; flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j + cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j + cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j + cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[j][i], Map[k][i] = Map[k][i], Map[j][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[j - cnt][i] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[j][i] == Map[j - cnt][i]:</span><br><span class="line">                            Map[j][i] *= <span class="number">2</span></span><br><span class="line">                            Map[j - cnt][i] = <span class="number">0</span></span><br><span class="line">                            temp = Map[j][i] <span class="keyword">if</span> temp &lt; Map[j][i] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[j][i] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[k][i] != <span class="number">0</span>:</span><br><span class="line">                                Map[k][i], Map[j][i] = Map[j][i], Map[k][i]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j + cnt == N <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j + cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j + cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j + cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, N):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][j], Map[i][k] = Map[i][k], Map[i][j]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> S[d] == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    flag = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">if</span> j - cnt == <span class="number">-1</span> <span class="keyword">or</span> flag: <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">if</span> Map[i][j - cnt] == <span class="number">0</span>:</span><br><span class="line">                            cnt += <span class="number">1</span>; <span class="keyword">continue</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            flag = <span class="number">1</span>; <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> flag:</span><br><span class="line">                        <span class="keyword">if</span> Map[i][j] == Map[i][j - cnt]:</span><br><span class="line">                            Map[i][j] *= <span class="number">2</span></span><br><span class="line">                            Map[i][j - cnt] = <span class="number">0</span></span><br><span class="line">                            temp = Map[i][j] <span class="keyword">if</span> temp &lt; Map[i][j] <span class="keyword">else</span> temp</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(N - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                    <span class="keyword">if</span> Map[i][j] == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> k <span class="keyword">in</span> range(j - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                            <span class="keyword">if</span> Map[i][k] != <span class="number">0</span>:</span><br><span class="line">                                Map[i][k], Map[i][j] = Map[i][j], Map[i][k]</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">N = int(input())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">cpMap = deepcopy(Map)</span><br><span class="line">lis = list(product(range(<span class="number">4</span>), repeat=<span class="number">5</span>))</span><br><span class="line">temp = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    temp = max(temp, *Map[i])</span><br><span class="line">res = temp</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(lis)):</span><br><span class="line">    n = move(lis[i], res)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">    Map = deepcopy(cpMap)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 13460. 구슬 탈출 2</title>
    <url>/2020/03/17/%5BBOJ%5D%2013460.%20%EA%B5%AC%EC%8A%AC%20%ED%83%88%EC%B6%9C%202/</url>
    <content><![CDATA[<h3 id="13460-구슬-탈출-2"><a href="#13460-구슬-탈출-2" class="headerlink" title="13460. 구슬 탈출 2"></a>13460. 구슬 탈출 2</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/13460" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>


</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(dir, y, x, hy, hx)</span>:</span> <span class="comment"># 각 방향으로 이동하면서 홀에 빠지는지 체크</span></span><br><span class="line">    cnt = hole = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>: <span class="comment"># 상</span></span><br><span class="line">        <span class="keyword">while</span> Map[y - cnt - <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y - cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y -= cnt</span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>: <span class="comment"># 하</span></span><br><span class="line">        <span class="keyword">while</span> Map[y + cnt + <span class="number">1</span>][x] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> y + cnt == hy <span class="keyword">and</span> x == hx:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        y += cnt</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>: <span class="comment"># 좌</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x - cnt - <span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x - cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x -= cnt</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># 우</span></span><br><span class="line">        <span class="keyword">while</span> Map[y][x + cnt +<span class="number">1</span>] != <span class="string">'#'</span>:</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> x + cnt == hx <span class="keyword">and</span> y == hy:</span><br><span class="line">                hole = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        x += cnt</span><br><span class="line">    <span class="keyword">return</span> hole, y, x, cnt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_rb</span><span class="params">(dir, ry, rx, by, bx, res)</span>:</span> <span class="comment"># 같은 자리니까 더 많이 움직인 쪽이 멀리 있으니까 한칸 덜 오도록</span></span><br><span class="line">    <span class="keyword">if</span> dir == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> res: by -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: ry -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> dir == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> res: bx -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: rx -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ry, rx, by, bx</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(cnt, d, ry, rx, by, bx, hy, hx)</span>:</span> <span class="comment"># red, blue, hole</span></span><br><span class="line">    dq = deque()</span><br><span class="line">    dq.append([cnt, d, ry, rx, by, bx, hy, hx])</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> dq:</span><br><span class="line">        cnt, d, ry, rx, by, bx, hy, hx = dq.popleft()</span><br><span class="line">        <span class="keyword">if</span> cnt &gt; <span class="number">9</span>:</span><br><span class="line">            result = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>): <span class="comment"># 상하좌우 체크</span></span><br><span class="line">            <span class="keyword">if</span> cnt != <span class="number">0</span>: <span class="comment"># 처음에는 상하좌우 다 돌아야 되기 때문에 거를 필요 없음</span></span><br><span class="line">                <span class="keyword">if</span> d == <span class="number">0</span> <span class="keyword">or</span> d == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span>: <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span> d == <span class="number">2</span> <span class="keyword">or</span> d == <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">or</span> i == <span class="number">3</span>: <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            b_check, next_by, next_bx, b_cnt = move(i, by, bx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> b_check: <span class="comment"># 파란색 공이 빠졌으면 진행할 필요없이 다음으로</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            r_check, next_ry, next_rx, r_cnt = move(i, ry, rx, hy, hx)</span><br><span class="line">            <span class="keyword">if</span> r_check: <span class="comment"># 빨간색 공이 빠졌으면 끝</span></span><br><span class="line">                result = cnt + <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> next_ry == next_by <span class="keyword">and</span> next_rx == next_bx: <span class="comment"># 옮겼을 때, 같은 위치면 이동</span></span><br><span class="line">                next_ry, next_rx, next_by, next_bx = compare_rb(i, next_ry, next_rx, next_by, next_bx, b_cnt &gt; r_cnt)</span><br><span class="line">            </span><br><span class="line">            dq.append([cnt + <span class="number">1</span>, i, next_ry, next_rx, next_by, next_bx, hy, hx])</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [input() <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'B'</span>:</span><br><span class="line">            blue_y = i; blue_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'R'</span>:</span><br><span class="line">            red_y = i; red_x = j</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="string">'O'</span>:</span><br><span class="line">            hole_y = i; hole_x = j</span><br><span class="line"></span><br><span class="line">print(solve(<span class="number">0</span>, <span class="literal">None</span>, red_y, red_x, blue_y, blue_x, hole_y, hole_x))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14502. 연구소</title>
    <url>/2020/03/16/%5BBOJ%5D%2014502.%20%EC%97%B0%EA%B5%AC%EC%86%8C/</url>
    <content><![CDATA[<h3 id="14502-연구소"><a href="#14502-연구소" class="headerlink" title="14502. 연구소"></a>14502. 연구소</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14502" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>바이러스 위치를 virus 리스트에 담고, 0의 위치를 comb 리스트를 담았다.</p><p>combinations 함수를 통해 comb 리스트안의 요소들로 조합을 만들어 bfs를 돌리며</p><p>안전영역의 최대값을 구했다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">(visit)</span>:</span></span><br><span class="line">    cnt = len(comb) - <span class="number">3</span></span><br><span class="line">    q = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> virus:</span><br><span class="line">        q.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> q:</span><br><span class="line">        y, x = q.popleft()</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> (<span class="number">-1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            ny = y + a</span><br><span class="line">            nx = x + b</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> Map[ny][nx] <span class="keyword">and</span> <span class="keyword">not</span> visit[ny][nx]:</span><br><span class="line">                    visit[ny][nx] = <span class="number">1</span></span><br><span class="line">                    q.append((ny, nx))</span><br><span class="line">                    cnt -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cnt &lt;= res: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> cnt</span><br><span class="line"></span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">virus = []</span><br><span class="line">comb = []</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="keyword">if</span> Map[i][j] == <span class="number">2</span>:</span><br><span class="line">            virus.append([i, j])</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> Map[i][j]:</span><br><span class="line">            comb.append([i, j])</span><br><span class="line">c = list(combinations(comb, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(c)):</span><br><span class="line">    visit = [[<span class="number">0</span>] * M <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        y, x = c[i][j][<span class="number">0</span>], c[i][j][<span class="number">1</span>]</span><br><span class="line">        visit[y][x] = <span class="number">1</span></span><br><span class="line">    n = bfs(visit)</span><br><span class="line">    res = res <span class="keyword">if</span> res &gt; n <span class="keyword">else</span> n</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14500. 테트로미노</title>
    <url>/2020/03/16/%5BBOJ%5D%2014500.%20%ED%85%8C%ED%8A%B8%EB%A1%9C%EB%AF%B8%EB%85%B8/</url>
    <content><![CDATA[<h3 id="14500-테트로미노"><a href="#14500-테트로미노" class="headerlink" title="14500. 테트로미노"></a>14500. 테트로미노</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14500" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>문제 그대로 구현했다. 블럭을 순서를 매기고 회전할 수 있는 방향을 하나하나 다 지정해주었다.</p><p>문제를 제대로 읽었어야 했다. 회전까지는 만들고 대칭을 안읽어서 헤맸었다.</p><p>회전과 대칭이 모두 가능하다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N, M = map(int, input().split()) <span class="comment"># N * M</span></span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = set()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(N):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(M):</span><br><span class="line">        <span class="comment"># 1번</span></span><br><span class="line">        <span class="keyword">if</span> j + <span class="number">3</span> &lt; M:</span><br><span class="line">            res.add(sum(Map[i][j:j+<span class="number">4</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">3</span> &lt; N:</span><br><span class="line">            temp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, i + <span class="number">4</span>):</span><br><span class="line">                temp += Map[k][j]</span><br><span class="line">            res.add(temp)</span><br><span class="line">        <span class="comment"># 2번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="comment"># 3번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">2</span>][j] + Map[i+<span class="number">2</span>][j<span class="number">-1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j+<span class="number">2</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 4번</span></span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">2</span>][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            res.add((Map[i][j] + Map[i + <span class="number">1</span>][j] + Map[i + <span class="number">1</span>][j - <span class="number">1</span>] + Map[i + <span class="number">2</span>][j - <span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">2</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">2</span>]))</span><br><span class="line">        <span class="comment"># 5번</span></span><br><span class="line">        <span class="keyword">if</span> i - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i<span class="number">-1</span>][j+<span class="number">1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i<span class="number">-1</span>][j] + Map[i][j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">1</span> &lt; N <span class="keyword">and</span> j - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> j + <span class="number">1</span> &lt; M:</span><br><span class="line">            res.add((Map[i][j] + Map[i+<span class="number">1</span>][j] + Map[i+<span class="number">1</span>][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j+<span class="number">1</span>]))</span><br><span class="line">            res.add((Map[i][j] + Map[i][j+<span class="number">1</span>] + Map[i][j<span class="number">-1</span>] + Map[i+<span class="number">1</span>][j]))</span><br><span class="line">print(max(res))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>[BOJ] 14503. 로봇 청소기</title>
    <url>/2020/03/16/%5BBOJ%5D%2014503.%20%EB%A1%9C%EB%B4%87%20%EC%B2%AD%EC%86%8C%EA%B8%B0/</url>
    <content><![CDATA[<h3 id="14503-로봇-청소기"><a href="#14503-로봇-청소기" class="headerlink" title="14503. 로봇 청소기"></a>14503. 로봇 청소기</h3><ul>
<li><p><a href="https://www.acmicpc.net/problem/14503" target="_blank" rel="noopener">문제링크</a></p>
<a id="more"></a>

</li>
</ul>
<div class="note warning">
            <p>시작위치 ry, rx 와 방향 d를 받아서 풀이를 진행한다.</p><p>0 : 북, 1 : 동, 2 : 남, 3 : 서</p><p>방향이 지정되어 있고 문제의 조건에 현재 방향의 왼쪽부터 탐색한다고 되어 있으므로</p><p>탐색 방향을 dir + 3 - i 로 지정해 주었다.</p><p>다음 2 - c 조건에 의해서 4방향 다 청소가 되어 있는 경우</p><p>방향에 +2를 해주어 반대방향으로 설정해주고 다시 solve함수를 호출한다.</p><p>이 때, 2 - d의 조건인 반대방향이 벽이면 그대로 종료한다.</p>
          </div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(y, x, dir)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> res</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> Map[y][x]:</span><br><span class="line">        Map[y][x] = <span class="number">2</span></span><br><span class="line">        res += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        a, b = d[(dir + <span class="number">3</span> - i) % <span class="number">4</span>]</span><br><span class="line">        ny = y + a</span><br><span class="line">        nx = x + b</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= ny &lt; N <span class="keyword">and</span> <span class="number">0</span> &lt;= nx &lt; M <span class="keyword">and</span> <span class="keyword">not</span> Map[ny][nx]:</span><br><span class="line">            solve(ny,  nx, (dir + <span class="number">3</span> - i) % <span class="number">4</span>)</span><br><span class="line">    <span class="comment">#4방향 다 청소 되어 있는 경우</span></span><br><span class="line">    a, b = d[(dir+<span class="number">2</span>) % <span class="number">4</span>]</span><br><span class="line">    ny = y + a</span><br><span class="line">    nx = x + b</span><br><span class="line">    <span class="keyword">if</span> Map[ny][nx] == <span class="number">1</span>:</span><br><span class="line">        print(res); sys.exit(<span class="number">0</span>)</span><br><span class="line">    solve(ny, nx, dir)</span><br><span class="line"><span class="comment"># 0123 북동남서</span></span><br><span class="line">d = [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">-1</span>]]</span><br><span class="line">N, M = map(int, input().split())</span><br><span class="line">ry, rx, dir = map(int, input().split())</span><br><span class="line">Map = [list(map(int, input().split())) <span class="keyword">for</span> _ <span class="keyword">in</span> range(N)]</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line">solve(ry, rx, dir)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Baekjoon Online Judge</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>BOJ</tag>
        <tag>algorithm</tag>
        <tag>simulation</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title>첫 포스팅! 꾸준하자</title>
    <url>/2020/03/16/%5B1%5D%EC%B2%AB%20%ED%8F%AC%EC%8A%A4%ED%8C%85/</url>
    <content><![CDATA[<p>​           <a id="more"></a></p>
<div class="note warning">
            <ul><li>생각나는 것들 기록하기</li><li>하루 최소 1commit 하기</li><li>공부한 거 정리</li></ul>
          </div>

]]></content>
  </entry>
</search>
